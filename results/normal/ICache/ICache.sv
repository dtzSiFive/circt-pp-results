// Generated by CIRCT 1.21.0g20221102_b05b394
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_MEM_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// VCS coverage exclude_file
module tag_array_0_combMem(	// ICache.scala:97:25
  input  [5:0]  RW0_addr,
  input         RW0_en,
                RW0_clk,
                RW0_wmode,
  input  [19:0] RW0_wdata,
  output [19:0] RW0_rdata);

  reg  [19:0] Memory[0:63];	// ICache.scala:97:25
  reg  [5:0]  _GEN;	// ICache.scala:97:25
  reg         _GEN_0;	// ICache.scala:97:25
  reg         _GEN_1;	// ICache.scala:97:25
  wire [19:0] _GEN_2;	// ICache.scala:97:25
  /* synopsys infer_mux_override */
  assign _GEN_2 = Memory[_GEN] /* cadence map_to_mux */;	// ICache.scala:97:25
  always @(posedge RW0_clk) begin	// ICache.scala:97:25
    _GEN <= RW0_addr;	// ICache.scala:97:25
    _GEN_0 <= RW0_en;	// ICache.scala:97:25
    _GEN_1 <= RW0_wmode;	// ICache.scala:97:25
    if (RW0_en & RW0_wmode)	// ICache.scala:97:25
      Memory[RW0_addr] <= RW0_wdata;	// ICache.scala:97:25
  end // always @(posedge)
  `ifndef SYNTHESIS	// ICache.scala:97:25
    `ifdef RANDOMIZE_MEM_INIT	// ICache.scala:97:25
      integer initvar;	// ICache.scala:97:25
      reg [31:0] _RANDOM_MEM;	// ICache.scala:97:25
    `endif // RANDOMIZE_MEM_INIT
    `ifdef RANDOMIZE_REG_INIT	// ICache.scala:97:25
      reg [31:0] _RANDOM;	// ICache.scala:97:25
    `endif // RANDOMIZE_REG_INIT
    initial begin	// ICache.scala:97:25
      `INIT_RANDOM_PROLOG_	// ICache.scala:97:25
      `ifdef RANDOMIZE_MEM_INIT	// ICache.scala:97:25
        for (initvar = 0; initvar < 64; initvar = initvar + 1) begin
          _RANDOM_MEM = {`RANDOM};
          Memory[initvar] = _RANDOM_MEM[19:0];
        end	// ICache.scala:97:25
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// ICache.scala:97:25
        _RANDOM = {`RANDOM};	// ICache.scala:97:25
        _GEN = _RANDOM[5:0];	// ICache.scala:97:25
        _GEN_0 = _RANDOM[6];	// ICache.scala:97:25
        _GEN_1 = _RANDOM[7];	// ICache.scala:97:25
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? _GEN_2 : 20'bx;	// ICache.scala:97:25
endmodule

// VCS coverage exclude_file
module _T_550_combMem(	// ICache.scala:132:28
  input  [8:0]  RW0_addr,
  input         RW0_en,
                RW0_clk,
                RW0_wmode,
  input  [63:0] RW0_wdata,
  output [63:0] RW0_rdata);

  reg  [63:0] Memory[0:511];	// ICache.scala:132:28
  reg  [8:0]  _GEN;	// ICache.scala:132:28
  reg         _GEN_0;	// ICache.scala:132:28
  reg         _GEN_1;	// ICache.scala:132:28
  wire [63:0] _GEN_2;	// ICache.scala:132:28
  /* synopsys infer_mux_override */
  assign _GEN_2 = Memory[_GEN] /* cadence map_to_mux */;	// ICache.scala:132:28
  always @(posedge RW0_clk) begin	// ICache.scala:132:28
    _GEN <= RW0_addr;	// ICache.scala:132:28
    _GEN_0 <= RW0_en;	// ICache.scala:132:28
    _GEN_1 <= RW0_wmode;	// ICache.scala:132:28
    if (RW0_en & RW0_wmode)	// ICache.scala:132:28
      Memory[RW0_addr] <= RW0_wdata;	// ICache.scala:132:28
  end // always @(posedge)
  `ifndef SYNTHESIS	// ICache.scala:132:28
    `ifdef RANDOMIZE_MEM_INIT	// ICache.scala:132:28
      integer initvar;	// ICache.scala:132:28
      reg [63:0] _RANDOM_MEM;	// ICache.scala:132:28
    `endif // RANDOMIZE_MEM_INIT
    `ifdef RANDOMIZE_REG_INIT	// ICache.scala:132:28
      reg [31:0] _RANDOM;	// ICache.scala:132:28
    `endif // RANDOMIZE_REG_INIT
    initial begin	// ICache.scala:132:28
      `INIT_RANDOM_PROLOG_	// ICache.scala:132:28
      `ifdef RANDOMIZE_MEM_INIT	// ICache.scala:132:28
        for (initvar = 0; initvar < 512; initvar = initvar + 1) begin
          _RANDOM_MEM = {{`RANDOM}, {`RANDOM}};
          Memory[initvar] = _RANDOM_MEM[63:0];
        end	// ICache.scala:132:28
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// ICache.scala:132:28
        _RANDOM = {`RANDOM};	// ICache.scala:132:28
        _GEN = _RANDOM[8:0];	// ICache.scala:132:28
        _GEN_0 = _RANDOM[9];	// ICache.scala:132:28
        _GEN_1 = _RANDOM[10];	// ICache.scala:132:28
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? _GEN_2 : 64'bx;	// ICache.scala:132:28
endmodule

module ICache(
  input         clock,
                reset,
                io_req_valid,
  input  [38:0] io_req_bits_addr,
  input  [31:0] io_s1_paddr,
  input         io_s1_kill,
                io_s2_kill,
                io_resp_ready,
                io_invalidate,
                io_mem_0_a_ready,
                io_mem_0_b_valid,
  input  [2:0]  io_mem_0_b_bits_opcode,
  input  [1:0]  io_mem_0_b_bits_param,
  input  [3:0]  io_mem_0_b_bits_size,
  input         io_mem_0_b_bits_source,
  input  [31:0] io_mem_0_b_bits_address,
  input  [7:0]  io_mem_0_b_bits_mask,
  input  [63:0] io_mem_0_b_bits_data,
  input         io_mem_0_c_ready,
                io_mem_0_d_valid,
  input  [2:0]  io_mem_0_d_bits_opcode,
  input  [1:0]  io_mem_0_d_bits_param,
  input  [3:0]  io_mem_0_d_bits_size,
  input         io_mem_0_d_bits_source,
  input  [3:0]  io_mem_0_d_bits_sink,
  input  [2:0]  io_mem_0_d_bits_addr_lo,
  input  [63:0] io_mem_0_d_bits_data,
  input         io_mem_0_d_bits_error,
                io_mem_0_e_ready,
  output        io_resp_valid,
  output [15:0] io_resp_bits_data,
  output [63:0] io_resp_bits_datablock,
  output        io_mem_0_a_valid,
  output [2:0]  io_mem_0_a_bits_opcode,
                io_mem_0_a_bits_param,
  output [3:0]  io_mem_0_a_bits_size,
  output        io_mem_0_a_bits_source,
  output [31:0] io_mem_0_a_bits_address,
  output [7:0]  io_mem_0_a_bits_mask,
  output [63:0] io_mem_0_a_bits_data,
  output        io_mem_0_b_ready,
                io_mem_0_c_valid,
  output [2:0]  io_mem_0_c_bits_opcode,
                io_mem_0_c_bits_param,
  output [3:0]  io_mem_0_c_bits_size,
  output        io_mem_0_c_bits_source,
  output [31:0] io_mem_0_c_bits_address,
  output [63:0] io_mem_0_c_bits_data,
  output        io_mem_0_c_bits_error,
                io_mem_0_d_ready,
                io_mem_0_e_valid,
  output [3:0]  io_mem_0_e_bits_sink);

  wire         _T_626;	// ICache.scala:139:50
  wire [8:0]   _GEN;	// ICache.scala:136:63
  wire         _T_619;	// ICache.scala:133:30
  wire         _T_604;	// ICache.scala:139:50
  wire [8:0]   _GEN_0;	// ICache.scala:136:63
  wire         _T_597;	// ICache.scala:133:30
  wire         _T_582;	// ICache.scala:139:50
  wire [8:0]   _GEN_1;	// ICache.scala:136:63
  wire         _T_575;	// ICache.scala:133:30
  wire         _T_560;	// ICache.scala:139:50
  wire [8:0]   _T_623;	// ICache.scala:138:28
  wire [8:0]   _GEN_2;	// ICache.scala:136:63
  wire         _T_553;	// ICache.scala:133:30
  wire         _T_318;	// ICache.scala:101:84
  wire         _T_316;	// ICache.scala:101:84
  wire         _T_314;	// ICache.scala:101:84
  wire         _T_312;	// ICache.scala:101:84
  wire         _T_285;	// ICache.scala:98:83
  wire [5:0]   _T_282;	// ICache.scala:98:42
  wire [63:0]  __T_616_ext_RW0_rdata;	// ICache.scala:132:28
  wire [63:0]  __T_594_ext_RW0_rdata;	// ICache.scala:132:28
  wire [63:0]  __T_572_ext_RW0_rdata;	// ICache.scala:132:28
  wire [63:0]  __T_550_ext_RW0_rdata;	// ICache.scala:132:28
  wire [19:0]  _tag_array_3_ext_RW0_rdata;	// ICache.scala:97:25
  wire [19:0]  _tag_array_2_ext_RW0_rdata;	// ICache.scala:97:25
  wire [19:0]  _tag_array_1_ext_RW0_rdata;	// ICache.scala:97:25
  wire [19:0]  _tag_array_0_ext_RW0_rdata;	// ICache.scala:97:25
  reg  [1:0]   state;	// ICache.scala:67:18
  reg          invalidated;	// ICache.scala:68:24
  reg  [31:0]  refill_addr;	// ICache.scala:71:24
  reg          s1_valid;	// ICache.scala:74:21
  wire         _T_848 = state == 2'h0;	// ICache.scala:67:18, :75:52
  wire         out_valid = s1_valid & ~io_s1_kill & _T_848;	// ICache.scala:74:21, :75:{31,43,52}
  wire         _T_231 = out_valid & ~io_resp_ready;	// ICache.scala:69:15, :75:43, :81:67
  wire         s0_valid = io_req_valid & _T_848 & ~_T_231;	// ICache.scala:75:52, :81:{52,55,67}
  wire [22:0]  _T_238 = 23'hFF << io_mem_0_d_bits_size;	// package.scala:19:71
  wire [4:0]   _T_244 = io_mem_0_d_bits_opcode[0] ? ~(_T_238[7:3]) : 5'h0;	// Edges.scala:90:36, :199:14, Reg.scala:26:44, package.scala:19:{40,71,76}
  reg  [4:0]   _T_246;	// Reg.scala:26:44
  wire [4:0]   _T_250 = _T_246 - 5'h1;	// Edges.scala:208:28, Reg.scala:26:44
  wire         refill_done = (_T_246 == 5'h1 | _T_244 == 5'h0) & io_mem_0_d_valid;	// Edges.scala:199:14, :210:{25,37,47}, :211:22, Reg.scala:26:44
  wire [4:0]   refill_cnt = _T_244 & ~_T_250;	// Edges.scala:199:14, :208:28, :212:{25,27}
  reg  [15:0]  _T_262;	// LFSR.scala:22:19
  wire [5:0]   _GEN_3 = refill_done ? refill_addr[11:6] : _T_282;	// Edges.scala:211:22, ICache.scala:71:24, :90:31, :97:25, :98:42
  wire         _GEN_4 = _T_285 | refill_done;	// Edges.scala:211:22, ICache.scala:97:25, :98:83
  assign _T_282 = io_req_bits_addr[11:6];	// ICache.scala:98:42
  assign _T_285 = ~refill_done & s0_valid;	// Edges.scala:211:22, ICache.scala:81:52, :98:{70,83}
  assign _T_312 = ~(|(_T_262[1:0]));	// ICache.scala:95:56, :101:84, LFSR.scala:22:19
  assign _T_314 = _T_262[1:0] == 2'h1;	// ICache.scala:95:56, :101:84, :154:27, LFSR.scala:22:19
  assign _T_316 = _T_262[1:0] == 2'h2;	// ICache.scala:95:56, :101:84, LFSR.scala:22:19
  assign _T_318 = &(_T_262[1:0]);	// ICache.scala:95:56, :101:84, LFSR.scala:22:19
  reg  [255:0] vb_array;	// ICache.scala:104:21
  reg          s1_dout_valid;	// Reg.scala:14:44
  wire [255:0] _T_440 = vb_array >> io_s1_paddr[11:6];	// ICache.scala:76:27, :104:21, :122:43
  wire         _T_451 = _tag_array_0_ext_RW0_rdata == io_s1_paddr[31:12];	// ICache.scala:77:27, :97:25, :125:46
  reg          _T_453;	// Reg.scala:34:16
  wire         _T_455 = ~io_invalidate & _T_440[0] & (s1_dout_valid ? _T_451 : _T_453);	// ICache.scala:122:{17,43}, :125:46, :126:28, Package.scala:27:42, Reg.scala:14:44, :34:16
  wire [255:0] _T_466 = vb_array >> {250'h1, io_s1_paddr[11:6]};	// ICache.scala:76:27, :104:21, :122:43
  wire         _T_477 = _tag_array_1_ext_RW0_rdata == io_s1_paddr[31:12];	// ICache.scala:77:27, :97:25, :125:46
  reg          _T_479;	// Reg.scala:34:16
  wire         _T_481 = ~io_invalidate & _T_466[0] & (s1_dout_valid ? _T_477 : _T_479);	// ICache.scala:122:{17,43}, :125:46, :126:28, Package.scala:27:42, Reg.scala:14:44, :34:16
  wire [255:0] _T_492 = vb_array >> {250'h2, io_s1_paddr[11:6]};	// ICache.scala:76:27, :104:21, :122:43
  wire         _T_503 = _tag_array_2_ext_RW0_rdata == io_s1_paddr[31:12];	// ICache.scala:77:27, :97:25, :125:46
  reg          _T_505;	// Reg.scala:34:16
  wire         _T_507 = ~io_invalidate & _T_492[0] & (s1_dout_valid ? _T_503 : _T_505);	// ICache.scala:122:{17,43}, :125:46, :126:28, Package.scala:27:42, Reg.scala:14:44, :34:16
  wire [255:0] _T_518 = vb_array >> {250'h3, io_s1_paddr[11:6]};	// ICache.scala:76:27, :104:21, :122:43
  wire         _T_529 = _tag_array_3_ext_RW0_rdata == io_s1_paddr[31:12];	// ICache.scala:77:27, :97:25, :125:46
  reg          _T_531;	// Reg.scala:34:16
  wire         _T_533 = ~io_invalidate & _T_518[0] & (s1_dout_valid ? _T_529 : _T_531);	// ICache.scala:122:{17,43}, :125:46, :126:28, Package.scala:27:42, Reg.scala:14:44, :34:16
  wire         _T_541 = _T_455 | _T_481 | _T_507 | _T_533;	// ICache.scala:126:28, :129:44
  assign _T_553 = io_mem_0_d_valid & ~(|(_T_262[1:0]));	// ICache.scala:95:56, :101:84, :133:{30,42}, LFSR.scala:22:19
  wire [1:0]   _GEN_5 = refill_addr[7:6] | refill_cnt[4:3];	// Edges.scala:212:25, ICache.scala:71:24, :136:63
  assign _GEN_2 = {refill_addr[11:8], _GEN_5, refill_cnt[2:0]};	// Edges.scala:212:25, ICache.scala:71:24, :136:63
  assign _T_623 = io_req_bits_addr[11:3];	// ICache.scala:138:28
  assign _T_560 = ~_T_553 & s0_valid;	// ICache.scala:81:52, :133:30, :139:{45,50}
  reg  [63:0]  _T_568;	// Reg.scala:34:16
  assign _T_575 = io_mem_0_d_valid & _T_262[1:0] == 2'h1;	// ICache.scala:95:56, :133:{30,42}, :154:27, LFSR.scala:22:19
  assign _GEN_1 = {refill_addr[11:8], _GEN_5, refill_cnt[2:0]};	// Edges.scala:212:25, ICache.scala:71:24, :136:63
  assign _T_582 = ~_T_575 & s0_valid;	// ICache.scala:81:52, :133:30, :139:{45,50}
  reg  [63:0]  _T_590;	// Reg.scala:34:16
  assign _T_597 = io_mem_0_d_valid & _T_262[1:0] == 2'h2;	// ICache.scala:95:56, :101:84, :133:{30,42}, LFSR.scala:22:19
  assign _GEN_0 = {refill_addr[11:8], _GEN_5, refill_cnt[2:0]};	// Edges.scala:212:25, ICache.scala:71:24, :136:63
  assign _T_604 = ~_T_597 & s0_valid;	// ICache.scala:81:52, :133:30, :139:{45,50}
  reg  [63:0]  _T_612;	// Reg.scala:34:16
  assign _T_619 = io_mem_0_d_valid & (&(_T_262[1:0]));	// ICache.scala:95:56, :133:{30,42}, LFSR.scala:22:19
  assign _GEN = {refill_addr[11:8], _GEN_5, refill_cnt[2:0]};	// Edges.scala:212:25, ICache.scala:71:24, :136:63
  assign _T_626 = ~_T_619 & s0_valid;	// ICache.scala:81:52, :133:30, :139:{45,50}
  reg  [63:0]  _T_634;	// Reg.scala:34:16
  reg          _T_639;	// Reg.scala:26:44
  reg          _T_654_0;	// Reg.scala:34:16
  reg          _T_654_1;	// Reg.scala:34:16
  reg          _T_654_2;	// Reg.scala:34:16
  reg          _T_654_3;	// Reg.scala:34:16
  reg  [63:0]  _T_685_0;	// Reg.scala:34:16
  reg  [63:0]  _T_685_1;	// Reg.scala:34:16
  reg  [63:0]  _T_685_2;	// Reg.scala:34:16
  reg  [63:0]  _T_685_3;	// Reg.scala:34:16
  wire         _T_850 = state == 2'h1;	// ICache.scala:67:18, :154:27
  always @(posedge clock) begin
    automatic logic s1_miss;	// ICache.scala:79:27
    s1_miss = out_valid & ~_T_541;	// ICache.scala:75:43, :79:{27,30}, :129:44
    if (reset) begin
      state <= 2'h0;	// ICache.scala:67:18
      s1_valid <= 1'h0;	// ICache.scala:74:21, :114:20
      _T_246 <= 5'h0;	// Reg.scala:26:44
      _T_262 <= 16'h1;	// LFSR.scala:22:19
      vb_array <= 256'h0;	// ICache.scala:104:21
      _T_639 <= 1'h0;	// ICache.scala:114:20, Reg.scala:26:44
    end
    else begin
      if ((&state) & refill_done)	// Conditional.scala:29:{28,59}, Edges.scala:211:22, ICache.scala:67:18, :176:26
        state <= 2'h0;	// ICache.scala:67:18
      else if (state == 2'h2 & io_mem_0_d_valid)	// Conditional.scala:29:{28,59}, ICache.scala:67:18, :101:84, :173:29
        state <= 2'h3;	// ICache.scala:67:18, :101:84
      else begin	// Conditional.scala:29:59, ICache.scala:173:29
        automatic logic _GEN_6;	// Conditional.scala:29:59, ICache.scala:67:18, :165:22
        _GEN_6 = _T_848 & s1_miss;	// Conditional.scala:29:59, ICache.scala:67:18, :75:52, :79:27, :165:22
        if (_T_850) begin	// ICache.scala:154:27
          if (io_s2_kill)
            state <= 2'h0;	// ICache.scala:67:18
          else if (io_mem_0_a_ready)
            state <= 2'h2;	// ICache.scala:67:18, :101:84
          else if (_GEN_6)	// Conditional.scala:29:59, ICache.scala:67:18, :165:22
            state <= 2'h1;	// ICache.scala:67:18, :154:27
        end
        else if (_GEN_6)	// Conditional.scala:29:59, ICache.scala:67:18, :165:22
          state <= 2'h1;	// ICache.scala:67:18, :154:27
      end
      s1_valid <= s0_valid | _T_231;	// ICache.scala:74:21, :81:{52,67}, :84:24
      if (io_mem_0_d_valid) begin
        if (_T_246 == 5'h0) begin	// Edges.scala:209:25, Reg.scala:26:44
          if (io_mem_0_d_bits_opcode[0])	// Edges.scala:90:36
            _T_246 <= ~(_T_238[7:3]);	// Reg.scala:26:44, package.scala:19:{40,71,76}
          else	// Edges.scala:90:36
            _T_246 <= 5'h0;	// Reg.scala:26:44
        end
        else	// Edges.scala:209:25
          _T_246 <= _T_250;	// Edges.scala:208:28, Reg.scala:26:44
      end
      if (s1_miss)	// ICache.scala:79:27
        _T_262 <= {_T_262[0] ^ _T_262[2] ^ _T_262[3] ^ _T_262[5], _T_262[15:1]};	// Cat.scala:30:58, LFSR.scala:22:19, :23:{40,48,56,59,64,73}
      if (io_invalidate)
        vb_array <= 256'h0;	// ICache.scala:104:21
      else
        vb_array <= {256{refill_done & ~invalidated}} & 256'h1 << {248'h0, _T_262[1:0], refill_addr[11:6]} |
                                                                vb_array;	// Edges.scala:211:22, ICache.scala:68:24, :71:24, :90:31, :95:56, :104:21, :105:{21,24,38}, :106:{14,32}, LFSR.scala:22:19
      if (io_resp_ready)
        _T_639 <= out_valid & _T_541;	// ICache.scala:75:43, :78:26, :129:44, Reg.scala:26:44
    end
    invalidated <= ~_T_848 & (io_invalidate | invalidated);	// Conditional.scala:29:59, ICache.scala:68:24, :75:52, :108:24, :110:17, :166:19
    if (s1_miss & _T_848)	// ICache.scala:75:52, :79:27, :86:17
      refill_addr <= io_s1_paddr;	// ICache.scala:71:24
    s1_dout_valid <= s0_valid;	// ICache.scala:81:52, Reg.scala:14:44
    if (s1_dout_valid) begin	// Reg.scala:14:44
      _T_453 <= _T_451;	// ICache.scala:125:46, Reg.scala:34:16
      _T_479 <= _T_477;	// ICache.scala:125:46, Reg.scala:34:16
      _T_505 <= _T_503;	// ICache.scala:125:46, Reg.scala:34:16
      _T_531 <= _T_529;	// ICache.scala:125:46, Reg.scala:34:16
      _T_568 <= __T_550_ext_RW0_rdata;	// ICache.scala:132:28, Reg.scala:34:16
      _T_590 <= __T_572_ext_RW0_rdata;	// ICache.scala:132:28, Reg.scala:34:16
      _T_612 <= __T_594_ext_RW0_rdata;	// ICache.scala:132:28, Reg.scala:34:16
      _T_634 <= __T_616_ext_RW0_rdata;	// ICache.scala:132:28, Reg.scala:34:16
    end
    if (io_resp_ready) begin
      _T_654_0 <= _T_455;	// ICache.scala:126:28, Reg.scala:34:16
      _T_654_1 <= _T_481;	// ICache.scala:126:28, Reg.scala:34:16
      _T_654_2 <= _T_507;	// ICache.scala:126:28, Reg.scala:34:16
      _T_654_3 <= _T_533;	// ICache.scala:126:28, Reg.scala:34:16
      if (s1_dout_valid) begin	// Reg.scala:14:44
        _T_685_0 <= __T_550_ext_RW0_rdata;	// ICache.scala:132:28, Reg.scala:34:16
        _T_685_1 <= __T_572_ext_RW0_rdata;	// ICache.scala:132:28, Reg.scala:34:16
        _T_685_2 <= __T_594_ext_RW0_rdata;	// ICache.scala:132:28, Reg.scala:34:16
        _T_685_3 <= __T_616_ext_RW0_rdata;	// ICache.scala:132:28, Reg.scala:34:16
      end
      else begin	// Reg.scala:14:44
        _T_685_0 <= _T_568;	// Reg.scala:34:16
        _T_685_1 <= _T_590;	// Reg.scala:34:16
        _T_685_2 <= _T_612;	// Reg.scala:34:16
        _T_685_3 <= _T_634;	// Reg.scala:34:16
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      automatic logic [31:0] _RANDOM_11;
      automatic logic [31:0] _RANDOM_12;
      automatic logic [31:0] _RANDOM_13;
      automatic logic [31:0] _RANDOM_14;
      automatic logic [31:0] _RANDOM_15;
      automatic logic [31:0] _RANDOM_16;
      automatic logic [31:0] _RANDOM_17;
      automatic logic [31:0] _RANDOM_18;
      automatic logic [31:0] _RANDOM_19;
      automatic logic [31:0] _RANDOM_20;
      automatic logic [31:0] _RANDOM_21;
      automatic logic [31:0] _RANDOM_22;
      automatic logic [31:0] _RANDOM_23;
      automatic logic [31:0] _RANDOM_24;
      automatic logic [31:0] _RANDOM_25;
      automatic logic [31:0] _RANDOM_26;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        state = _RANDOM_0[1:0];	// ICache.scala:67:18
        invalidated = _RANDOM_0[2];	// ICache.scala:67:18, :68:24
        refill_addr = {_RANDOM_0[31:3], _RANDOM_1[2:0]};	// ICache.scala:67:18, :71:24
        s1_valid = _RANDOM_1[3];	// ICache.scala:71:24, :74:21
        _T_246 = _RANDOM_1[8:4];	// ICache.scala:71:24, Reg.scala:26:44
        _T_262 = _RANDOM_1[24:9];	// ICache.scala:71:24, LFSR.scala:22:19
        vb_array = {_RANDOM_1[31:25], _RANDOM_2, _RANDOM_3, _RANDOM_4, _RANDOM_5, _RANDOM_6, _RANDOM_7,
                                                                _RANDOM_8, _RANDOM_9[24:0]};	// ICache.scala:71:24, :104:21
        s1_dout_valid = _RANDOM_9[25];	// ICache.scala:104:21, Reg.scala:14:44
        _T_453 = _RANDOM_9[27];	// ICache.scala:104:21, Reg.scala:34:16
        _T_479 = _RANDOM_9[29];	// ICache.scala:104:21, Reg.scala:34:16
        _T_505 = _RANDOM_9[31];	// ICache.scala:104:21, Reg.scala:34:16
        _T_531 = _RANDOM_10[1];	// Reg.scala:34:16
        _T_568 = {_RANDOM_10[31:2], _RANDOM_11, _RANDOM_12[1:0]};	// Reg.scala:34:16
        _T_590 = {_RANDOM_12[31:2], _RANDOM_13, _RANDOM_14[1:0]};	// Reg.scala:34:16
        _T_612 = {_RANDOM_14[31:2], _RANDOM_15, _RANDOM_16[1:0]};	// Reg.scala:34:16
        _T_634 = {_RANDOM_16[31:2], _RANDOM_17, _RANDOM_18[1:0]};	// Reg.scala:34:16
        _T_639 = _RANDOM_18[2];	// Reg.scala:26:44, :34:16
        _T_654_0 = _RANDOM_18[3];	// Reg.scala:34:16
        _T_654_1 = _RANDOM_18[4];	// Reg.scala:34:16
        _T_654_2 = _RANDOM_18[5];	// Reg.scala:34:16
        _T_654_3 = _RANDOM_18[6];	// Reg.scala:34:16
        _T_685_0 = {_RANDOM_18[31:7], _RANDOM_19, _RANDOM_20[6:0]};	// Reg.scala:34:16
        _T_685_1 = {_RANDOM_20[31:7], _RANDOM_21, _RANDOM_22[6:0]};	// Reg.scala:34:16
        _T_685_2 = {_RANDOM_22[31:7], _RANDOM_23, _RANDOM_24[6:0]};	// Reg.scala:34:16
        _T_685_3 = {_RANDOM_24[31:7], _RANDOM_25, _RANDOM_26[6:0]};	// Reg.scala:34:16
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  tag_array_0_combMem tag_array_0_ext (	// ICache.scala:97:25
    .RW0_addr  (_GEN_3),	// ICache.scala:97:25
    .RW0_en    (_GEN_4),	// ICache.scala:97:25
    .RW0_clk   (clock),
    .RW0_wmode (refill_done & _T_312),	// Edges.scala:211:22, ICache.scala:97:25, :101:84
    .RW0_wdata (refill_addr[31:12]),	// ICache.scala:71:24, :89:31
    .RW0_rdata (_tag_array_0_ext_RW0_rdata)
  );
  tag_array_0_combMem tag_array_1_ext (	// ICache.scala:97:25
    .RW0_addr  (_GEN_3),	// ICache.scala:97:25
    .RW0_en    (_GEN_4),	// ICache.scala:97:25
    .RW0_clk   (clock),
    .RW0_wmode (refill_done & _T_314),	// Edges.scala:211:22, ICache.scala:97:25, :101:84
    .RW0_wdata (refill_addr[31:12]),	// ICache.scala:71:24, :89:31
    .RW0_rdata (_tag_array_1_ext_RW0_rdata)
  );
  tag_array_0_combMem tag_array_2_ext (	// ICache.scala:97:25
    .RW0_addr  (_GEN_3),	// ICache.scala:97:25
    .RW0_en    (_GEN_4),	// ICache.scala:97:25
    .RW0_clk   (clock),
    .RW0_wmode (refill_done & _T_316),	// Edges.scala:211:22, ICache.scala:97:25, :101:84
    .RW0_wdata (refill_addr[31:12]),	// ICache.scala:71:24, :89:31
    .RW0_rdata (_tag_array_2_ext_RW0_rdata)
  );
  tag_array_0_combMem tag_array_3_ext (	// ICache.scala:97:25
    .RW0_addr  (_GEN_3),	// ICache.scala:97:25
    .RW0_en    (_GEN_4),	// ICache.scala:97:25
    .RW0_clk   (clock),
    .RW0_wmode (refill_done & _T_318),	// Edges.scala:211:22, ICache.scala:97:25, :101:84
    .RW0_wdata (refill_addr[31:12]),	// ICache.scala:71:24, :89:31
    .RW0_rdata (_tag_array_3_ext_RW0_rdata)
  );
  _T_550_combMem _T_550_ext (	// ICache.scala:132:28
    .RW0_addr  (_T_553 ? _GEN_2 : _T_623),	// ICache.scala:132:28, :133:30, :136:63, :138:28
    .RW0_en    (_T_560 | _T_553),	// ICache.scala:132:28, :133:30, :139:50
    .RW0_clk   (clock),
    .RW0_wmode (_T_553),	// ICache.scala:133:30
    .RW0_wdata (io_mem_0_d_bits_data),
    .RW0_rdata (__T_550_ext_RW0_rdata)
  );
  _T_550_combMem _T_572_ext (	// ICache.scala:132:28
    .RW0_addr  (_T_575 ? _GEN_1 : _T_623),	// ICache.scala:132:28, :133:30, :136:63, :138:28
    .RW0_en    (_T_582 | _T_575),	// ICache.scala:132:28, :133:30, :139:50
    .RW0_clk   (clock),
    .RW0_wmode (_T_575),	// ICache.scala:133:30
    .RW0_wdata (io_mem_0_d_bits_data),
    .RW0_rdata (__T_572_ext_RW0_rdata)
  );
  _T_550_combMem _T_594_ext (	// ICache.scala:132:28
    .RW0_addr  (_T_597 ? _GEN_0 : _T_623),	// ICache.scala:132:28, :133:30, :136:63, :138:28
    .RW0_en    (_T_604 | _T_597),	// ICache.scala:132:28, :133:30, :139:50
    .RW0_clk   (clock),
    .RW0_wmode (_T_597),	// ICache.scala:133:30
    .RW0_wdata (io_mem_0_d_bits_data),
    .RW0_rdata (__T_594_ext_RW0_rdata)
  );
  _T_550_combMem _T_616_ext (	// ICache.scala:132:28
    .RW0_addr  (_T_619 ? _GEN : _T_623),	// ICache.scala:132:28, :133:30, :136:63, :138:28
    .RW0_en    (_T_626 | _T_619),	// ICache.scala:132:28, :133:30, :139:50
    .RW0_clk   (clock),
    .RW0_wmode (_T_619),	// ICache.scala:133:30
    .RW0_wdata (io_mem_0_d_bits_data),
    .RW0_rdata (__T_616_ext_RW0_rdata)
  );
  assign io_resp_valid = _T_639;	// Reg.scala:26:44
  assign io_resp_bits_data = 16'h0;
  assign io_resp_bits_datablock = (_T_654_0 ? _T_685_0 : 64'h0) | (_T_654_1 ? _T_685_1 : 64'h0) | (_T_654_2 ? _T_685_2 :
                64'h0) | (_T_654_3 ? _T_685_3 : 64'h0);	// Mux.scala:19:72, Reg.scala:34:16
  assign io_mem_0_a_valid = _T_850 & ~io_s2_kill;	// ICache.scala:154:{27,41,44}
  assign io_mem_0_a_bits_opcode = 3'h4;	// Edges.scala:343:15
  assign io_mem_0_a_bits_param = 3'h0;
  assign io_mem_0_a_bits_size = 4'h6;	// Edges.scala:345:15
  assign io_mem_0_a_bits_source = 1'h0;	// ICache.scala:114:20
  assign io_mem_0_a_bits_address = {refill_addr[31:6], 6'h0};	// ICache.scala:71:24, :157:{46,63}
  assign io_mem_0_a_bits_mask = 8'hFF;	// package.scala:19:64
  assign io_mem_0_a_bits_data = 64'h0;
  assign io_mem_0_b_ready = 1'h0;	// ICache.scala:114:20
  assign io_mem_0_c_valid = 1'h0;	// ICache.scala:114:20
  assign io_mem_0_c_bits_opcode = 3'h0;
  assign io_mem_0_c_bits_param = 3'h0;
  assign io_mem_0_c_bits_size = 4'h0;
  assign io_mem_0_c_bits_source = 1'h0;	// ICache.scala:114:20
  assign io_mem_0_c_bits_address = 32'h0;
  assign io_mem_0_c_bits_data = 64'h0;
  assign io_mem_0_c_bits_error = 1'h0;	// ICache.scala:114:20
  assign io_mem_0_d_ready = 1'h1;	// ICache.scala:129:52
  assign io_mem_0_e_valid = 1'h0;	// ICache.scala:114:20
  assign io_mem_0_e_bits_sink = 4'h0;
endmodule

