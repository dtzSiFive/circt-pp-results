// Generated by CIRCT 1.21.0g20221102_f4d481a
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_MEM_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifdef PRINTF_COND
  `define PRINTF_COND_ (`PRINTF_COND)
`else  // PRINTF_COND
  `define PRINTF_COND_ 1
`endif // PRINTF_COND

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifdef STOP_COND
  `define STOP_COND_ (`STOP_COND)
`else  // STOP_COND
  `define STOP_COND_ 1
`endif // STOP_COND

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// VCS coverage exclude_file
module _T_3331_combMem(	// Rocket.scala:682:23
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  output [63:0] R0_data,
                R1_data);

  reg  [63:0] Memory[0:30];	// Rocket.scala:682:23
  wire [63:0] _GEN;	// Rocket.scala:682:23
  /* synopsys infer_mux_override */
  assign _GEN = Memory[R0_addr] /* cadence map_to_mux */;	// Rocket.scala:682:23
  wire [63:0] _GEN_0;	// Rocket.scala:682:23
  /* synopsys infer_mux_override */
  assign _GEN_0 = Memory[R1_addr] /* cadence map_to_mux */;	// Rocket.scala:682:23
  always @(posedge W0_clk) begin	// Rocket.scala:682:23
    if (W0_en)	// Rocket.scala:682:23
      Memory[W0_addr] <= W0_data;	// Rocket.scala:682:23
  end // always @(posedge)
  `ifndef SYNTHESIS	// Rocket.scala:682:23
    `ifdef RANDOMIZE_MEM_INIT	// Rocket.scala:682:23
      integer initvar;	// Rocket.scala:682:23
      reg [63:0] _RANDOM_MEM;	// Rocket.scala:682:23
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// Rocket.scala:682:23
      `INIT_RANDOM_PROLOG_	// Rocket.scala:682:23
      `ifdef RANDOMIZE_MEM_INIT	// Rocket.scala:682:23
        for (initvar = 0; initvar < 31; initvar = initvar + 1) begin
          _RANDOM_MEM = {{`RANDOM}, {`RANDOM}};
          Memory[initvar] = _RANDOM_MEM[63:0];
        end	// Rocket.scala:682:23
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? _GEN : 64'bx;	// Rocket.scala:682:23
  assign R1_data = R1_en ? _GEN_0 : 64'bx;	// Rocket.scala:682:23
endmodule

module RocketCore(
  input         clock,
                reset,
                io_interrupts_debug,
                io_interrupts_mtip,
                io_interrupts_msip,
                io_interrupts_meip,
                io_interrupts_seip,
  input  [63:0] io_hartid,
  input         io_imem_resp_valid,
                io_imem_resp_bits_btb_valid,
                io_imem_resp_bits_btb_bits_taken,
  input  [1:0]  io_imem_resp_bits_btb_bits_mask,
  input         io_imem_resp_bits_btb_bits_bridx,
  input  [38:0] io_imem_resp_bits_btb_bits_target,
  input  [5:0]  io_imem_resp_bits_btb_bits_entry,
  input  [6:0]  io_imem_resp_bits_btb_bits_bht_history,
  input  [1:0]  io_imem_resp_bits_btb_bits_bht_value,
  input  [39:0] io_imem_resp_bits_pc,
  input  [31:0] io_imem_resp_bits_data,
  input  [1:0]  io_imem_resp_bits_mask,
  input         io_imem_resp_bits_xcpt_if,
                io_imem_resp_bits_replay,
  input  [39:0] io_imem_npc,
  input         io_imem_acquire,
                io_dmem_req_ready,
                io_dmem_s2_nack,
                io_dmem_acquire,
                io_dmem_release,
                io_dmem_resp_valid,
  input  [39:0] io_dmem_resp_bits_addr,
  input  [6:0]  io_dmem_resp_bits_tag,
  input  [4:0]  io_dmem_resp_bits_cmd,
  input  [2:0]  io_dmem_resp_bits_typ,
  input  [63:0] io_dmem_resp_bits_data,
  input         io_dmem_resp_bits_replay,
                io_dmem_resp_bits_has_data,
  input  [63:0] io_dmem_resp_bits_data_word_bypass,
                io_dmem_resp_bits_store_data,
  input         io_dmem_replay_next,
                io_dmem_xcpt_ma_ld,
                io_dmem_xcpt_ma_st,
                io_dmem_xcpt_pf_ld,
                io_dmem_xcpt_pf_st,
                io_dmem_ordered,
                io_fpu_fcsr_flags_valid,
  input  [4:0]  io_fpu_fcsr_flags_bits,
  input  [63:0] io_fpu_store_data,
                io_fpu_toint_data,
  input         io_fpu_fcsr_rdy,
                io_fpu_nack_mem,
                io_fpu_illegal_rm,
  input  [4:0]  io_fpu_dec_cmd,
  input         io_fpu_dec_ldst,
                io_fpu_dec_wen,
                io_fpu_dec_ren1,
                io_fpu_dec_ren2,
                io_fpu_dec_ren3,
                io_fpu_dec_swap12,
                io_fpu_dec_swap23,
                io_fpu_dec_single,
                io_fpu_dec_fromint,
                io_fpu_dec_toint,
                io_fpu_dec_fastpipe,
                io_fpu_dec_fma,
                io_fpu_dec_div,
                io_fpu_dec_sqrt,
                io_fpu_dec_wflags,
                io_fpu_sboard_set,
                io_fpu_sboard_clr,
  input  [4:0]  io_fpu_sboard_clra,
  input         io_rocc_cmd_ready,
                io_rocc_resp_valid,
  input  [4:0]  io_rocc_resp_bits_rd,
  input  [63:0] io_rocc_resp_bits_data,
  input         io_rocc_mem_req_valid,
  input  [39:0] io_rocc_mem_req_bits_addr,
  input  [6:0]  io_rocc_mem_req_bits_tag,
  input  [4:0]  io_rocc_mem_req_bits_cmd,
  input  [2:0]  io_rocc_mem_req_bits_typ,
  input         io_rocc_mem_req_bits_phys,
  input  [63:0] io_rocc_mem_req_bits_data,
  input         io_rocc_mem_s1_kill,
  input  [63:0] io_rocc_mem_s1_data,
  input         io_rocc_mem_invalidate_lr,
                io_rocc_busy,
                io_rocc_interrupt,
  output        io_imem_req_valid,
  output [39:0] io_imem_req_bits_pc,
  output        io_imem_req_bits_speculative,
                io_imem_resp_ready,
                io_imem_btb_update_valid,
                io_imem_btb_update_bits_prediction_valid,
                io_imem_btb_update_bits_prediction_bits_taken,
  output [1:0]  io_imem_btb_update_bits_prediction_bits_mask,
  output        io_imem_btb_update_bits_prediction_bits_bridx,
  output [38:0] io_imem_btb_update_bits_prediction_bits_target,
  output [5:0]  io_imem_btb_update_bits_prediction_bits_entry,
  output [6:0]  io_imem_btb_update_bits_prediction_bits_bht_history,
  output [1:0]  io_imem_btb_update_bits_prediction_bits_bht_value,
  output [38:0] io_imem_btb_update_bits_pc,
                io_imem_btb_update_bits_target,
  output        io_imem_btb_update_bits_taken,
                io_imem_btb_update_bits_isValid,
                io_imem_btb_update_bits_isJump,
                io_imem_btb_update_bits_isReturn,
  output [38:0] io_imem_btb_update_bits_br_pc,
  output        io_imem_bht_update_valid,
                io_imem_bht_update_bits_prediction_valid,
                io_imem_bht_update_bits_prediction_bits_taken,
  output [1:0]  io_imem_bht_update_bits_prediction_bits_mask,
  output        io_imem_bht_update_bits_prediction_bits_bridx,
  output [38:0] io_imem_bht_update_bits_prediction_bits_target,
  output [5:0]  io_imem_bht_update_bits_prediction_bits_entry,
  output [6:0]  io_imem_bht_update_bits_prediction_bits_bht_history,
  output [1:0]  io_imem_bht_update_bits_prediction_bits_bht_value,
  output [38:0] io_imem_bht_update_bits_pc,
  output        io_imem_bht_update_bits_taken,
                io_imem_bht_update_bits_mispredict,
                io_imem_ras_update_valid,
                io_imem_ras_update_bits_isCall,
                io_imem_ras_update_bits_isReturn,
  output [38:0] io_imem_ras_update_bits_returnAddr,
  output        io_imem_ras_update_bits_prediction_valid,
                io_imem_ras_update_bits_prediction_bits_taken,
  output [1:0]  io_imem_ras_update_bits_prediction_bits_mask,
  output        io_imem_ras_update_bits_prediction_bits_bridx,
  output [38:0] io_imem_ras_update_bits_prediction_bits_target,
  output [5:0]  io_imem_ras_update_bits_prediction_bits_entry,
  output [6:0]  io_imem_ras_update_bits_prediction_bits_bht_history,
  output [1:0]  io_imem_ras_update_bits_prediction_bits_bht_value,
  output        io_imem_flush_icache,
                io_imem_flush_tlb,
                io_dmem_req_valid,
  output [39:0] io_dmem_req_bits_addr,
  output [6:0]  io_dmem_req_bits_tag,
  output [4:0]  io_dmem_req_bits_cmd,
  output [2:0]  io_dmem_req_bits_typ,
  output        io_dmem_req_bits_phys,
  output [63:0] io_dmem_req_bits_data,
  output        io_dmem_s1_kill,
  output [63:0] io_dmem_s1_data,
  output        io_dmem_invalidate_lr,
  output [3:0]  io_ptw_ptbr_mode,
  output [15:0] io_ptw_ptbr_asid,
  output [43:0] io_ptw_ptbr_ppn,
  output        io_ptw_invalidate,
                io_ptw_status_debug,
  output [31:0] io_ptw_status_isa,
  output [1:0]  io_ptw_status_prv,
  output        io_ptw_status_sd,
  output [26:0] io_ptw_status_zero2,
  output [1:0]  io_ptw_status_sxl,
                io_ptw_status_uxl,
  output        io_ptw_status_sd_rv32,
  output [7:0]  io_ptw_status_zero1,
  output        io_ptw_status_tsr,
                io_ptw_status_tw,
                io_ptw_status_tvm,
                io_ptw_status_mxr,
                io_ptw_status_pum,
                io_ptw_status_mprv,
  output [1:0]  io_ptw_status_xs,
                io_ptw_status_fs,
                io_ptw_status_mpp,
                io_ptw_status_hpp,
  output        io_ptw_status_spp,
                io_ptw_status_mpie,
                io_ptw_status_hpie,
                io_ptw_status_spie,
                io_ptw_status_upie,
                io_ptw_status_mie,
                io_ptw_status_hie,
                io_ptw_status_sie,
                io_ptw_status_uie,
  output [31:0] io_fpu_inst,
  output [63:0] io_fpu_fromint_data,
  output [2:0]  io_fpu_fcsr_rm,
  output        io_fpu_dmem_resp_val,
  output [2:0]  io_fpu_dmem_resp_type,
  output [4:0]  io_fpu_dmem_resp_tag,
  output [63:0] io_fpu_dmem_resp_data,
  output        io_fpu_valid,
                io_fpu_killx,
                io_fpu_killm,
                io_rocc_cmd_valid,
  output [6:0]  io_rocc_cmd_bits_inst_funct,
  output [4:0]  io_rocc_cmd_bits_inst_rs2,
                io_rocc_cmd_bits_inst_rs1,
  output        io_rocc_cmd_bits_inst_xd,
                io_rocc_cmd_bits_inst_xs1,
                io_rocc_cmd_bits_inst_xs2,
  output [4:0]  io_rocc_cmd_bits_inst_rd,
  output [6:0]  io_rocc_cmd_bits_inst_opcode,
  output [63:0] io_rocc_cmd_bits_rs1,
                io_rocc_cmd_bits_rs2,
  output        io_rocc_cmd_bits_status_debug,
  output [31:0] io_rocc_cmd_bits_status_isa,
  output [1:0]  io_rocc_cmd_bits_status_prv,
  output        io_rocc_cmd_bits_status_sd,
  output [26:0] io_rocc_cmd_bits_status_zero2,
  output [1:0]  io_rocc_cmd_bits_status_sxl,
                io_rocc_cmd_bits_status_uxl,
  output        io_rocc_cmd_bits_status_sd_rv32,
  output [7:0]  io_rocc_cmd_bits_status_zero1,
  output        io_rocc_cmd_bits_status_tsr,
                io_rocc_cmd_bits_status_tw,
                io_rocc_cmd_bits_status_tvm,
                io_rocc_cmd_bits_status_mxr,
                io_rocc_cmd_bits_status_pum,
                io_rocc_cmd_bits_status_mprv,
  output [1:0]  io_rocc_cmd_bits_status_xs,
                io_rocc_cmd_bits_status_fs,
                io_rocc_cmd_bits_status_mpp,
                io_rocc_cmd_bits_status_hpp,
  output        io_rocc_cmd_bits_status_spp,
                io_rocc_cmd_bits_status_mpie,
                io_rocc_cmd_bits_status_hpie,
                io_rocc_cmd_bits_status_spie,
                io_rocc_cmd_bits_status_upie,
                io_rocc_cmd_bits_status_mie,
                io_rocc_cmd_bits_status_hie,
                io_rocc_cmd_bits_status_sie,
                io_rocc_cmd_bits_status_uie,
                io_rocc_resp_ready,
                io_rocc_mem_req_ready,
                io_rocc_mem_s2_nack,
                io_rocc_mem_acquire,
                io_rocc_mem_release,
                io_rocc_mem_resp_valid,
  output [39:0] io_rocc_mem_resp_bits_addr,
  output [6:0]  io_rocc_mem_resp_bits_tag,
  output [4:0]  io_rocc_mem_resp_bits_cmd,
  output [2:0]  io_rocc_mem_resp_bits_typ,
  output [63:0] io_rocc_mem_resp_bits_data,
  output        io_rocc_mem_resp_bits_replay,
                io_rocc_mem_resp_bits_has_data,
  output [63:0] io_rocc_mem_resp_bits_data_word_bypass,
                io_rocc_mem_resp_bits_store_data,
  output        io_rocc_mem_replay_next,
                io_rocc_mem_xcpt_ma_ld,
                io_rocc_mem_xcpt_ma_st,
                io_rocc_mem_xcpt_pf_ld,
                io_rocc_mem_xcpt_pf_st,
                io_rocc_mem_ordered,
                io_rocc_exception);

  wire             _T_4493;	// Rocket.scala:581:41
  wire             _GEN;	// Rocket.scala:429:21, :442:44, :443:23
  wire             _T_4175;	// Rocket.scala:420:38
  wire             _T_4052;	// Rocket.scala:351:32
  wire             _div_io_req_ready;	// Rocket.scala:268:19
  wire             _div_io_resp_valid;	// Rocket.scala:268:19
  wire [63:0]      _div_io_resp_bits_data;	// Rocket.scala:268:19
  wire [4:0]       _div_io_resp_bits_tag;	// Rocket.scala:268:19
  wire [63:0]      _alu_io_out;	// Rocket.scala:261:19
  wire [63:0]      _alu_io_adder_out;	// Rocket.scala:261:19
  wire             _bpu_io_xcpt_if;	// Rocket.scala:215:19
  wire             _bpu_io_xcpt_ld;	// Rocket.scala:215:19
  wire             _bpu_io_xcpt_st;	// Rocket.scala:215:19
  wire             _bpu_io_debug_if;	// Rocket.scala:215:19
  wire             _bpu_io_debug_ld;	// Rocket.scala:215:19
  wire             _bpu_io_debug_st;	// Rocket.scala:215:19
  wire [63:0]      _csr_io_rw_rdata;	// Rocket.scala:187:19
  wire             _csr_io_decode_fp_illegal;	// Rocket.scala:187:19
  wire             _csr_io_decode_read_illegal;	// Rocket.scala:187:19
  wire             _csr_io_decode_write_illegal;	// Rocket.scala:187:19
  wire             _csr_io_decode_write_flush;	// Rocket.scala:187:19
  wire             _csr_io_decode_system_illegal;	// Rocket.scala:187:19
  wire             _csr_io_csr_stall;	// Rocket.scala:187:19
  wire             _csr_io_eret;	// Rocket.scala:187:19
  wire             _csr_io_singleStep;	// Rocket.scala:187:19
  wire             _csr_io_status_debug;	// Rocket.scala:187:19
  wire [31:0]      _csr_io_status_isa;	// Rocket.scala:187:19
  wire [1:0]       _csr_io_status_prv;	// Rocket.scala:187:19
  wire             _csr_io_status_sd;	// Rocket.scala:187:19
  wire             _csr_io_status_tsr;	// Rocket.scala:187:19
  wire             _csr_io_status_tw;	// Rocket.scala:187:19
  wire             _csr_io_status_tvm;	// Rocket.scala:187:19
  wire             _csr_io_status_mxr;	// Rocket.scala:187:19
  wire             _csr_io_status_pum;	// Rocket.scala:187:19
  wire             _csr_io_status_mprv;	// Rocket.scala:187:19
  wire [1:0]       _csr_io_status_fs;	// Rocket.scala:187:19
  wire [1:0]       _csr_io_status_mpp;	// Rocket.scala:187:19
  wire             _csr_io_status_spp;	// Rocket.scala:187:19
  wire             _csr_io_status_mpie;	// Rocket.scala:187:19
  wire             _csr_io_status_spie;	// Rocket.scala:187:19
  wire             _csr_io_status_mie;	// Rocket.scala:187:19
  wire             _csr_io_status_sie;	// Rocket.scala:187:19
  wire [39:0]      _csr_io_evec;	// Rocket.scala:187:19
  wire             _csr_io_fatc;	// Rocket.scala:187:19
  wire [63:0]      _csr_io_time;	// Rocket.scala:187:19
  wire             _csr_io_interrupt;	// Rocket.scala:187:19
  wire [63:0]      _csr_io_interrupt_cause;	// Rocket.scala:187:19
  wire             _csr_io_bp_0_control_action;	// Rocket.scala:187:19
  wire [1:0]       _csr_io_bp_0_control_tmatch;	// Rocket.scala:187:19
  wire             _csr_io_bp_0_control_m;	// Rocket.scala:187:19
  wire             _csr_io_bp_0_control_s;	// Rocket.scala:187:19
  wire             _csr_io_bp_0_control_u;	// Rocket.scala:187:19
  wire             _csr_io_bp_0_control_x;	// Rocket.scala:187:19
  wire             _csr_io_bp_0_control_w;	// Rocket.scala:187:19
  wire             _csr_io_bp_0_control_r;	// Rocket.scala:187:19
  wire [38:0]      _csr_io_bp_0_address;	// Rocket.scala:187:19
  wire [63:0]      __T_3331_ext_R0_data;	// Rocket.scala:682:23
  wire [63:0]      __T_3331_ext_R1_data;	// Rocket.scala:682:23
  wire [39:0]      _ibuf_io_pc;	// Rocket.scala:165:20
  wire             _ibuf_io_btb_resp_taken;	// Rocket.scala:165:20
  wire [1:0]       _ibuf_io_btb_resp_mask;	// Rocket.scala:165:20
  wire             _ibuf_io_btb_resp_bridx;	// Rocket.scala:165:20
  wire [38:0]      _ibuf_io_btb_resp_target;	// Rocket.scala:165:20
  wire [5:0]       _ibuf_io_btb_resp_entry;	// Rocket.scala:165:20
  wire [6:0]       _ibuf_io_btb_resp_bht_history;	// Rocket.scala:165:20
  wire [1:0]       _ibuf_io_btb_resp_bht_value;	// Rocket.scala:165:20
  wire             _ibuf_io_inst_0_valid;	// Rocket.scala:165:20
  wire             _ibuf_io_inst_0_bits_pf0;	// Rocket.scala:165:20
  wire             _ibuf_io_inst_0_bits_pf1;	// Rocket.scala:165:20
  wire             _ibuf_io_inst_0_bits_replay;	// Rocket.scala:165:20
  wire             _ibuf_io_inst_0_bits_btb_hit;	// Rocket.scala:165:20
  wire             _ibuf_io_inst_0_bits_rvc;	// Rocket.scala:165:20
  wire [31:0]      _ibuf_io_inst_0_bits_inst_bits;	// Rocket.scala:165:20
  wire [4:0]       _ibuf_io_inst_0_bits_inst_rd;	// Rocket.scala:165:20
  wire [4:0]       _ibuf_io_inst_0_bits_inst_rs1;	// Rocket.scala:165:20
  wire [4:0]       _ibuf_io_inst_0_bits_inst_rs2;	// Rocket.scala:165:20
  wire [4:0]       _ibuf_io_inst_0_bits_inst_rs3;	// Rocket.scala:165:20
  wire [31:0]      _ibuf_io_inst_0_bits_raw;	// Rocket.scala:165:20
  reg              ex_ctrl_fp;	// Rocket.scala:115:20
  reg              ex_ctrl_branch;	// Rocket.scala:115:20
  reg              ex_ctrl_jal;	// Rocket.scala:115:20
  reg              ex_ctrl_jalr;	// Rocket.scala:115:20
  reg              ex_ctrl_rxs2;	// Rocket.scala:115:20
  reg  [1:0]       ex_ctrl_sel_alu2;	// Rocket.scala:115:20
  reg  [1:0]       ex_ctrl_sel_alu1;	// Rocket.scala:115:20
  reg  [2:0]       ex_ctrl_sel_imm;	// Rocket.scala:115:20
  reg              ex_ctrl_alu_dw;	// Rocket.scala:115:20
  reg  [3:0]       ex_ctrl_alu_fn;	// Rocket.scala:115:20
  reg              ex_ctrl_mem;	// Rocket.scala:115:20
  reg  [4:0]       ex_ctrl_mem_cmd;	// Rocket.scala:115:20
  reg  [2:0]       ex_ctrl_mem_type;	// Rocket.scala:115:20
  reg              ex_ctrl_wfd;	// Rocket.scala:115:20
  reg              ex_ctrl_div;	// Rocket.scala:115:20
  reg              ex_ctrl_wxd;	// Rocket.scala:115:20
  reg  [2:0]       ex_ctrl_csr;	// Rocket.scala:115:20
  reg              ex_ctrl_fence_i;	// Rocket.scala:115:20
  reg              mem_ctrl_fp;	// Rocket.scala:116:21
  reg              mem_ctrl_branch;	// Rocket.scala:116:21
  reg              mem_ctrl_jal;	// Rocket.scala:116:21
  reg              mem_ctrl_jalr;	// Rocket.scala:116:21
  reg              mem_ctrl_mem;	// Rocket.scala:116:21
  reg              mem_ctrl_wfd;	// Rocket.scala:116:21
  reg              mem_ctrl_div;	// Rocket.scala:116:21
  reg              mem_ctrl_wxd;	// Rocket.scala:116:21
  reg  [2:0]       mem_ctrl_csr;	// Rocket.scala:116:21
  reg              mem_ctrl_fence_i;	// Rocket.scala:116:21
  reg              wb_ctrl_mem;	// Rocket.scala:117:20
  reg              wb_ctrl_wfd;	// Rocket.scala:117:20
  reg              wb_ctrl_div;	// Rocket.scala:117:20
  reg              wb_ctrl_wxd;	// Rocket.scala:117:20
  reg  [2:0]       wb_ctrl_csr;	// Rocket.scala:117:20
  reg              wb_ctrl_fence_i;	// Rocket.scala:117:20
  reg              ex_reg_xcpt_interrupt;	// Rocket.scala:119:35
  reg              ex_reg_valid;	// Rocket.scala:120:35
  reg              ex_reg_rvc;	// Rocket.scala:121:35
  reg              ex_reg_btb_hit;	// Rocket.scala:122:35
  reg              ex_reg_btb_resp_taken;	// Rocket.scala:123:35
  reg  [1:0]       ex_reg_btb_resp_mask;	// Rocket.scala:123:35
  reg              ex_reg_btb_resp_bridx;	// Rocket.scala:123:35
  reg  [38:0]      ex_reg_btb_resp_target;	// Rocket.scala:123:35
  reg  [5:0]       ex_reg_btb_resp_entry;	// Rocket.scala:123:35
  reg  [6:0]       ex_reg_btb_resp_bht_history;	// Rocket.scala:123:35
  reg  [1:0]       ex_reg_btb_resp_bht_value;	// Rocket.scala:123:35
  reg              ex_reg_xcpt;	// Rocket.scala:124:35
  reg              ex_reg_flush_pipe;	// Rocket.scala:125:35
  reg              ex_reg_load_use;	// Rocket.scala:126:35
  reg  [63:0]      ex_cause;	// Rocket.scala:127:35
  reg              ex_reg_replay;	// Rocket.scala:128:26
  reg  [39:0]      ex_reg_pc;	// Rocket.scala:129:22
  reg  [31:0]      ex_reg_inst;	// Rocket.scala:130:24
  reg              mem_reg_xcpt_interrupt;	// Rocket.scala:132:36
  reg              mem_reg_valid;	// Rocket.scala:133:36
  reg              mem_reg_rvc;	// Rocket.scala:134:36
  reg              mem_reg_btb_hit;	// Rocket.scala:135:36
  reg              mem_reg_btb_resp_taken;	// Rocket.scala:136:36
  reg  [1:0]       mem_reg_btb_resp_mask;	// Rocket.scala:136:36
  reg              mem_reg_btb_resp_bridx;	// Rocket.scala:136:36
  reg  [38:0]      mem_reg_btb_resp_target;	// Rocket.scala:136:36
  reg  [5:0]       mem_reg_btb_resp_entry;	// Rocket.scala:136:36
  reg  [6:0]       mem_reg_btb_resp_bht_history;	// Rocket.scala:136:36
  reg  [1:0]       mem_reg_btb_resp_bht_value;	// Rocket.scala:136:36
  reg              mem_reg_xcpt;	// Rocket.scala:137:36
  reg              mem_reg_replay;	// Rocket.scala:138:36
  reg              mem_reg_flush_pipe;	// Rocket.scala:139:36
  reg  [63:0]      mem_reg_cause;	// Rocket.scala:140:36
  reg              mem_reg_slow_bypass;	// Rocket.scala:141:36
  reg              mem_reg_load;	// Rocket.scala:142:36
  reg              mem_reg_store;	// Rocket.scala:143:36
  reg  [39:0]      mem_reg_pc;	// Rocket.scala:144:23
  reg  [31:0]      mem_reg_inst;	// Rocket.scala:145:25
  reg  [63:0]      mem_reg_wdata;	// Rocket.scala:146:26
  reg  [63:0]      mem_reg_rs2;	// Rocket.scala:147:24
  reg              wb_reg_valid;	// Rocket.scala:150:35
  reg              wb_reg_xcpt;	// Rocket.scala:151:35
  reg              wb_reg_replay;	// Rocket.scala:152:35
  reg  [63:0]      wb_reg_cause;	// Rocket.scala:153:35
  reg  [39:0]      wb_reg_pc;	// Rocket.scala:154:22
  reg  [31:0]      wb_reg_inst;	// Rocket.scala:155:24
  reg  [63:0]      wb_reg_wdata;	// Rocket.scala:156:25
  wire             take_pc_mem_wb = _T_4175 | _T_4052;	// Rocket.scala:161:35, :351:32, :420:38
  wire [7:0]       _GEN_0 = {_ibuf_io_inst_0_bits_inst_bits[13], _ibuf_io_inst_0_bits_inst_bits[6:0]};	// Decode.scala:13:65, Rocket.scala:165:20
  wire             _T_2763 = _GEN_0 == 8'h3;	// Decode.scala:13:{65,121}
  wire             _T_2661 = {_ibuf_io_inst_0_bits_inst_bits[14:13], _ibuf_io_inst_0_bits_inst_bits[6],
                _ibuf_io_inst_0_bits_inst_bits[4:3], _ibuf_io_inst_0_bits_inst_bits[1:0]} == 7'h23;	// Decode.scala:13:{65,121}, Rocket.scala:165:20
  wire             _T_2669 = {_ibuf_io_inst_0_bits_inst_bits[28:27], _ibuf_io_inst_0_bits_inst_bits[14:13],
                _ibuf_io_inst_0_bits_inst_bits[6:0]} == 11'hAF;	// Decode.scala:13:{65,121}, Rocket.scala:165:20
  wire             _T_2693 = {_ibuf_io_inst_0_bits_inst_bits[31:29], _ibuf_io_inst_0_bits_inst_bits[27],
                _ibuf_io_inst_0_bits_inst_bits[14:13], _ibuf_io_inst_0_bits_inst_bits[6:0]} == 13'h2AF;	// Decode.scala:13:{65,121}, Rocket.scala:165:20
  wire             _T_2697 = {_ibuf_io_inst_0_bits_inst_bits[31:27], _ibuf_io_inst_0_bits_inst_bits[24:20],
                _ibuf_io_inst_0_bits_inst_bits[14:13], _ibuf_io_inst_0_bits_inst_bits[6:0]} == 19'h80AF;	// Decode.scala:13:{65,121}, Rocket.scala:165:20
  wire             _T_2814 = {_ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[4:2]} == 4'h1 |
                _ibuf_io_inst_0_bits_inst_bits[6:5] == 2'h2;	// Decode.scala:13:{65,121}, :14:30, Rocket.scala:165:20, :215:19
  wire [2:0]       _GEN_1 = {_ibuf_io_inst_0_bits_inst_bits[6:5], _ibuf_io_inst_0_bits_inst_bits[2]};	// Decode.scala:13:65, Rocket.scala:165:20
  wire [2:0]       _GEN_2 = {_ibuf_io_inst_0_bits_inst_bits[5:4], _ibuf_io_inst_0_bits_inst_bits[2]};	// Decode.scala:13:65, Rocket.scala:165:20
  wire             _T_2854 = _GEN_1 == 3'h2 | _GEN_2 == 3'h4 | {_ibuf_io_inst_0_bits_inst_bits[13],
                _ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[3]} == 3'h5 |
                {_ibuf_io_inst_0_bits_inst_bits[30], _ibuf_io_inst_0_bits_inst_bits[25],
                _ibuf_io_inst_0_bits_inst_bits[13:12], _ibuf_io_inst_0_bits_inst_bits[5],
                _ibuf_io_inst_0_bits_inst_bits[2]} == 6'h12;	// Decode.scala:13:{65,121}, :14:30, Rocket.scala:165:20, :704:24, :705:26, :715:22
  wire [1:0]       _GEN_3 = {_ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[2]};	// Decode.scala:13:65, Rocket.scala:165:20
  wire             _T_2876 = _GEN_3 == 2'h0;	// Decode.scala:13:{65,121}, Rocket.scala:215:19
  wire             _T_2880 = _T_2876 | {_ibuf_io_inst_0_bits_inst_bits[14], _ibuf_io_inst_0_bits_inst_bits[5],
                _ibuf_io_inst_0_bits_inst_bits[2]} == 3'h2 | _ibuf_io_inst_0_bits_inst_bits[5:3] == 3'h4 |
                {_ibuf_io_inst_0_bits_inst_bits[13], _ibuf_io_inst_0_bits_inst_bits[6],
                _ibuf_io_inst_0_bits_inst_bits[4]} == 3'h4 | {_ibuf_io_inst_0_bits_inst_bits[31],
                _ibuf_io_inst_0_bits_inst_bits[28], _ibuf_io_inst_0_bits_inst_bits[5:4],
                _ibuf_io_inst_0_bits_inst_bits[2]} == 5'h1A;	// Decode.scala:13:{65,121}, :14:30, Rocket.scala:165:20, :705:26, :715:22
  wire [1:0]       _GEN_4 = {_ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[4]};	// Decode.scala:13:65, Rocket.scala:165:20
  wire             _T_3102 = {_ibuf_io_inst_0_bits_inst_bits[14], _ibuf_io_inst_0_bits_inst_bits[6],
                _ibuf_io_inst_0_bits_inst_bits[4:0]} == 7'h3 | _T_2763 |
                {_ibuf_io_inst_0_bits_inst_bits[12], _ibuf_io_inst_0_bits_inst_bits[6:0]} == 8'h3 |
                {_ibuf_io_inst_0_bits_inst_bits[14:12], _ibuf_io_inst_0_bits_inst_bits[6:0]} == 10'h8F |
                _T_2661 | _T_2669 | _T_2693 | _T_2697;	// Decode.scala:13:{65,121}, :14:30, Rocket.scala:165:20
  wire [1:0]       _GEN_5 = {_ibuf_io_inst_0_bits_inst_bits[5], _ibuf_io_inst_0_bits_inst_bits[3]};	// Decode.scala:13:65, Rocket.scala:165:20
  wire             _T_3236 = {_ibuf_io_inst_0_bits_inst_bits[25], _ibuf_io_inst_0_bits_inst_bits[6:4],
                _ibuf_io_inst_0_bits_inst_bits[2]} == 5'h16;	// Decode.scala:13:{65,121}, Rocket.scala:165:20
  wire             _T_3272 = _GEN_1 == 3'h0 | _GEN_4 == 2'h1 | {_ibuf_io_inst_0_bits_inst_bits[13],
                _ibuf_io_inst_0_bits_inst_bits[5], _ibuf_io_inst_0_bits_inst_bits[2]} == 3'h3 | (&_GEN_5) |
                (&{_ibuf_io_inst_0_bits_inst_bits[12], _ibuf_io_inst_0_bits_inst_bits[5:4]}) |
                (&{_ibuf_io_inst_0_bits_inst_bits[13], _ibuf_io_inst_0_bits_inst_bits[5:4]}) |
                {_ibuf_io_inst_0_bits_inst_bits[31], _ibuf_io_inst_0_bits_inst_bits[28],
                _ibuf_io_inst_0_bits_inst_bits[4]} == 3'h5;	// Decode.scala:13:{65,121}, :14:30, Mux.scala:46:19, Rocket.scala:165:20, :704:24
  wire             _T_3290 = {_ibuf_io_inst_0_bits_inst_bits[13:12], _ibuf_io_inst_0_bits_inst_bits[6:4]} == 5'h7;	// Decode.scala:13:{65,121}, Rocket.scala:165:20, :331:40
  wire [2:0]       _T_3292 = {_T_3290, &{_ibuf_io_inst_0_bits_inst_bits[13], _ibuf_io_inst_0_bits_inst_bits[6:4]},
                &{_ibuf_io_inst_0_bits_inst_bits[12], _ibuf_io_inst_0_bits_inst_bits[6:4]}};	// Cat.scala:30:58, Decode.scala:13:{65,121}, Rocket.scala:165:20
  wire [4:0]       _GEN_6 = {_ibuf_io_inst_0_bits_inst_bits[13:12], _ibuf_io_inst_0_bits_inst_bits[6],
                _ibuf_io_inst_0_bits_inst_bits[4:3]};	// Decode.scala:13:65, Rocket.scala:165:20
  wire             _T_3298 = _GEN_6 == 5'h9;	// Decode.scala:13:{65,121}
  wire             _T_3310 = {_ibuf_io_inst_0_bits_inst_bits[14:13], _ibuf_io_inst_0_bits_inst_bits[6],
                _ibuf_io_inst_0_bits_inst_bits[3]} == 4'h5;	// Decode.scala:13:{65,121}, Rocket.scala:165:20
  reg              id_reg_fence;	// Rocket.scala:178:25
  wire             _T_3457 = _T_3292 == 3'h2;	// Cat.scala:30:58, Package.scala:7:47, Rocket.scala:705:26
  wire             _T_3458 = _T_3292 == 3'h3;	// Cat.scala:30:58, Package.scala:7:47, Rocket.scala:704:24
  wire             id_csr_en = _T_3457 | _T_3458 | _T_3292 == 3'h1;	// Cat.scala:30:58, Package.scala:7:{47,62}, Rocket.scala:709:23
  wire             id_mem_busy = ~io_dmem_ordered | _T_4493;	// Rocket.scala:207:{21,38}, :581:41
  wire             _T_4146 = mem_reg_valid & mem_ctrl_wxd;	// Rocket.scala:116:21, :133:36, :241:20
  wire             _T_4283 = ex_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs1;	// Rocket.scala:130:24, :165:20, :235:29, :243:82
  wire             _T_4311 = mem_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs1;	// Rocket.scala:145:25, :165:20, :236:31, :243:82
  wire             _T_4285 = ex_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs2;	// Rocket.scala:130:24, :165:20, :235:29, :243:82
  wire             _T_4313 = mem_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs2;	// Rocket.scala:145:25, :165:20, :236:31, :243:82
  reg              ex_reg_rs_bypass_0;	// Rocket.scala:247:29
  reg              ex_reg_rs_bypass_1;	// Rocket.scala:247:29
  reg  [1:0]       ex_reg_rs_lsb_0;	// Rocket.scala:248:26
  reg  [1:0]       ex_reg_rs_lsb_1;	// Rocket.scala:248:26
  reg  [61:0]      ex_reg_rs_msb_0;	// Rocket.scala:249:26
  reg  [61:0]      ex_reg_rs_msb_1;	// Rocket.scala:249:26
  wire [63:0]      _T_3605 = {ex_reg_rs_msb_0, ex_reg_rs_lsb_0};	// Cat.scala:30:58, Rocket.scala:248:26, :249:26
  wire [3:0][63:0] _GEN_7 = {{io_dmem_resp_bits_data_word_bypass}, {wb_reg_wdata}, {mem_reg_wdata}, {64'h0}};	// Rocket.scala:146:26, :156:25, :157:23, :251:14
  wire [63:0]      _GEN_8;	// Rocket.scala:251:14
  /* synopsys infer_mux_override */
  assign _GEN_8 = _GEN_7[ex_reg_rs_lsb_0] /* cadence map_to_mux */;	// Rocket.scala:248:26, :251:14
  wire [63:0]      ex_rs_0 = ex_reg_rs_bypass_0 ? _GEN_8 : _T_3605;	// Cat.scala:30:58, Rocket.scala:247:29, :251:14
  wire [63:0]      _T_3607 = {ex_reg_rs_msb_1, ex_reg_rs_lsb_1};	// Cat.scala:30:58, Rocket.scala:248:26, :249:26
  wire [63:0]      _GEN_9;	// Rocket.scala:251:14
  /* synopsys infer_mux_override */
  assign _GEN_9 = _GEN_7[ex_reg_rs_lsb_1] /* cadence map_to_mux */;	// Rocket.scala:248:26, :251:14
  wire [63:0]      ex_rs_1 = ex_reg_rs_bypass_1 ? _GEN_9 : _T_3607;	// Cat.scala:30:58, Rocket.scala:247:29, :251:14
  wire             _T_3675 = ex_ctrl_sel_imm == 3'h5;	// Rocket.scala:115:20, :704:24
  wire             _T_3613 = ~_T_3675 & ex_reg_inst[31];	// Rocket.scala:130:24, :704:{19,24,48}
  wire             _T_3653 = ex_ctrl_sel_imm == 3'h2;	// Rocket.scala:115:20, :705:26
  wire             _T_3658 = ex_ctrl_sel_imm == 3'h1;	// Rocket.scala:115:20, :709:23
  wire             _T_3669 = ex_ctrl_sel_imm == 3'h0;	// Rocket.scala:115:20, :712:24
  wire [39:0]      _T_3697 = ex_ctrl_sel_alu1 == 2'h2 ? ex_reg_pc : 40'h0;	// Mux.scala:46:{16,19}, Rocket.scala:115:20, :129:22, :215:19
  wire [31:0]      _T_3710 = (&ex_ctrl_sel_alu2) ? {_T_3613, _T_3653 ? ex_reg_inst[30:20] : {11{_T_3613}},
                ex_ctrl_sel_imm != 3'h2 & ex_ctrl_sel_imm != 3'h3 ? {8{_T_3613}} : ex_reg_inst[19:12],
                ~(_T_3653 | _T_3675) & (ex_ctrl_sel_imm == 3'h3 ? ex_reg_inst[20] : _T_3658 ?
                ex_reg_inst[7] : _T_3613), _T_3653 | _T_3675 ? 6'h0 : ex_reg_inst[30:25], _T_3653 ? 4'h0 :
                _T_3669 | _T_3658 ? ex_reg_inst[11:8] : _T_3675 ? ex_reg_inst[19:16] : ex_reg_inst[24:21],
                _T_3669 ? ex_reg_inst[7] : ex_ctrl_sel_imm == 3'h4 ? ex_reg_inst[20] : _T_3675 &
                ex_reg_inst[15]} : {28'h0, ex_ctrl_sel_alu2 == 2'h1 ? (ex_reg_rvc ? 4'h2 : 4'h4) : 4'h0};	// Cat.scala:30:58, Mux.scala:46:{16,19}, Rocket.scala:115:20, :121:35, :130:24, :259:19, :704:{19,24}, :705:{21,26,41}, :706:{21,26,36,43,65}, :707:{18,33}, :708:{18,23,39}, :709:{18,23,39}, :710:{20,35,66}, :711:19, :712:{19,24,34,57}, :713:{19,39,52}, :714:17, :715:{17,22}, :716:{17,37}
  wire             _T_3714 = ex_reg_valid & ex_ctrl_div;	// Rocket.scala:115:20, :120:35, :269:36
  wire             ex_pc_valid = ex_reg_valid | ex_reg_replay | ex_reg_xcpt_interrupt;	// Rocket.scala:119:35, :120:35, :128:26, :323:51
  wire             wb_dcache_miss = wb_ctrl_mem & ~io_dmem_resp_valid;	// Rocket.scala:117:20, :324:{36,39}
  wire             replay_ex = ex_reg_replay | ex_reg_valid & (ex_ctrl_mem & ~io_dmem_req_ready | ex_ctrl_div &
                ~_div_io_req_ready | wb_dcache_miss & ex_reg_load_use);	// Rocket.scala:115:20, :120:35, :126:35, :128:26, :268:19, :324:36, :325:{42,45}, :326:{42,45}, :327:43, :328:{33,50,75}
  wire             ctrl_killx = take_pc_mem_wb | replay_ex | ~ex_reg_valid;	// Rocket.scala:120:35, :161:35, :328:33, :329:{48,51}
  wire             _T_4045 = mem_ctrl_branch & mem_reg_wdata[0];	// Rocket.scala:116:21, :146:26, :338:35, :340:25
  wire [31:0]      _T_3998 = _T_4045 ? {{20{mem_reg_inst[31]}}, mem_reg_inst[7], mem_reg_inst[30:25],
                mem_reg_inst[11:8], 1'h0} : mem_ctrl_jal ? {{12{mem_reg_inst[31]}}, mem_reg_inst[19:12],
                mem_reg_inst[20], mem_reg_inst[30:21], 1'h0} : {28'h0, mem_reg_rvc ? 4'h2 : 4'h4};	// Cat.scala:30:58, Mux.scala:46:16, Rocket.scala:116:21, :134:36, :145:25, :259:19, :340:{8,25}, :341:8, :342:8, :597:32, :704:48, :706:65, :708:39, :709:39, :710:66, :712:57
  wire [39:0]      _T_4000 = mem_reg_pc + {{8{_T_3998[31]}}, _T_3998};	// Rocket.scala:144:23, :339:41, :340:8
  wire [39:0]      _T_4026 = mem_ctrl_jalr ? {mem_reg_wdata[63:38] == 26'h0 | mem_reg_wdata[63:38] == 26'h1 ?
                (|(mem_reg_wdata[39:38])) : (&(mem_reg_wdata[63:38])) | mem_reg_wdata[63:38] == 26'h3FFFFFE
                ? (&(mem_reg_wdata[39:38])) : mem_reg_wdata[38], mem_reg_wdata[38:0]} : _T_4000;	// Cat.scala:30:58, Rocket.scala:116:21, :146:26, :339:41, :343:21, :653:16, :654:15, :656:{10,13,25,30,45}, :657:{10,20,33,45,61,76}, :658:16
  wire [39:0]      _T_4028 = _T_4026 & 40'hFFFFFFFFFE;	// Rocket.scala:343:{21,111}
  wire             mem_misprediction = ex_pc_valid ? _T_4028 != ex_reg_pc : ~_ibuf_io_inst_0_valid | _T_4028 != _ibuf_io_pc;	// Rocket.scala:129:22, :165:20, :323:51, :343:111, :344:{26,48,66,98}
  wire             mem_npc_misaligned = ~(_csr_io_status_isa[2]) & _T_4026[1];	// Rocket.scala:187:19, :199:51, :343:21, :345:{28,56,66}
  wire             _T_4041 = ~mem_reg_xcpt & (mem_ctrl_jalr ^ mem_npc_misaligned);	// Rocket.scala:116:21, :137:36, :345:56, :346:{27,41,59}
  wire             mem_cfi = mem_ctrl_branch | mem_ctrl_jalr | mem_ctrl_jal;	// Rocket.scala:116:21, :347:50
  assign _T_4052 = mem_reg_valid & (mem_misprediction | mem_reg_flush_pipe);	// Rocket.scala:133:36, :139:36, :344:26, :351:{32,54}
  wire             mem_breakpoint = mem_reg_load & _bpu_io_xcpt_ld | mem_reg_store & _bpu_io_xcpt_st;	// Rocket.scala:142:36, :143:36, :215:19, :377:{38,57,75}
  wire             mem_debug_breakpoint = mem_reg_load & _bpu_io_debug_ld | mem_reg_store & _bpu_io_debug_st;	// Rocket.scala:142:36, :143:36, :215:19, :378:{44,64,82}
  wire             _T_4126 = mem_ctrl_mem & io_dmem_xcpt_ma_st;	// Rocket.scala:116:21, :383:19
  wire             _T_4128 = mem_ctrl_mem & io_dmem_xcpt_ma_ld;	// Rocket.scala:116:21, :384:19
  wire             _T_4130 = mem_ctrl_mem & io_dmem_xcpt_pf_st;	// Rocket.scala:116:21, :385:19
  wire             _T_4144 = mem_reg_xcpt_interrupt | mem_reg_xcpt;	// Rocket.scala:132:36, :137:36, :389:29
  wire             mem_xcpt = _T_4144 | mem_reg_valid & (mem_debug_breakpoint | mem_breakpoint | mem_npc_misaligned |
                _T_4126 | _T_4128 | _T_4130 | mem_ctrl_mem & io_dmem_xcpt_pf_ld);	// Rocket.scala:116:21, :133:36, :345:56, :377:57, :378:64, :383:19, :384:19, :385:19, :386:19, :389:29, :390:20, :645:26
  wire             dcache_kill_mem = _T_4146 & io_dmem_replay_next;	// Rocket.scala:241:20, :392:55
  wire             killm_common = dcache_kill_mem | _T_4175 | mem_reg_xcpt | ~mem_reg_valid;	// Rocket.scala:133:36, :137:36, :392:55, :395:{68,71}, :420:38
  reg              _T_4154;	// Rocket.scala:396:37
  wire             wb_wxd = wb_reg_valid & wb_ctrl_wxd;	// Rocket.scala:117:20, :150:35, :414:29
  wire             _T_4170 = wb_ctrl_div | wb_dcache_miss;	// Rocket.scala:117:20, :324:36, :415:35
  wire             replay_wb_common = io_dmem_s2_nack | wb_reg_replay;	// Rocket.scala:152:35, :416:42
  assign _T_4175 = replay_wb_common | wb_reg_xcpt | _csr_io_eret;	// Rocket.scala:151:35, :187:19, :416:42, :420:38
  wire             dmem_resp_valid = io_dmem_resp_valid & io_dmem_resp_bits_has_data;	// Rocket.scala:426:44
  wire             dmem_resp_replay = dmem_resp_valid & io_dmem_resp_bits_replay;	// Rocket.scala:426:44, :427:42
  wire             _T_4183 = dmem_resp_replay & ~(io_dmem_resp_bits_tag[0]);	// Rocket.scala:423:{23,45}, :427:42, :442:26
  assign _GEN = ~_T_4183 & ~wb_wxd;	// Rocket.scala:414:29, :429:{21,24}, :442:{26,44}, :443:23
  wire [4:0]       _GEN_10 = _T_4183 ? io_dmem_resp_bits_tag[5:1] : _div_io_resp_bits_tag;	// Rocket.scala:268:19, :425:46, :442:{26,44}, :446:14
  wire             _GEN_11 = _T_4183 | _GEN & _div_io_resp_valid;	// Decoupled.scala:30:37, Rocket.scala:268:19, :429:21, :442:{26,44}, :443:23, :447:12
  wire             wb_valid = wb_reg_valid & ~replay_wb_common & ~wb_reg_xcpt;	// Rocket.scala:150:35, :151:35, :416:42, :450:{34,45,48}
  wire             wb_wen = wb_valid & wb_ctrl_wxd;	// Rocket.scala:117:20, :450:45, :451:25
  wire             rf_wen = wb_wen | _GEN_11;	// Rocket.scala:442:44, :447:12, :451:25, :452:23
  wire [4:0]       rf_waddr = _GEN_11 ? _GEN_10 : wb_reg_inst[11:7];	// Rocket.scala:155:24, :237:29, :442:44, :446:14, :447:12, :453:21
  wire [63:0]      rf_wdata = dmem_resp_valid & ~(io_dmem_resp_bits_tag[0]) ? io_dmem_resp_bits_data : _GEN_11 ?
                _div_io_resp_bits_data : (|wb_ctrl_csr) ? _csr_io_rw_rdata : wb_reg_wdata;	// Rocket.scala:117:20, :156:25, :187:19, :268:19, :423:{23,45}, :426:44, :442:44, :447:12, :454:{21,38}, :455:21, :456:{21,34}
  wire [63:0]      _GEN_12 = rf_wen & (|rf_waddr) & rf_waddr == _ibuf_io_inst_0_bits_inst_rs1 ? rf_wdata :
                __T_3331_ext_R0_data;	// Rocket.scala:165:20, :452:23, :453:21, :454:21, :458:17, :682:23, :689:19, :694:{16,29}, :697:20
  wire [63:0]      _GEN_13 = rf_wen & (|rf_waddr) & rf_waddr == _ibuf_io_inst_0_bits_inst_rs2 ? rf_wdata :
                __T_3331_ext_R1_data;	// Rocket.scala:165:20, :452:23, :453:21, :454:21, :458:17, :682:23, :689:19, :694:{16,29}, :697:20
  wire             _T_4233 = _T_2880 & (|_ibuf_io_inst_0_bits_inst_rs1);	// Decode.scala:14:30, Rocket.scala:165:20, :479:{42,55}
  wire             _T_4236 = _T_2854 & (|_ibuf_io_inst_0_bits_inst_rs2);	// Decode.scala:14:30, Rocket.scala:165:20, :480:{42,55}
  wire             _T_4239 = _T_3272 & (|_ibuf_io_inst_0_bits_inst_rd);	// Decode.scala:14:30, Rocket.scala:165:20, :481:{42,55}
  reg  [31:0]      _T_4241;	// Rocket.scala:668:25
  wire [31:0]      _T_4243 = {_T_4241[31:1], 1'h0};	// Rocket.scala:597:32, :668:25, :669:{35,40}
  wire [31:0]      _GEN_14 = {27'h0, _ibuf_io_inst_0_bits_inst_rs1};	// Rocket.scala:165:20, :215:19, :665:35
  wire [31:0]      _T_4252 = _T_4243 >> _GEN_14;	// Rocket.scala:665:35, :669:40
  wire [31:0]      _GEN_15 = {27'h0, _ibuf_io_inst_0_bits_inst_rs2};	// Rocket.scala:165:20, :215:19, :665:35
  wire [31:0]      _T_4255 = _T_4243 >> _GEN_15;	// Rocket.scala:665:35, :669:40
  wire [31:0]      _GEN_16 = {27'h0, _ibuf_io_inst_0_bits_inst_rd};	// Rocket.scala:165:20, :215:19, :665:35
  wire [31:0]      _T_4258 = _T_4243 >> _GEN_16;	// Rocket.scala:665:35, :669:40
  wire             _T_4289 = _ibuf_io_inst_0_bits_inst_rd == ex_reg_inst[11:7];	// Rocket.scala:130:24, :165:20, :235:29, :494:70
  wire             _T_4317 = _ibuf_io_inst_0_bits_inst_rd == mem_reg_inst[11:7];	// Rocket.scala:145:25, :165:20, :236:31, :503:72
  wire             data_hazard_mem = mem_ctrl_wxd & (_T_4233 & _T_4311 | _T_4236 & _T_4313 | _T_4239 & _T_4317);	// Rocket.scala:116:21, :243:82, :479:42, :480:42, :481:42, :503:{38,72}, :648:{27,50}
  wire             _T_4334 = _ibuf_io_inst_0_bits_inst_rs1 == wb_reg_inst[11:7];	// Rocket.scala:155:24, :165:20, :237:29, :509:70
  wire             _T_4336 = _ibuf_io_inst_0_bits_inst_rs2 == wb_reg_inst[11:7];	// Rocket.scala:155:24, :165:20, :237:29, :509:70
  wire             _T_4340 = _ibuf_io_inst_0_bits_inst_rd == wb_reg_inst[11:7];	// Rocket.scala:155:24, :165:20, :237:29, :509:70
  reg  [31:0]      _T_4348;	// Rocket.scala:668:25
  wire [31:0]      _T_4377 = _T_4348 >> _GEN_14;	// Rocket.scala:665:35, :668:25
  wire [31:0]      _T_4380 = _T_4348 >> _GEN_15;	// Rocket.scala:665:35, :668:25
  wire [31:0]      _T_4383 = _T_4348 >> _ibuf_io_inst_0_bits_inst_rs3;	// Rocket.scala:165:20, :665:35, :668:25
  wire [31:0]      _T_4386 = _T_4348 >> _GEN_16;	// Rocket.scala:665:35, :668:25
  reg              dcache_blocked;	// Rocket.scala:522:27
  wire             ctrl_stalld = ex_reg_valid & (ex_ctrl_wxd & (_T_4233 & _T_4283 | _T_4236 & _T_4285 | _T_4239 & _T_4289) &
                ((|ex_ctrl_csr) | ex_ctrl_jalr | ex_ctrl_mem | ex_ctrl_div | ex_ctrl_fp) | ex_ctrl_wfd &
                (io_fpu_dec_ren1 & _T_4283 | io_fpu_dec_ren2 & _T_4285 | io_fpu_dec_ren3 &
                _ibuf_io_inst_0_bits_inst_rs3 == ex_reg_inst[11:7] | io_fpu_dec_wen & _T_4289)) |
                mem_reg_valid & (data_hazard_mem & ((|mem_ctrl_csr) | mem_ctrl_mem & mem_reg_slow_bypass |
                mem_ctrl_div | mem_ctrl_fp) | mem_ctrl_wfd & (io_fpu_dec_ren1 & _T_4311 | io_fpu_dec_ren2 &
                _T_4313 | io_fpu_dec_ren3 & _ibuf_io_inst_0_bits_inst_rs3 == mem_reg_inst[11:7] |
                io_fpu_dec_wen & _T_4317)) | wb_reg_valid & (wb_ctrl_wxd & (_T_4233 & _T_4334 | _T_4236 &
                _T_4336 | _T_4239 & _T_4340) & _T_4170 | wb_ctrl_wfd & (io_fpu_dec_ren1 & _T_4334 |
                io_fpu_dec_ren2 & _T_4336 | io_fpu_dec_ren3 & _ibuf_io_inst_0_bits_inst_rs3 ==
                wb_reg_inst[11:7] | io_fpu_dec_wen & _T_4340)) | _T_4233 & _T_4252[0] | _T_4236 &
                _T_4255[0] | _T_4239 & _T_4258[0] | _T_2814 & (id_csr_en & ~io_fpu_fcsr_rdy |
                io_fpu_dec_ren1 & _T_4377[0] | io_fpu_dec_ren2 & _T_4380[0] | io_fpu_dec_ren3 & _T_4383[0]
                | io_fpu_dec_wen & _T_4386[0]) | _T_3102 & dcache_blocked | _T_3236 & (~(_div_io_req_ready
                | _div_io_resp_valid & ~wb_wxd) | _T_3714) | id_mem_busy & (_T_3310 &
                _ibuf_io_inst_0_bits_inst_bits[26] | _T_3298 | id_reg_fence & _T_3102) | _csr_io_csr_stall;	// Decode.scala:13:121, :14:30, Package.scala:7:62, Rocket.scala:115:20, :116:21, :117:20, :120:35, :130:24, :133:36, :141:36, :145:25, :150:35, :155:24, :165:20, :178:25, :187:19, :204:29, :207:38, :213:{17,33,65,81}, :235:29, :236:31, :237:29, :243:82, :268:19, :269:36, :414:29, :415:35, :429:24, :479:42, :480:42, :481:42, :493:{38,94}, :494:70, :495:{39,76}, :496:{35,54,74}, :502:{40,66,100}, :503:{38,72}, :504:{41,78}, :505:{37,57,78}, :509:70, :510:{39,76}, :511:{35,54,71}, :519:{15,18,35}, :522:27, :529:16, :530:17, :532:{17,21,40,62,75}, :533:17, :648:{27,50}, :665:35
  wire             _T_4429 = ~_ibuf_io_inst_0_valid | _ibuf_io_inst_0_bits_replay | take_pc_mem_wb | ctrl_stalld |
                _csr_io_interrupt;	// Rocket.scala:161:35, :165:20, :187:19, :533:17, :535:{17,104}
  wire [39:0]      _T_4437 = wb_reg_xcpt | _csr_io_eret ? _csr_io_evec : replay_wb_common ? wb_reg_pc : _T_4028;	// Rocket.scala:151:35, :154:22, :187:19, :343:111, :416:42, :540:{8,17}, :541:8
  wire             _T_4464 = mem_ctrl_jal | mem_ctrl_jalr;	// Rocket.scala:116:21, :551:50
  wire             _T_4470 = mem_ctrl_jalr & {mem_reg_inst[19:18], mem_reg_inst[16:15]} == 4'h1;	// Decode.scala:13:121, Rocket.scala:116:21, :145:25, :552:{53,76}
  wire [38:0]      _GEN_17 = mem_reg_pc[38:0] + {37'h0, ~mem_reg_rvc, 1'h0};	// Rocket.scala:134:36, :144:23, :554:{69,74}, :597:32
  wire [38:0]      _T_4478 = ~_GEN_17 | 39'h3;	// Rocket.scala:554:69, :555:{35,66}
  assign _T_4493 = ex_reg_valid & ex_ctrl_mem;	// Rocket.scala:115:20, :120:35, :581:41
  wire             _T_4520 = killm_common | mem_breakpoint;	// Rocket.scala:377:57, :395:68, :591:35
  reg  [63:0]      _T_4581;	// Rocket.scala:639:42
  reg  [63:0]      _T_4582;	// Rocket.scala:639:33
  reg  [63:0]      _T_4584;	// Rocket.scala:640:42
  reg  [63:0]      _T_4585;	// Rocket.scala:640:33
  always @(posedge clock) begin
    automatic logic [14:0] _GEN_18 = {_ibuf_io_inst_0_bits_inst_bits[31], _ibuf_io_inst_0_bits_inst_bits[29:25],
                                _ibuf_io_inst_0_bits_inst_bits[14:12], _ibuf_io_inst_0_bits_inst_bits[6:4],
                                _ibuf_io_inst_0_bits_inst_bits[2:0]};	// Decode.scala:13:65, Rocket.scala:165:20
    automatic logic [17:0] _GEN_19 = {_ibuf_io_inst_0_bits_inst_bits[30:20], _ibuf_io_inst_0_bits_inst_bits[6:0]};	// Decode.scala:13:65, Rocket.scala:165:20
    automatic logic        id_bypass_src_0_0;	// Rocket.scala:689:45
    automatic logic        id_bypass_src_1_0;	// Rocket.scala:689:45
    automatic logic        id_csr_ren;	// Rocket.scala:190:54
    automatic logic        id_xcpt_if;	// Rocket.scala:221:45
    automatic logic        id_xcpt;	// Rocket.scala:645:26
    automatic logic        _T_3561;	// Rocket.scala:240:19
    automatic logic        _T_3565;	// Rocket.scala:241:36
    automatic logic        id_bypass_src_0_1;	// Rocket.scala:243:74
    automatic logic        id_bypass_src_0_2;	// Rocket.scala:243:74
    automatic logic        id_bypass_src_1_1;	// Rocket.scala:243:74
    automatic logic        id_bypass_src_1_2;	// Rocket.scala:243:74
    automatic logic        _T_3749;	// Rocket.scala:307:48
    automatic logic        _T_3759;	// Rocket.scala:311:23
    automatic logic        _T_3764;	// Rocket.scala:307:48
    automatic logic        _T_3774;	// Rocket.scala:311:23
    automatic logic        ex_xcpt;	// Rocket.scala:334:28
    automatic logic        fpu_kill_mem;	// Rocket.scala:393:51
    id_bypass_src_0_0 = _ibuf_io_inst_0_bits_inst_rs1 == 5'h0;	// Rocket.scala:165:20, :689:45
    id_bypass_src_1_0 = _ibuf_io_inst_0_bits_inst_rs2 == 5'h0;	// Rocket.scala:165:20, :689:45
    id_csr_ren = (_T_3457 | _T_3458) & id_bypass_src_0_0;	// Package.scala:7:{47,62}, Rocket.scala:190:54, :689:45
    id_xcpt_if = _ibuf_io_inst_0_bits_pf0 | _ibuf_io_inst_0_bits_pf1;	// Rocket.scala:165:20, :221:45
    id_xcpt = _csr_io_interrupt | _bpu_io_debug_if | _bpu_io_xcpt_if | id_xcpt_if | ~(_T_2763 |
                                {_ibuf_io_inst_0_bits_inst_bits[12], _ibuf_io_inst_0_bits_inst_bits[6:5],
                                _ibuf_io_inst_0_bits_inst_bits[3:0]} == 7'h3 | {_ibuf_io_inst_0_bits_inst_bits[14:13],
                                _ibuf_io_inst_0_bits_inst_bits[6:0]} == 9'hF | {_ibuf_io_inst_0_bits_inst_bits[14:12],
                                _ibuf_io_inst_0_bits_inst_bits[6:4], _ibuf_io_inst_0_bits_inst_bits[2:0]} == 9'hB |
                                {_ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[4:0]} == 6'h17 |
                                {_ibuf_io_inst_0_bits_inst_bits[31:26], _ibuf_io_inst_0_bits_inst_bits[6:0]} == 13'h33 |
                                _GEN_18 == 15'h1B | {_ibuf_io_inst_0_bits_inst_bits[26],
                                _ibuf_io_inst_0_bits_inst_bits[6:4], _ibuf_io_inst_0_bits_inst_bits[1:0]} == 6'h13 |
                                {_ibuf_io_inst_0_bits_inst_bits[31:29], _ibuf_io_inst_0_bits_inst_bits[26],
                                _ibuf_io_inst_0_bits_inst_bits[6:0]} == 11'h53 | {_ibuf_io_inst_0_bits_inst_bits[14:12],
                                _ibuf_io_inst_0_bits_inst_bits[6:3], _ibuf_io_inst_0_bits_inst_bits[1:0]} == 9'h33 |
                                _ibuf_io_inst_0_bits_inst_bits[6:0] == 7'h6F | {_ibuf_io_inst_0_bits_inst_bits[31:21],
                                _ibuf_io_inst_0_bits_inst_bits[19:0]} == 31'h73 | {_ibuf_io_inst_0_bits_inst_bits[31:26],
                                _ibuf_io_inst_0_bits_inst_bits[13:12], _ibuf_io_inst_0_bits_inst_bits[6],
                                _ibuf_io_inst_0_bits_inst_bits[4:0]} == 14'h53 | {_ibuf_io_inst_0_bits_inst_bits[31:25],
                                _ibuf_io_inst_0_bits_inst_bits[13:12], _ibuf_io_inst_0_bits_inst_bits[6],
                                _ibuf_io_inst_0_bits_inst_bits[4:0]} == 15'h5B | _T_2661 | _GEN_0 == 8'h93 | _T_2669 |
                                _GEN_0 == 8'hF3 | {_ibuf_io_inst_0_bits_inst_bits[31],
                                _ibuf_io_inst_0_bits_inst_bits[29:26], _ibuf_io_inst_0_bits_inst_bits[14:12],
                                _ibuf_io_inst_0_bits_inst_bits[6:0]} == 15'h293 | {_ibuf_io_inst_0_bits_inst_bits[31],
                                _ibuf_io_inst_0_bits_inst_bits[29:25], _ibuf_io_inst_0_bits_inst_bits[14:12],
                                _ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[4:0]} == 15'h15B |
                                _GEN_18 == 15'h15B | {_ibuf_io_inst_0_bits_inst_bits[31:25],
                                _ibuf_io_inst_0_bits_inst_bits[14], _ibuf_io_inst_0_bits_inst_bits[6:4],
                                _ibuf_io_inst_0_bits_inst_bits[2:0]} == 14'hDB | _T_2693 | _T_2697 |
                                {_ibuf_io_inst_0_bits_inst_bits[31:30], _ibuf_io_inst_0_bits_inst_bits[28:0]} ==
                                31'h10200073 | _ibuf_io_inst_0_bits_inst_bits == 32'h10500073 |
                                {_ibuf_io_inst_0_bits_inst_bits[31:25], _ibuf_io_inst_0_bits_inst_bits[14:0]} == 22'h48073
                                | {_ibuf_io_inst_0_bits_inst_bits[31:28], _ibuf_io_inst_0_bits_inst_bits[26],
                                _ibuf_io_inst_0_bits_inst_bits[14:13], _ibuf_io_inst_0_bits_inst_bits[6:0]} == 14'h853 |
                                {_ibuf_io_inst_0_bits_inst_bits[30:26], _ibuf_io_inst_0_bits_inst_bits[14:13],
                                _ibuf_io_inst_0_bits_inst_bits[6:0]} == 14'h1053 | {_ibuf_io_inst_0_bits_inst_bits[30:26],
                                _ibuf_io_inst_0_bits_inst_bits[14], _ibuf_io_inst_0_bits_inst_bits[12],
                                _ibuf_io_inst_0_bits_inst_bits[6:0]} == 14'h1053 | _GEN_19 == 18'h200D3 | _GEN_19 ==
                                18'h21053 | {_ibuf_io_inst_0_bits_inst_bits[31:26], _ibuf_io_inst_0_bits_inst_bits[24:20],
                                _ibuf_io_inst_0_bits_inst_bits[6:0]} == 18'h16053 | _ibuf_io_inst_0_bits_inst_bits ==
                                32'h7B200073 | {_ibuf_io_inst_0_bits_inst_bits[31:29],
                                _ibuf_io_inst_0_bits_inst_bits[27:26], _ibuf_io_inst_0_bits_inst_bits[24:22],
                                _ibuf_io_inst_0_bits_inst_bits[6:0]} == 15'h6053 | {_ibuf_io_inst_0_bits_inst_bits[31:26],
                                _ibuf_io_inst_0_bits_inst_bits[24:20], _ibuf_io_inst_0_bits_inst_bits[14:13],
                                _ibuf_io_inst_0_bits_inst_bits[6:0]} == 20'hE0053 | {_ibuf_io_inst_0_bits_inst_bits[31:29],
                                _ibuf_io_inst_0_bits_inst_bits[27:26], _ibuf_io_inst_0_bits_inst_bits[24:20],
                                _ibuf_io_inst_0_bits_inst_bits[14:12], _ibuf_io_inst_0_bits_inst_bits[6:0]} == 20'hE0053 |
                                {_ibuf_io_inst_0_bits_inst_bits[14:13], _ibuf_io_inst_0_bits_inst_bits[5:0]} == 8'h23 |
                                {_ibuf_io_inst_0_bits_inst_bits[13:12], _ibuf_io_inst_0_bits_inst_bits[6:5],
                                _ibuf_io_inst_0_bits_inst_bits[3:0]} == 8'h73 | {_ibuf_io_inst_0_bits_inst_bits[14],
                                _ibuf_io_inst_0_bits_inst_bits[6:0]} == 8'hE3 | {_ibuf_io_inst_0_bits_inst_bits[31:26],
                                _ibuf_io_inst_0_bits_inst_bits[14:12], _ibuf_io_inst_0_bits_inst_bits[6:4],
                                _ibuf_io_inst_0_bits_inst_bits[2:0]} == 15'h1B) | _T_3236 & ~(_csr_io_status_isa[12]) |
                                _T_3310 & ~(_csr_io_status_isa[0]) | _T_2814 & (_csr_io_decode_fp_illegal |
                                io_fpu_illegal_rm) | ({_ibuf_io_inst_0_bits_inst_bits[12],
                                _ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[4:2]} == 5'h11 |
                                {_ibuf_io_inst_0_bits_inst_bits[25], _ibuf_io_inst_0_bits_inst_bits[6:5]} == 3'h6 |
                                {_ibuf_io_inst_0_bits_inst_bits[31:30], _ibuf_io_inst_0_bits_inst_bits[28],
                                _ibuf_io_inst_0_bits_inst_bits[6:4]} == 6'h15) & ~(_csr_io_status_isa[3]) |
                                _ibuf_io_inst_0_bits_rvc & ~(_csr_io_status_isa[2]) | id_csr_en &
                                (_csr_io_decode_read_illegal | ~id_csr_ren & _csr_io_decode_write_illegal) | _T_3290 &
                                _csr_io_decode_system_illegal;	// Consts.scala:35:48, Decode.scala:13:{65,121}, :14:30, Package.scala:7:62, Rocket.scala:165:20, :187:19, :190:54, :192:54, :194:25, :195:{17,20,38}, :196:{17,20,38}, :197:{16,45}, :198:{16,19,37}, :199:{30,33,51}, :201:{15,46,61}, :202:20, :215:19, :221:45, :645:26
    _T_3561 = ex_reg_valid & ex_ctrl_wxd;	// Rocket.scala:115:20, :120:35, :240:19
    _T_3565 = _T_4146 & ~mem_ctrl_mem;	// Rocket.scala:116:21, :241:{20,36,39}
    id_bypass_src_0_1 = _T_3561 & _T_4283;	// Rocket.scala:240:19, :243:{74,82}
    id_bypass_src_0_2 = _T_3565 & _T_4311;	// Rocket.scala:241:36, :243:{74,82}
    id_bypass_src_1_1 = _T_3561 & _T_4285;	// Rocket.scala:240:19, :243:{74,82}
    id_bypass_src_1_2 = _T_3565 & _T_4313;	// Rocket.scala:241:36, :243:{74,82}
    _T_3749 = id_bypass_src_0_0 | id_bypass_src_0_1 | id_bypass_src_0_2 | _T_4146 & _T_4311;	// Rocket.scala:241:20, :243:{74,82}, :307:48, :689:45
    _T_3759 = _T_2880 & ~_T_3749;	// Decode.scala:14:30, Rocket.scala:307:48, :311:{23,26}
    _T_3764 = id_bypass_src_1_0 | id_bypass_src_1_1 | id_bypass_src_1_2 | _T_4146 & _T_4313;	// Rocket.scala:241:20, :243:{74,82}, :307:48, :689:45
    _T_3774 = _T_2854 & ~_T_3764;	// Decode.scala:14:30, Rocket.scala:307:48, :311:{23,26}
    ex_xcpt = ex_reg_xcpt_interrupt | ex_reg_xcpt;	// Rocket.scala:119:35, :124:35, :334:28
    fpu_kill_mem = mem_reg_valid & mem_ctrl_fp & io_fpu_nack_mem;	// Rocket.scala:116:21, :133:36, :393:51
    if (_T_4429) begin	// Rocket.scala:535:104
    end
    else begin	// Rocket.scala:535:104
      automatic logic       _T_2833 = {_ibuf_io_inst_0_bits_inst_bits[13], _ibuf_io_inst_0_bits_inst_bits[5:2]} == 5'h9;	// Decode.scala:13:{65,121}, Rocket.scala:165:20
      automatic logic       _T_2967 = _ibuf_io_inst_0_bits_inst_bits[4:3] == 2'h1;	// Decode.scala:13:{65,121}, Mux.scala:46:19, Rocket.scala:165:20
      automatic logic [1:0] _GEN_20 = {_ibuf_io_inst_0_bits_inst_bits[4], _ibuf_io_inst_0_bits_inst_bits[2]};	// Decode.scala:13:65, Rocket.scala:165:20
      automatic logic       _T_3148 = {_ibuf_io_inst_0_bits_inst_bits[13], _ibuf_io_inst_0_bits_inst_bits[3]} == 2'h1;	// Decode.scala:13:{65,121}, Mux.scala:46:19, Rocket.scala:165:20
      automatic logic       _T_3739;	// Rocket.scala:293:58
      automatic logic       _T_3744 = _T_2833 & _csr_io_status_debug;	// Decode.scala:13:121, Rocket.scala:187:19, :301:24
      _T_3739 = ~_bpu_io_xcpt_if & ~_ibuf_io_inst_0_bits_pf0 & _ibuf_io_inst_0_bits_pf1;	// Rocket.scala:165:20, :215:19, :293:{13,32,58}
      ex_ctrl_fp <= _T_2814;	// Decode.scala:14:30, Rocket.scala:115:20
      ex_ctrl_branch <= {_ibuf_io_inst_0_bits_inst_bits[6:4], _ibuf_io_inst_0_bits_inst_bits[2]} == 4'hC;	// Decode.scala:13:{65,121}, Rocket.scala:115:20, :165:20
      ex_ctrl_jal <= &{_ibuf_io_inst_0_bits_inst_bits[6:5], _ibuf_io_inst_0_bits_inst_bits[3]};	// Decode.scala:13:{65,121}, Rocket.scala:115:20, :165:20
      ex_ctrl_jalr <= _T_2833;	// Decode.scala:13:121, Rocket.scala:115:20
      ex_ctrl_rxs2 <= _T_2854;	// Decode.scala:14:30, Rocket.scala:115:20
      if (id_xcpt) begin	// Rocket.scala:645:26
        ex_ctrl_sel_alu2 <= {1'h0, _T_3739};	// Rocket.scala:115:20, :292:24, :293:{58,87}, :294:26, :597:32
        ex_ctrl_sel_alu1 <= 2'h2;	// Rocket.scala:115:20, :215:19
        ex_ctrl_alu_fn <= 4'h0;	// Rocket.scala:115:20, :711:19
      end
      else begin	// Rocket.scala:645:26
        automatic logic [1:0] _GEN_21 = {_ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[3]};	// Decode.scala:13:65, Rocket.scala:165:20
        automatic logic       _T_2914 = _ibuf_io_inst_0_bits_inst_bits[4:3] == 2'h0;	// Decode.scala:13:{65,121}, Rocket.scala:165:20, :215:19
        automatic logic [4:0] _GEN_22 = {_ibuf_io_inst_0_bits_inst_bits[13:12], _ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4], _ibuf_io_inst_0_bits_inst_bits[2]};	// Decode.scala:13:65, Rocket.scala:165:20
        automatic logic [4:0] _GEN_23 = {_ibuf_io_inst_0_bits_inst_bits[14:13], _ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4], _ibuf_io_inst_0_bits_inst_bits[2]};	// Decode.scala:13:65, Rocket.scala:165:20
        automatic logic       _T_3033 = {_ibuf_io_inst_0_bits_inst_bits[30], _ibuf_io_inst_0_bits_inst_bits[13:12],
                                                                _ibuf_io_inst_0_bits_inst_bits[5:4], _ibuf_io_inst_0_bits_inst_bits[2]} == 6'h26;	// Decode.scala:13:{65,121}, Rocket.scala:165:20
        automatic logic       _T_3060 = {_ibuf_io_inst_0_bits_inst_bits[14], _ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4:3]} == 4'hC;	// Decode.scala:13:{65,121}, Rocket.scala:165:20
        ex_ctrl_sel_alu2 <= {_GEN_21 == 2'h0 | _T_2876 | _T_2914 | {_ibuf_io_inst_0_bits_inst_bits[14],
                                                                _ibuf_io_inst_0_bits_inst_bits[3]} == 2'h2, {_ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4:3]} == 3'h0 | ~(_ibuf_io_inst_0_bits_inst_bits[5]) |
                                                                _ibuf_io_inst_0_bits_inst_bits[3:2] == 2'h1 | (&_GEN_21) |
                                                                (&{_ibuf_io_inst_0_bits_inst_bits[14], _ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4]})};	// Cat.scala:30:58, Decode.scala:13:{65,121}, :14:30, Mux.scala:46:19, Rocket.scala:115:20, :165:20, :215:19
        ex_ctrl_sel_alu1 <= {_GEN_2 == 3'h3 | (&_GEN_21), {_ibuf_io_inst_0_bits_inst_bits[14],
                                                                _ibuf_io_inst_0_bits_inst_bits[2]} == 2'h0 | _GEN_4 == 2'h0 | _T_2876 |
                                                                {_ibuf_io_inst_0_bits_inst_bits[5], _ibuf_io_inst_0_bits_inst_bits[2]} == 2'h0 | _T_2914};	// Cat.scala:30:58, Decode.scala:13:{65,121}, :14:30, Rocket.scala:115:20, :165:20, :215:19, :704:24
        ex_ctrl_alu_fn <= {_GEN_23 == 5'hA | _T_3060 | _T_3033 | {_ibuf_io_inst_0_bits_inst_bits[30],
                                                                _ibuf_io_inst_0_bits_inst_bits[13:12], _ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4], _ibuf_io_inst_0_bits_inst_bits[2]} == 6'h2A,
                                                                {_ibuf_io_inst_0_bits_inst_bits[13], _ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4], _ibuf_io_inst_0_bits_inst_bits[2]} == 4'hA |
                                                                {_ibuf_io_inst_0_bits_inst_bits[30], _ibuf_io_inst_0_bits_inst_bits[14],
                                                                _ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[4],
                                                                _ibuf_io_inst_0_bits_inst_bits[2]} == 5'hA | {_ibuf_io_inst_0_bits_inst_bits[14],
                                                                _ibuf_io_inst_0_bits_inst_bits[12], _ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4], _ibuf_io_inst_0_bits_inst_bits[2]} == 5'h12 | _T_3060,
                                                                {_ibuf_io_inst_0_bits_inst_bits[14], _ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4], _ibuf_io_inst_0_bits_inst_bits[2]} == 4'h4 |
                                                                {_ibuf_io_inst_0_bits_inst_bits[13], _ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4:3]} == 4'hC | _GEN_22 == 5'h1A | _GEN_23 == 5'h1A |
                                                                _T_3033 | {_ibuf_io_inst_0_bits_inst_bits[30], _ibuf_io_inst_0_bits_inst_bits[12],
                                                                _ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[4],
                                                                _ibuf_io_inst_0_bits_inst_bits[2]} == 5'h1A, _GEN_22 == 5'hA |
                                                                {_ibuf_io_inst_0_bits_inst_bits[12], _ibuf_io_inst_0_bits_inst_bits[6],
                                                                _ibuf_io_inst_0_bits_inst_bits[4:3]} == 4'hC | {_ibuf_io_inst_0_bits_inst_bits[14:12],
                                                                _ibuf_io_inst_0_bits_inst_bits[6], _ibuf_io_inst_0_bits_inst_bits[2]} == 5'h1C};	// Cat.scala:30:58, Decode.scala:13:{65,121}, :14:30, Rocket.scala:115:20, :165:20, :259:19
      end
      ex_ctrl_sel_imm <= {_ibuf_io_inst_0_bits_inst_bits[5:4] == 2'h0 | {_ibuf_io_inst_0_bits_inst_bits[13],
                                                _ibuf_io_inst_0_bits_inst_bits[4:2]} == 4'h1 | _GEN_20 == 2'h2, _T_2967 | (&_GEN_20),
                                                _T_2967 | _GEN_3 == 2'h2};	// Cat.scala:30:58, Decode.scala:13:{65,121}, :14:30, Rocket.scala:115:20, :165:20, :215:19
      ex_ctrl_alu_dw <= id_xcpt | ~(_ibuf_io_inst_0_bits_inst_bits[4]) | ~(_ibuf_io_inst_0_bits_inst_bits[3]);	// Decode.scala:13:{65,121}, Rocket.scala:115:20, :165:20, :285:13, :288:20, :290:22, :645:26
      ex_ctrl_mem <= _T_3102;	// Decode.scala:14:30, Rocket.scala:115:20
      ex_ctrl_mem_cmd <= {1'h0, {_ibuf_io_inst_0_bits_inst_bits[28:27], _ibuf_io_inst_0_bits_inst_bits[13],
                                                _ibuf_io_inst_0_bits_inst_bits[3]} == 4'h3, _T_3148 |
                                                (&{_ibuf_io_inst_0_bits_inst_bits[27], _ibuf_io_inst_0_bits_inst_bits[3]}) |
                                                (&{_ibuf_io_inst_0_bits_inst_bits[28], _ibuf_io_inst_0_bits_inst_bits[3]}) |
                                                (&{_ibuf_io_inst_0_bits_inst_bits[31], _ibuf_io_inst_0_bits_inst_bits[3]}),
                                                (&{_ibuf_io_inst_0_bits_inst_bits[28], _ibuf_io_inst_0_bits_inst_bits[13],
                                                _ibuf_io_inst_0_bits_inst_bits[3]}) | (&{_ibuf_io_inst_0_bits_inst_bits[30],
                                                _ibuf_io_inst_0_bits_inst_bits[13], _ibuf_io_inst_0_bits_inst_bits[3]}), _T_3148 | _GEN_5
                                                == 2'h2 | (&{_ibuf_io_inst_0_bits_inst_bits[28:27], _ibuf_io_inst_0_bits_inst_bits[5]}) |
                                                (&{_ibuf_io_inst_0_bits_inst_bits[29], _ibuf_io_inst_0_bits_inst_bits[5]})};	// Cat.scala:30:58, Decode.scala:13:{65,121}, :14:30, Rocket.scala:115:20, :165:20, :215:19, :597:32
      ex_ctrl_mem_type <= _ibuf_io_inst_0_bits_inst_bits[14:12];	// Cat.scala:30:58, Rocket.scala:115:20, :165:20
      ex_ctrl_wfd <= _ibuf_io_inst_0_bits_inst_bits[5:2] == 4'h1 | {_ibuf_io_inst_0_bits_inst_bits[31],
                                                _ibuf_io_inst_0_bits_inst_bits[6:5]} == 3'h2 | _ibuf_io_inst_0_bits_inst_bits[6:4] == 3'h4
                                                | {_ibuf_io_inst_0_bits_inst_bits[28], _ibuf_io_inst_0_bits_inst_bits[6:5]} == 3'h6;	// Consts.scala:35:48, Decode.scala:13:{65,121}, :14:30, Rocket.scala:115:20, :165:20, :705:26, :715:22
      ex_ctrl_div <= _T_3236;	// Decode.scala:13:121, Rocket.scala:115:20
      ex_ctrl_wxd <= _T_3272;	// Decode.scala:14:30, Rocket.scala:115:20
      if (id_csr_ren)	// Rocket.scala:190:54
        ex_ctrl_csr <= 3'h5;	// Rocket.scala:115:20, :704:24
      else	// Rocket.scala:190:54
        ex_ctrl_csr <= _T_3292;	// Cat.scala:30:58, Rocket.scala:115:20
      ex_ctrl_fence_i <= _T_3744 | _T_3298;	// Decode.scala:13:121, Rocket.scala:115:20, :285:13, :301:{24,48}, :303:23
      ex_reg_rvc <= id_xcpt & _T_3739 | _ibuf_io_inst_0_bits_rvc;	// Rocket.scala:121:35, :165:20, :286:16, :288:20, :293:{58,87}, :645:26
      ex_reg_flush_pipe <= _T_3744 | _T_3298 | _T_3290 | id_csr_en & ~id_csr_ren & _csr_io_decode_write_flush |
                                                _csr_io_singleStep;	// Decode.scala:13:121, Package.scala:7:62, Rocket.scala:125:35, :187:19, :190:54, :192:{54,66}, :298:23, :301:{24,48}, :302:25
      ex_reg_load_use <= mem_reg_valid & data_hazard_mem & mem_ctrl_mem;	// Rocket.scala:116:21, :126:35, :133:36, :503:38, :506:51
      ex_reg_rs_bypass_0 <= _T_3749;	// Rocket.scala:247:29, :307:48
      ex_reg_rs_bypass_1 <= _T_3764;	// Rocket.scala:247:29, :307:48
      if (_T_3759)	// Rocket.scala:311:23
        ex_reg_rs_lsb_0 <= _GEN_12[1:0];	// Rocket.scala:248:26, :312:37, :458:17, :689:19, :694:29
      else if (id_bypass_src_0_0)	// Rocket.scala:689:45
        ex_reg_rs_lsb_0 <= 2'h0;	// Rocket.scala:215:19, :248:26
      else if (id_bypass_src_0_1)	// Rocket.scala:243:74
        ex_reg_rs_lsb_0 <= 2'h1;	// Mux.scala:46:19, Rocket.scala:248:26
      else	// Rocket.scala:243:74
        ex_reg_rs_lsb_0 <= {1'h1, ~id_bypass_src_0_2};	// Mux.scala:31:69, Rocket.scala:243:74, :248:26, :657:20
      if (_T_3774)	// Rocket.scala:311:23
        ex_reg_rs_lsb_1 <= _GEN_13[1:0];	// Rocket.scala:248:26, :312:37, :458:17, :689:19, :694:29
      else if (id_bypass_src_1_0)	// Rocket.scala:689:45
        ex_reg_rs_lsb_1 <= 2'h0;	// Rocket.scala:215:19, :248:26
      else if (id_bypass_src_1_1)	// Rocket.scala:243:74
        ex_reg_rs_lsb_1 <= 2'h1;	// Mux.scala:46:19, Rocket.scala:248:26
      else	// Rocket.scala:243:74
        ex_reg_rs_lsb_1 <= {1'h1, ~id_bypass_src_1_2};	// Mux.scala:31:69, Rocket.scala:243:74, :248:26, :657:20
    end
    if (ex_pc_valid) begin	// Rocket.scala:323:51
      automatic logic _T_4081;	// Rocket.scala:331:40
      automatic logic _T_4085;	// Consts.scala:33:40
      _T_4081 = ex_ctrl_mem_cmd == 5'h7;	// Rocket.scala:115:20, :331:40
      _T_4085 = ex_ctrl_mem_cmd == 5'h4;	// Consts.scala:33:40, Rocket.scala:115:20
      mem_ctrl_fp <= ex_ctrl_fp;	// Rocket.scala:115:20, :116:21
      mem_ctrl_branch <= ex_ctrl_branch;	// Rocket.scala:115:20, :116:21
      mem_ctrl_jal <= ex_ctrl_jal;	// Rocket.scala:115:20, :116:21
      mem_ctrl_jalr <= ex_ctrl_jalr;	// Rocket.scala:115:20, :116:21
      mem_ctrl_mem <= ex_ctrl_mem;	// Rocket.scala:115:20, :116:21
      mem_ctrl_wfd <= ex_ctrl_wfd;	// Rocket.scala:115:20, :116:21
      mem_ctrl_div <= ex_ctrl_div;	// Rocket.scala:115:20, :116:21
      mem_ctrl_wxd <= ex_ctrl_wxd;	// Rocket.scala:115:20, :116:21
      mem_ctrl_csr <= ex_ctrl_csr;	// Rocket.scala:115:20, :116:21
      mem_ctrl_fence_i <= ex_ctrl_fence_i;	// Rocket.scala:115:20, :116:21
      mem_reg_rvc <= ex_reg_rvc;	// Rocket.scala:121:35, :134:36
      mem_reg_btb_hit <= ex_reg_btb_hit;	// Rocket.scala:122:35, :135:36
      mem_reg_flush_pipe <= ex_reg_flush_pipe;	// Rocket.scala:125:35, :139:36
      mem_reg_slow_bypass <= _T_4081 | ex_ctrl_mem_type == 3'h0 | ex_ctrl_mem_type == 3'h4 | ex_ctrl_mem_type == 3'h1 |
                                                ex_ctrl_mem_type == 3'h5;	// Rocket.scala:115:20, :141:36, :331:{40,50,91}, :704:24, :709:23, :715:22
      mem_reg_load <= ex_ctrl_mem & (ex_ctrl_mem_cmd == 5'h0 | ex_ctrl_mem_cmd == 5'h6 | _T_4081 |
                                                ex_ctrl_mem_cmd[3] | _T_4085);	// Consts.scala:33:{29,40}, :35:{31,48,75}, Rocket.scala:115:20, :142:36, :331:40, :362:33
      mem_reg_store <= ex_ctrl_mem & (ex_ctrl_mem_cmd == 5'h1 | _T_4081 | ex_ctrl_mem_cmd[3] | _T_4085);	// Consts.scala:33:{29,40}, :36:{32,59}, Rocket.scala:115:20, :143:36, :331:40, :363:34
      mem_reg_pc <= ex_reg_pc;	// Rocket.scala:129:22, :144:23
      mem_reg_inst <= ex_reg_inst;	// Rocket.scala:130:24, :145:25
      mem_reg_wdata <= _alu_io_out;	// Rocket.scala:146:26, :261:19
    end
    if (mem_reg_valid | mem_reg_replay | mem_reg_xcpt_interrupt) begin	// Rocket.scala:132:36, :133:36, :138:36, :337:54
      wb_ctrl_mem <= mem_ctrl_mem;	// Rocket.scala:116:21, :117:20
      wb_ctrl_wfd <= mem_ctrl_wfd;	// Rocket.scala:116:21, :117:20
      wb_ctrl_div <= mem_ctrl_div;	// Rocket.scala:116:21, :117:20
      wb_ctrl_wxd <= mem_ctrl_wxd;	// Rocket.scala:116:21, :117:20
      wb_ctrl_csr <= mem_ctrl_csr;	// Rocket.scala:116:21, :117:20
      wb_ctrl_fence_i <= mem_ctrl_fence_i;	// Rocket.scala:116:21, :117:20
      wb_reg_pc <= mem_reg_pc;	// Rocket.scala:144:23, :154:22
      wb_reg_inst <= mem_reg_inst;	// Rocket.scala:145:25, :155:24
      if (~mem_reg_xcpt & mem_ctrl_fp & mem_ctrl_wxd)	// Rocket.scala:116:21, :137:36, :346:27, :406:54
        wb_reg_wdata <= io_fpu_toint_data;	// Rocket.scala:156:25
      else if (_T_4041)	// Rocket.scala:346:41
        wb_reg_wdata <= {{24{_T_4000[39]}}, _T_4000};	// Rocket.scala:156:25, :339:41, :346:26
      else	// Rocket.scala:346:41
        wb_reg_wdata <= mem_reg_wdata;	// Rocket.scala:146:26, :156:25
    end
    ex_reg_xcpt_interrupt <= ~take_pc_mem_wb & _ibuf_io_inst_0_valid & _csr_io_interrupt;	// Rocket.scala:119:35, :161:35, :165:20, :187:19, :277:20, :279:62
    ex_reg_valid <= ~_T_4429;	// Rocket.scala:120:35, :185:34, :535:104
    ex_reg_btb_hit <= _ibuf_io_inst_0_bits_btb_hit;	// Rocket.scala:122:35, :165:20
    if (_ibuf_io_inst_0_bits_btb_hit) begin	// Rocket.scala:165:20
      ex_reg_btb_resp_taken <= _ibuf_io_btb_resp_taken;	// Rocket.scala:123:35, :165:20
      ex_reg_btb_resp_mask <= _ibuf_io_btb_resp_mask;	// Rocket.scala:123:35, :165:20
      ex_reg_btb_resp_bridx <= _ibuf_io_btb_resp_bridx;	// Rocket.scala:123:35, :165:20
      ex_reg_btb_resp_target <= _ibuf_io_btb_resp_target;	// Rocket.scala:123:35, :165:20
      ex_reg_btb_resp_entry <= _ibuf_io_btb_resp_entry;	// Rocket.scala:123:35, :165:20
      ex_reg_btb_resp_bht_history <= _ibuf_io_btb_resp_bht_history;	// Rocket.scala:123:35, :165:20
      ex_reg_btb_resp_bht_value <= _ibuf_io_btb_resp_bht_value;	// Rocket.scala:123:35, :165:20
    end
    ex_reg_xcpt <= ~_T_4429 & id_xcpt;	// Rocket.scala:124:35, :185:34, :278:30, :535:104, :645:26
    if (id_xcpt) begin	// Rocket.scala:645:26
      if (_csr_io_interrupt)	// Rocket.scala:187:19
        ex_cause <= _csr_io_interrupt_cause;	// Rocket.scala:127:35, :187:19
      else	// Rocket.scala:187:19
        ex_cause <= {60'h0, _bpu_io_debug_if ? 4'hD : {2'h0, _bpu_io_xcpt_if ? 2'h3 : id_xcpt_if ? 2'h1 :
                                                                2'h2}};	// Mux.scala:31:69, :46:19, Rocket.scala:127:35, :215:19, :221:45
    end
    ex_reg_replay <= ~take_pc_mem_wb & _ibuf_io_inst_0_valid & _ibuf_io_inst_0_bits_replay;	// Rocket.scala:128:26, :161:35, :165:20, :277:{20,54}
    if (~_T_4429 | _csr_io_interrupt | _ibuf_io_inst_0_bits_replay) begin	// Rocket.scala:165:20, :185:34, :187:19, :317:41, :535:104
      ex_reg_pc <= _ibuf_io_pc;	// Rocket.scala:129:22, :165:20
      ex_reg_inst <= _ibuf_io_inst_0_bits_inst_bits;	// Rocket.scala:130:24, :165:20
    end
    mem_reg_xcpt_interrupt <= ~take_pc_mem_wb & ex_reg_xcpt_interrupt;	// Rocket.scala:119:35, :132:36, :161:35, :354:21, :356:45
    mem_reg_valid <= ~ctrl_killx;	// Rocket.scala:133:36, :329:48, :353:20
    if (ex_pc_valid & ex_reg_btb_hit) begin	// Rocket.scala:122:35, :136:36, :323:51, :359:22, :365:27
      mem_reg_btb_resp_taken <= ex_reg_btb_resp_taken;	// Rocket.scala:123:35, :136:36
      mem_reg_btb_resp_mask <= ex_reg_btb_resp_mask;	// Rocket.scala:123:35, :136:36
      mem_reg_btb_resp_bridx <= ex_reg_btb_resp_bridx;	// Rocket.scala:123:35, :136:36
      mem_reg_btb_resp_target <= ex_reg_btb_resp_target;	// Rocket.scala:123:35, :136:36
      mem_reg_btb_resp_entry <= ex_reg_btb_resp_entry;	// Rocket.scala:123:35, :136:36
      mem_reg_btb_resp_bht_history <= ex_reg_btb_resp_bht_history;	// Rocket.scala:123:35, :136:36
      mem_reg_btb_resp_bht_value <= ex_reg_btb_resp_bht_value;	// Rocket.scala:123:35, :136:36
    end
    mem_reg_xcpt <= ~ctrl_killx & ex_xcpt;	// Rocket.scala:137:36, :329:48, :334:28, :353:20, :355:31
    mem_reg_replay <= ~take_pc_mem_wb & replay_ex;	// Rocket.scala:138:36, :161:35, :328:33, :354:{21,37}
    if (ex_xcpt)	// Rocket.scala:334:28
      mem_reg_cause <= ex_cause;	// Rocket.scala:127:35, :140:36
    if (ex_pc_valid & ex_ctrl_rxs2 & ex_ctrl_mem) begin	// Rocket.scala:115:20, :147:24, :323:51, :359:22, :372:58
      if (ex_reg_rs_bypass_1)	// Rocket.scala:247:29
        mem_reg_rs2 <= _GEN_9;	// Rocket.scala:147:24, :251:14
      else	// Rocket.scala:247:29
        mem_reg_rs2 <= _T_3607;	// Cat.scala:30:58, Rocket.scala:147:24
    end
    wb_reg_valid <= ~(killm_common | mem_xcpt | fpu_kill_mem);	// Rocket.scala:150:35, :393:51, :395:68, :397:45, :400:19, :645:26
    wb_reg_xcpt <= mem_xcpt & ~_T_4175;	// Rocket.scala:151:35, :401:34, :402:27, :420:38, :645:26
    wb_reg_replay <= (dcache_kill_mem | mem_reg_replay | fpu_kill_mem) & ~_T_4175;	// Rocket.scala:138:36, :152:35, :392:55, :393:51, :394:55, :401:{31,34}, :420:38
    if (mem_xcpt) begin	// Rocket.scala:645:26
      if (_T_4144)	// Rocket.scala:389:29
        wb_reg_cause <= mem_reg_cause;	// Rocket.scala:140:36, :153:35
      else	// Rocket.scala:389:29
        wb_reg_cause <= {60'h0, mem_debug_breakpoint ? 4'hD : {1'h0, mem_breakpoint ? 3'h3 : mem_npc_misaligned ?
                                                                3'h0 : _T_4126 ? 3'h6 : _T_4128 ? 3'h4 : {1'h1, _T_4130, 1'h1}}};	// Consts.scala:35:48, Mux.scala:31:69, Rocket.scala:153:35, :345:56, :377:57, :378:64, :383:19, :384:19, :385:19, :597:32, :657:20, :704:24, :715:22
    end
    if (_T_4429 | ~_T_3759) begin	// Rocket.scala:249:26, :284:22, :311:{23,38}, :535:104
    end
    else	// Rocket.scala:249:26, :284:22, :311:38
      ex_reg_rs_msb_0 <= _GEN_12[63:2];	// Rocket.scala:249:26, :313:38, :458:17, :689:19, :694:29
    if (_T_4429 | ~_T_3774) begin	// Rocket.scala:249:26, :284:22, :311:{23,38}, :535:104
    end
    else	// Rocket.scala:249:26, :284:22, :311:38
      ex_reg_rs_msb_1 <= _GEN_13[63:2];	// Rocket.scala:249:26, :313:38, :458:17, :689:19, :694:29
    _T_4154 <= _div_io_req_ready & _T_3714;	// Decoupled.scala:30:37, Rocket.scala:268:19, :269:36, :396:37
    dcache_blocked <= ~io_dmem_req_ready & (_T_4493 | dcache_blocked);	// Rocket.scala:325:45, :522:27, :523:{40,62}, :581:41
    if (ex_reg_rs_bypass_0)	// Rocket.scala:247:29
      _T_4581 <= _GEN_8;	// Rocket.scala:251:14, :639:42
    else	// Rocket.scala:247:29
      _T_4581 <= _T_3605;	// Cat.scala:30:58, Rocket.scala:639:42
    _T_4582 <= _T_4581;	// Rocket.scala:639:{33,42}
    if (ex_reg_rs_bypass_1)	// Rocket.scala:247:29
      _T_4584 <= _GEN_9;	// Rocket.scala:251:14, :640:42
    else	// Rocket.scala:247:29
      _T_4584 <= _T_3607;	// Cat.scala:30:58, Rocket.scala:640:42
    _T_4585 <= _T_4584;	// Rocket.scala:640:{33,42}
    if (reset) begin
      id_reg_fence <= 1'h0;	// Rocket.scala:178:25, :597:32
      _T_4241 <= 32'h0;	// Decode.scala:13:121, Rocket.scala:668:25
      _T_4348 <= 32'h0;	// Decode.scala:13:121, Rocket.scala:668:25
    end
    else begin
      automatic logic [31:0] _T_4250;	// Rocket.scala:664:62
      automatic logic        _T_4262;	// Rocket.scala:490:28
      automatic logic [31:0] _T_4354;	// Rocket.scala:672:62
      automatic logic        _T_4358;	// Rocket.scala:515:72
      automatic logic [31:0] _T_4356;	// Rocket.scala:672:49
      automatic logic        _T_4359 = dmem_resp_replay & io_dmem_resp_bits_tag[0];	// Rocket.scala:423:45, :427:42, :516:38
      automatic logic [31:0] _T_4365;	// Rocket.scala:664:62
      automatic logic        _T_4366;	// Rocket.scala:675:17
      _T_4250 = _T_4243 & ~(_GEN_11 ? 32'h1 << _GEN_10 : 32'h0);	// Decode.scala:13:121, Rocket.scala:442:44, :446:14, :447:12, :664:{62,64}, :669:40, :672:{49,62}
      _T_4262 = _T_4170 & wb_wen;	// Rocket.scala:415:35, :451:25, :490:28
      _T_4354 = 32'h1 << wb_reg_inst[11:7];	// Rocket.scala:155:24, :237:29, :672:62
      _T_4358 = (wb_dcache_miss & wb_ctrl_wfd | io_fpu_sboard_set) & wb_valid;	// Rocket.scala:117:20, :324:36, :450:45, :515:{35,50,72}
      _T_4356 = _T_4358 ? _T_4354 : 32'h0;	// Decode.scala:13:121, Rocket.scala:515:72, :672:{49,62}
      _T_4365 = (_T_4348 | _T_4356) & ~(_T_4359 ? 32'h1 << io_dmem_resp_bits_tag[5:1] : 32'h0);	// Decode.scala:13:121, Rocket.scala:425:46, :516:38, :663:60, :664:{62,64}, :668:25, :672:{49,62}
      _T_4366 = _T_4358 | _T_4359;	// Rocket.scala:515:72, :516:38, :675:17
      id_reg_fence <= _GEN_6 == 5'h1 | _T_3310 & _ibuf_io_inst_0_bits_inst_bits[25] | id_reg_fence & id_mem_busy;	// Consts.scala:36:32, Decode.scala:13:{65,121}, Rocket.scala:165:20, :178:25, :205:29, :206:52, :207:38, :211:{33,49}
      if (_GEN_11 | _T_4262)	// Rocket.scala:442:44, :447:12, :490:28, :675:17
        _T_4241 <= _T_4250 | (_T_4262 ? _T_4354 : 32'h0);	// Decode.scala:13:121, Rocket.scala:490:28, :663:60, :664:62, :668:25, :672:{49,62}
      else if (_GEN_11)	// Rocket.scala:442:44, :447:12
        _T_4241 <= _T_4250;	// Rocket.scala:664:62, :668:25
      if (_T_4366 | io_fpu_sboard_clr)	// Rocket.scala:675:17
        _T_4348 <= _T_4365 & ~(io_fpu_sboard_clr ? 32'h1 << io_fpu_sboard_clra : 32'h0);	// Decode.scala:13:121, Rocket.scala:664:{62,64}, :668:25, :672:{49,62}
      else if (_T_4366)	// Rocket.scala:675:17
        _T_4348 <= _T_4365;	// Rocket.scala:664:62, :668:25
      else	// Rocket.scala:675:17
        _T_4348 <= {32{_T_4358}} & _T_4356 | _T_4348;	// Rocket.scala:515:72, :668:25, :672:49, :676:{18,23}
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// Rocket.scala:593:11
      automatic logic _GEN_24;	// Rocket.scala:593:11
      _GEN_24 = mem_ctrl_mem & mem_xcpt & ~_T_4520 & ~((|{io_dmem_xcpt_ma_ld, io_dmem_xcpt_ma_st,
                                                io_dmem_xcpt_pf_ld, io_dmem_xcpt_pf_st}) | reset);	// Rocket.scala:116:21, :591:35, :592:37, :593:{11,25,32}, :645:26
      if ((`PRINTF_COND_) & _GEN_24)	// Rocket.scala:593:11
        $fwrite(32'h80000002, "Assertion failed\n    at Rocket.scala:593 assert(io.dmem.xcpt.asUInt.orR) // make sure s1_kill is exhaustive\n");	// Rocket.scala:593:11
      if ((`STOP_COND_) & _GEN_24)	// Rocket.scala:593:11
        $fatal;	// Rocket.scala:593:11
      if ((`PRINTF_COND_) & ~reset)	// Rocket.scala:593:11, :636:11
        $fwrite(32'h80000002, "C%d: %d [%d] pc=[%x] W[r%d=%x][%d] R[r%d=%x] R[r%d=%x] inst=[%x] DASM(%x)\n", io_hartid, _csr_io_time[31:0], wb_valid, wb_reg_pc, rf_wen ? rf_waddr : 5'h0, rf_wdata, rf_wen, wb_reg_inst[19:15], _T_4582, wb_reg_inst[24:20], _T_4585, wb_reg_inst, wb_reg_inst);	// Rocket.scala:154:22, :155:24, :187:19, :450:45, :452:23, :453:21, :454:21, :593:11, :636:11, :637:32, :638:13, :639:{21,33}, :640:{21,33}
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      automatic logic [31:0] _RANDOM_11;
      automatic logic [31:0] _RANDOM_12;
      automatic logic [31:0] _RANDOM_13;
      automatic logic [31:0] _RANDOM_14;
      automatic logic [31:0] _RANDOM_15;
      automatic logic [31:0] _RANDOM_16;
      automatic logic [31:0] _RANDOM_17;
      automatic logic [31:0] _RANDOM_18;
      automatic logic [31:0] _RANDOM_19;
      automatic logic [31:0] _RANDOM_20;
      automatic logic [31:0] _RANDOM_21;
      automatic logic [31:0] _RANDOM_22;
      automatic logic [31:0] _RANDOM_23;
      automatic logic [31:0] _RANDOM_24;
      automatic logic [31:0] _RANDOM_25;
      automatic logic [31:0] _RANDOM_26;
      automatic logic [31:0] _RANDOM_27;
      automatic logic [31:0] _RANDOM_28;
      automatic logic [31:0] _RANDOM_29;
      automatic logic [31:0] _RANDOM_30;
      automatic logic [31:0] _RANDOM_31;
      automatic logic [31:0] _RANDOM_32;
      automatic logic [31:0] _RANDOM_33;
      automatic logic [31:0] _RANDOM_34;
      automatic logic [31:0] _RANDOM_35;
      automatic logic [31:0] _RANDOM_36;
      automatic logic [31:0] _RANDOM_37;
      automatic logic [31:0] _RANDOM_38;
      automatic logic [31:0] _RANDOM_39;
      automatic logic [31:0] _RANDOM_40;
      automatic logic [31:0] _RANDOM_41;
      automatic logic [31:0] _RANDOM_42;
      automatic logic [31:0] _RANDOM_43;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        _RANDOM_35 = `RANDOM;
        _RANDOM_36 = `RANDOM;
        _RANDOM_37 = `RANDOM;
        _RANDOM_38 = `RANDOM;
        _RANDOM_39 = `RANDOM;
        _RANDOM_40 = `RANDOM;
        _RANDOM_41 = `RANDOM;
        _RANDOM_42 = `RANDOM;
        _RANDOM_43 = `RANDOM;
        ex_ctrl_fp = _RANDOM_0[1];	// Rocket.scala:115:20
        ex_ctrl_branch = _RANDOM_0[3];	// Rocket.scala:115:20
        ex_ctrl_jal = _RANDOM_0[4];	// Rocket.scala:115:20
        ex_ctrl_jalr = _RANDOM_0[5];	// Rocket.scala:115:20
        ex_ctrl_rxs2 = _RANDOM_0[6];	// Rocket.scala:115:20
        ex_ctrl_sel_alu2 = _RANDOM_0[9:8];	// Rocket.scala:115:20
        ex_ctrl_sel_alu1 = _RANDOM_0[11:10];	// Rocket.scala:115:20
        ex_ctrl_sel_imm = _RANDOM_0[14:12];	// Rocket.scala:115:20
        ex_ctrl_alu_dw = _RANDOM_0[15];	// Rocket.scala:115:20
        ex_ctrl_alu_fn = _RANDOM_0[19:16];	// Rocket.scala:115:20
        ex_ctrl_mem = _RANDOM_0[20];	// Rocket.scala:115:20
        ex_ctrl_mem_cmd = _RANDOM_0[25:21];	// Rocket.scala:115:20
        ex_ctrl_mem_type = _RANDOM_0[28:26];	// Rocket.scala:115:20
        ex_ctrl_wfd = _RANDOM_1[0];	// Rocket.scala:115:20
        ex_ctrl_div = _RANDOM_1[1];	// Rocket.scala:115:20
        ex_ctrl_wxd = _RANDOM_1[2];	// Rocket.scala:115:20
        ex_ctrl_csr = _RANDOM_1[5:3];	// Rocket.scala:115:20
        ex_ctrl_fence_i = _RANDOM_1[6];	// Rocket.scala:115:20
        mem_ctrl_fp = _RANDOM_1[11];	// Rocket.scala:115:20, :116:21
        mem_ctrl_branch = _RANDOM_1[13];	// Rocket.scala:115:20, :116:21
        mem_ctrl_jal = _RANDOM_1[14];	// Rocket.scala:115:20, :116:21
        mem_ctrl_jalr = _RANDOM_1[15];	// Rocket.scala:115:20, :116:21
        mem_ctrl_mem = _RANDOM_1[30];	// Rocket.scala:115:20, :116:21
        mem_ctrl_wfd = _RANDOM_2[10];	// Rocket.scala:116:21
        mem_ctrl_div = _RANDOM_2[11];	// Rocket.scala:116:21
        mem_ctrl_wxd = _RANDOM_2[12];	// Rocket.scala:116:21
        mem_ctrl_csr = _RANDOM_2[15:13];	// Rocket.scala:116:21
        mem_ctrl_fence_i = _RANDOM_2[16];	// Rocket.scala:116:21
        wb_ctrl_mem = _RANDOM_3[8];	// Rocket.scala:117:20
        wb_ctrl_wfd = _RANDOM_3[20];	// Rocket.scala:117:20
        wb_ctrl_div = _RANDOM_3[21];	// Rocket.scala:117:20
        wb_ctrl_wxd = _RANDOM_3[22];	// Rocket.scala:117:20
        wb_ctrl_csr = _RANDOM_3[25:23];	// Rocket.scala:117:20
        wb_ctrl_fence_i = _RANDOM_3[26];	// Rocket.scala:117:20
        ex_reg_xcpt_interrupt = _RANDOM_3[30];	// Rocket.scala:117:20, :119:35
        ex_reg_valid = _RANDOM_3[31];	// Rocket.scala:117:20, :120:35
        ex_reg_rvc = _RANDOM_4[0];	// Rocket.scala:121:35
        ex_reg_btb_hit = _RANDOM_4[1];	// Rocket.scala:121:35, :122:35
        ex_reg_btb_resp_taken = _RANDOM_4[2];	// Rocket.scala:121:35, :123:35
        ex_reg_btb_resp_mask = _RANDOM_4[4:3];	// Rocket.scala:121:35, :123:35
        ex_reg_btb_resp_bridx = _RANDOM_4[5];	// Rocket.scala:121:35, :123:35
        ex_reg_btb_resp_target = {_RANDOM_4[31:6], _RANDOM_5[12:0]};	// Rocket.scala:121:35, :123:35
        ex_reg_btb_resp_entry = _RANDOM_5[18:13];	// Rocket.scala:123:35
        ex_reg_btb_resp_bht_history = _RANDOM_5[25:19];	// Rocket.scala:123:35
        ex_reg_btb_resp_bht_value = _RANDOM_5[27:26];	// Rocket.scala:123:35
        ex_reg_xcpt = _RANDOM_5[28];	// Rocket.scala:123:35, :124:35
        ex_reg_flush_pipe = _RANDOM_5[29];	// Rocket.scala:123:35, :125:35
        ex_reg_load_use = _RANDOM_5[30];	// Rocket.scala:123:35, :126:35
        ex_cause = {_RANDOM_5[31], _RANDOM_6, _RANDOM_7[30:0]};	// Rocket.scala:123:35, :127:35
        ex_reg_replay = _RANDOM_7[31];	// Rocket.scala:127:35, :128:26
        ex_reg_pc = {_RANDOM_8, _RANDOM_9[7:0]};	// Rocket.scala:129:22
        ex_reg_inst = {_RANDOM_9[31:8], _RANDOM_10[7:0]};	// Rocket.scala:129:22, :130:24
        mem_reg_xcpt_interrupt = _RANDOM_10[8];	// Rocket.scala:130:24, :132:36
        mem_reg_valid = _RANDOM_10[9];	// Rocket.scala:130:24, :133:36
        mem_reg_rvc = _RANDOM_10[10];	// Rocket.scala:130:24, :134:36
        mem_reg_btb_hit = _RANDOM_10[11];	// Rocket.scala:130:24, :135:36
        mem_reg_btb_resp_taken = _RANDOM_10[12];	// Rocket.scala:130:24, :136:36
        mem_reg_btb_resp_mask = _RANDOM_10[14:13];	// Rocket.scala:130:24, :136:36
        mem_reg_btb_resp_bridx = _RANDOM_10[15];	// Rocket.scala:130:24, :136:36
        mem_reg_btb_resp_target = {_RANDOM_10[31:16], _RANDOM_11[22:0]};	// Rocket.scala:130:24, :136:36
        mem_reg_btb_resp_entry = _RANDOM_11[28:23];	// Rocket.scala:136:36
        mem_reg_btb_resp_bht_history = {_RANDOM_11[31:29], _RANDOM_12[3:0]};	// Rocket.scala:136:36
        mem_reg_btb_resp_bht_value = _RANDOM_12[5:4];	// Rocket.scala:136:36
        mem_reg_xcpt = _RANDOM_12[6];	// Rocket.scala:136:36, :137:36
        mem_reg_replay = _RANDOM_12[7];	// Rocket.scala:136:36, :138:36
        mem_reg_flush_pipe = _RANDOM_12[8];	// Rocket.scala:136:36, :139:36
        mem_reg_cause = {_RANDOM_12[31:9], _RANDOM_13, _RANDOM_14[8:0]};	// Rocket.scala:136:36, :140:36
        mem_reg_slow_bypass = _RANDOM_14[9];	// Rocket.scala:140:36, :141:36
        mem_reg_load = _RANDOM_14[10];	// Rocket.scala:140:36, :142:36
        mem_reg_store = _RANDOM_14[11];	// Rocket.scala:140:36, :143:36
        mem_reg_pc = {_RANDOM_14[31:12], _RANDOM_15[19:0]};	// Rocket.scala:140:36, :144:23
        mem_reg_inst = {_RANDOM_15[31:20], _RANDOM_16[19:0]};	// Rocket.scala:144:23, :145:25
        mem_reg_wdata = {_RANDOM_16[31:20], _RANDOM_17, _RANDOM_18[19:0]};	// Rocket.scala:145:25, :146:26
        mem_reg_rs2 = {_RANDOM_18[31:20], _RANDOM_19, _RANDOM_20[19:0]};	// Rocket.scala:146:26, :147:24
        wb_reg_valid = _RANDOM_20[20];	// Rocket.scala:147:24, :150:35
        wb_reg_xcpt = _RANDOM_20[21];	// Rocket.scala:147:24, :151:35
        wb_reg_replay = _RANDOM_20[22];	// Rocket.scala:147:24, :152:35
        wb_reg_cause = {_RANDOM_20[31:23], _RANDOM_21, _RANDOM_22[22:0]};	// Rocket.scala:147:24, :153:35
        wb_reg_pc = {_RANDOM_22[31:23], _RANDOM_23[30:0]};	// Rocket.scala:153:35, :154:22
        wb_reg_inst = {_RANDOM_23[31], _RANDOM_24[30:0]};	// Rocket.scala:154:22, :155:24
        wb_reg_wdata = {_RANDOM_24[31], _RANDOM_25, _RANDOM_26[30:0]};	// Rocket.scala:155:24, :156:25
        id_reg_fence = _RANDOM_28[31];	// Rocket.scala:178:25
        ex_reg_rs_bypass_0 = _RANDOM_29[0];	// Rocket.scala:247:29
        ex_reg_rs_bypass_1 = _RANDOM_29[1];	// Rocket.scala:247:29
        ex_reg_rs_lsb_0 = _RANDOM_29[3:2];	// Rocket.scala:247:29, :248:26
        ex_reg_rs_lsb_1 = _RANDOM_29[5:4];	// Rocket.scala:247:29, :248:26
        ex_reg_rs_msb_0 = {_RANDOM_29[31:6], _RANDOM_30, _RANDOM_31[3:0]};	// Rocket.scala:247:29, :249:26
        ex_reg_rs_msb_1 = {_RANDOM_31[31:4], _RANDOM_32, _RANDOM_33[1:0]};	// Rocket.scala:249:26
        _T_4154 = _RANDOM_33[2];	// Rocket.scala:249:26, :396:37
        _T_4241 = {_RANDOM_33[31:3], _RANDOM_34[2:0]};	// Rocket.scala:249:26, :668:25
        _T_4348 = {_RANDOM_34[31:3], _RANDOM_35[2:0]};	// Rocket.scala:668:25
        dcache_blocked = _RANDOM_35[3];	// Rocket.scala:522:27, :668:25
        _T_4581 = {_RANDOM_35[31:5], _RANDOM_36, _RANDOM_37[4:0]};	// Rocket.scala:639:42, :668:25
        _T_4582 = {_RANDOM_37[31:5], _RANDOM_38, _RANDOM_39[4:0]};	// Rocket.scala:639:{33,42}
        _T_4584 = {_RANDOM_39[31:5], _RANDOM_40, _RANDOM_41[4:0]};	// Rocket.scala:639:33, :640:42
        _T_4585 = {_RANDOM_41[31:5], _RANDOM_42, _RANDOM_43[4:0]};	// Rocket.scala:640:{33,42}
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  IBuf ibuf (	// Rocket.scala:165:20
    .clock                             (clock),
    .reset                             (reset),
    .io_imem_valid                     (io_imem_resp_valid),
    .io_imem_bits_btb_valid            (io_imem_resp_bits_btb_valid),
    .io_imem_bits_btb_bits_taken       (io_imem_resp_bits_btb_bits_taken),
    .io_imem_bits_btb_bits_mask        (io_imem_resp_bits_btb_bits_mask),
    .io_imem_bits_btb_bits_bridx       (io_imem_resp_bits_btb_bits_bridx),
    .io_imem_bits_btb_bits_target      (io_imem_resp_bits_btb_bits_target),
    .io_imem_bits_btb_bits_entry       (io_imem_resp_bits_btb_bits_entry),
    .io_imem_bits_btb_bits_bht_history (io_imem_resp_bits_btb_bits_bht_history),
    .io_imem_bits_btb_bits_bht_value   (io_imem_resp_bits_btb_bits_bht_value),
    .io_imem_bits_pc                   (io_imem_resp_bits_pc),
    .io_imem_bits_data                 (io_imem_resp_bits_data),
    .io_imem_bits_xcpt_if              (io_imem_resp_bits_xcpt_if),
    .io_imem_bits_replay               (io_imem_resp_bits_replay),
    .io_kill                           (take_pc_mem_wb),	// Rocket.scala:161:35
    .io_inst_0_ready                   (~ctrl_stalld | _csr_io_interrupt),	// Rocket.scala:187:19, :533:17, :547:{28,41}
    .io_imem_ready                     (io_imem_resp_ready),
    .io_pc                             (_ibuf_io_pc),
    .io_btb_resp_taken                 (_ibuf_io_btb_resp_taken),
    .io_btb_resp_mask                  (_ibuf_io_btb_resp_mask),
    .io_btb_resp_bridx                 (_ibuf_io_btb_resp_bridx),
    .io_btb_resp_target                (_ibuf_io_btb_resp_target),
    .io_btb_resp_entry                 (_ibuf_io_btb_resp_entry),
    .io_btb_resp_bht_history           (_ibuf_io_btb_resp_bht_history),
    .io_btb_resp_bht_value             (_ibuf_io_btb_resp_bht_value),
    .io_inst_0_valid                   (_ibuf_io_inst_0_valid),
    .io_inst_0_bits_pf0                (_ibuf_io_inst_0_bits_pf0),
    .io_inst_0_bits_pf1                (_ibuf_io_inst_0_bits_pf1),
    .io_inst_0_bits_replay             (_ibuf_io_inst_0_bits_replay),
    .io_inst_0_bits_btb_hit            (_ibuf_io_inst_0_bits_btb_hit),
    .io_inst_0_bits_rvc                (_ibuf_io_inst_0_bits_rvc),
    .io_inst_0_bits_inst_bits          (_ibuf_io_inst_0_bits_inst_bits),
    .io_inst_0_bits_inst_rd            (_ibuf_io_inst_0_bits_inst_rd),
    .io_inst_0_bits_inst_rs1           (_ibuf_io_inst_0_bits_inst_rs1),
    .io_inst_0_bits_inst_rs2           (_ibuf_io_inst_0_bits_inst_rs2),
    .io_inst_0_bits_inst_rs3           (_ibuf_io_inst_0_bits_inst_rs3),
    .io_inst_0_bits_raw                (_ibuf_io_inst_0_bits_raw)
  );
  _T_3331_combMem _T_3331_ext (	// Rocket.scala:682:23
    .R0_addr (~_ibuf_io_inst_0_bits_inst_rs1),	// Rocket.scala:165:20, :683:39
    .R0_en   (1'h1),	// Rocket.scala:657:20
    .R0_clk  (clock),
    .R1_addr (~_ibuf_io_inst_0_bits_inst_rs2),	// Rocket.scala:165:20, :683:39
    .R1_en   (1'h1),	// Rocket.scala:657:20
    .R1_clk  (clock),
    .W0_addr (~rf_waddr),	// Rocket.scala:453:21, :683:39
    .W0_en   (rf_wen & (|rf_waddr)),	// Rocket.scala:452:23, :453:21, :458:17, :682:23, :694:{16,29}
    .W0_clk  (clock),
    .W0_data (rf_wdata),	// Rocket.scala:454:21
    .R0_data (__T_3331_ext_R0_data),
    .R1_data (__T_3331_ext_R1_data)
  );
  CSRFile csr (	// Rocket.scala:187:19
    .clock                    (clock),
    .reset                    (reset),
    .io_interrupts_debug      (io_interrupts_debug),
    .io_interrupts_mtip       (io_interrupts_mtip),
    .io_interrupts_msip       (io_interrupts_msip),
    .io_interrupts_meip       (io_interrupts_meip),
    .io_interrupts_seip       (io_interrupts_seip),
    .io_hartid                (io_hartid),
    .io_rw_addr               (wb_reg_inst[31:20]),	// Rocket.scala:155:24, :475:32
    .io_rw_cmd                (wb_reg_valid ? wb_ctrl_csr : 3'h0),	// Rocket.scala:117:20, :150:35, :476:23
    .io_rw_wdata              (wb_reg_wdata),	// Rocket.scala:156:25
    .io_decode_csr            (_ibuf_io_inst_0_bits_raw[31:20]),	// Rocket.scala:165:20, :461:48
    .io_exception             (wb_reg_xcpt),	// Rocket.scala:151:35
    .io_retire                (wb_valid),	// Rocket.scala:450:45
    .io_cause                 (wb_reg_cause),	// Rocket.scala:153:35
    .io_pc                    (wb_reg_pc),	// Rocket.scala:154:22
    .io_badaddr               ({wb_reg_wdata[63:38] == 26'h0 | wb_reg_wdata[63:38] == 26'h1 ? (|(wb_reg_wdata[39:38])) :
                (&(wb_reg_wdata[63:38])) | wb_reg_wdata[63:38] == 26'h3FFFFFE ? (&(wb_reg_wdata[39:38])) :
                wb_reg_wdata[38], wb_reg_wdata[38:0]}),	// Cat.scala:30:58, Rocket.scala:156:25, :653:16, :654:15, :656:{10,13,25,30,45}, :657:{10,20,33,45,61,76}, :658:16
    .io_fcsr_flags_valid      (io_fpu_fcsr_flags_valid),
    .io_fcsr_flags_bits       (io_fpu_fcsr_flags_bits),
    .io_rocc_interrupt        (io_rocc_interrupt),
    .io_rw_rdata              (_csr_io_rw_rdata),
    .io_decode_fp_illegal     (_csr_io_decode_fp_illegal),
    .io_decode_read_illegal   (_csr_io_decode_read_illegal),
    .io_decode_write_illegal  (_csr_io_decode_write_illegal),
    .io_decode_write_flush    (_csr_io_decode_write_flush),
    .io_decode_system_illegal (_csr_io_decode_system_illegal),
    .io_csr_stall             (_csr_io_csr_stall),
    .io_eret                  (_csr_io_eret),
    .io_singleStep            (_csr_io_singleStep),
    .io_status_debug          (_csr_io_status_debug),
    .io_status_isa            (_csr_io_status_isa),
    .io_status_prv            (_csr_io_status_prv),
    .io_status_sd             (_csr_io_status_sd),
    .io_status_tsr            (_csr_io_status_tsr),
    .io_status_tw             (_csr_io_status_tw),
    .io_status_tvm            (_csr_io_status_tvm),
    .io_status_mxr            (_csr_io_status_mxr),
    .io_status_pum            (_csr_io_status_pum),
    .io_status_mprv           (_csr_io_status_mprv),
    .io_status_fs             (_csr_io_status_fs),
    .io_status_mpp            (_csr_io_status_mpp),
    .io_status_spp            (_csr_io_status_spp),
    .io_status_mpie           (_csr_io_status_mpie),
    .io_status_spie           (_csr_io_status_spie),
    .io_status_mie            (_csr_io_status_mie),
    .io_status_sie            (_csr_io_status_sie),
    .io_ptbr_mode             (io_ptw_ptbr_mode),
    .io_ptbr_ppn              (io_ptw_ptbr_ppn),
    .io_evec                  (_csr_io_evec),
    .io_fatc                  (_csr_io_fatc),
    .io_time                  (_csr_io_time),
    .io_fcsr_rm               (io_fpu_fcsr_rm),
    .io_interrupt             (_csr_io_interrupt),
    .io_interrupt_cause       (_csr_io_interrupt_cause),
    .io_bp_0_control_action   (_csr_io_bp_0_control_action),
    .io_bp_0_control_tmatch   (_csr_io_bp_0_control_tmatch),
    .io_bp_0_control_m        (_csr_io_bp_0_control_m),
    .io_bp_0_control_s        (_csr_io_bp_0_control_s),
    .io_bp_0_control_u        (_csr_io_bp_0_control_u),
    .io_bp_0_control_x        (_csr_io_bp_0_control_x),
    .io_bp_0_control_w        (_csr_io_bp_0_control_w),
    .io_bp_0_control_r        (_csr_io_bp_0_control_r),
    .io_bp_0_address          (_csr_io_bp_0_address)
  );
  BreakpointUnit bpu (	// Rocket.scala:215:19
    .io_status_debug        (_csr_io_status_debug),	// Rocket.scala:187:19
    .io_status_prv          (_csr_io_status_prv),	// Rocket.scala:187:19
    .io_bp_0_control_action (_csr_io_bp_0_control_action),	// Rocket.scala:187:19
    .io_bp_0_control_tmatch (_csr_io_bp_0_control_tmatch),	// Rocket.scala:187:19
    .io_bp_0_control_m      (_csr_io_bp_0_control_m),	// Rocket.scala:187:19
    .io_bp_0_control_s      (_csr_io_bp_0_control_s),	// Rocket.scala:187:19
    .io_bp_0_control_u      (_csr_io_bp_0_control_u),	// Rocket.scala:187:19
    .io_bp_0_control_x      (_csr_io_bp_0_control_x),	// Rocket.scala:187:19
    .io_bp_0_control_w      (_csr_io_bp_0_control_w),	// Rocket.scala:187:19
    .io_bp_0_control_r      (_csr_io_bp_0_control_r),	// Rocket.scala:187:19
    .io_bp_0_address        (_csr_io_bp_0_address),	// Rocket.scala:187:19
    .io_pc                  (_ibuf_io_pc[38:0]),	// Rocket.scala:165:20, :218:13
    .io_ea                  (mem_reg_wdata[38:0]),	// Rocket.scala:146:26, :219:13
    .io_xcpt_if             (_bpu_io_xcpt_if),
    .io_xcpt_ld             (_bpu_io_xcpt_ld),
    .io_xcpt_st             (_bpu_io_xcpt_st),
    .io_debug_if            (_bpu_io_debug_if),
    .io_debug_ld            (_bpu_io_debug_ld),
    .io_debug_st            (_bpu_io_debug_st)
  );
  ALU alu (	// Rocket.scala:261:19
    .io_dw        (ex_ctrl_alu_dw),	// Rocket.scala:115:20
    .io_fn        (ex_ctrl_alu_fn),	// Rocket.scala:115:20
    .io_in2       (ex_ctrl_sel_alu2 == 2'h2 ? ex_rs_1 : {{32{_T_3710[31]}}, _T_3710}),	// Mux.scala:46:{16,19}, Rocket.scala:115:20, :215:19, :251:14
    .io_in1       (ex_ctrl_sel_alu1 == 2'h1 ? ex_rs_0 : {{24{_T_3697[39]}}, _T_3697}),	// Mux.scala:46:{16,19}, Rocket.scala:115:20, :251:14
    .io_out       (_alu_io_out),
    .io_adder_out (_alu_io_adder_out)
  );
  MulDiv div (	// Rocket.scala:268:19
    .clock             (clock),
    .reset             (reset),
    .io_req_valid      (_T_3714),	// Rocket.scala:269:36
    .io_req_bits_fn    (ex_ctrl_alu_fn),	// Rocket.scala:115:20
    .io_req_bits_dw    (ex_ctrl_alu_dw),	// Rocket.scala:115:20
    .io_req_bits_in1   (ex_rs_0),	// Rocket.scala:251:14
    .io_req_bits_in2   (ex_rs_1),	// Rocket.scala:251:14
    .io_req_bits_tag   (ex_reg_inst[11:7]),	// Rocket.scala:130:24, :235:29
    .io_kill           (killm_common & _T_4154),	// Rocket.scala:395:68, :396:{31,37}
    .io_resp_ready     (_GEN),	// Rocket.scala:429:21, :442:44, :443:23
    .io_req_ready      (_div_io_req_ready),
    .io_resp_valid     (_div_io_resp_valid),
    .io_resp_bits_data (_div_io_resp_bits_data),
    .io_resp_bits_tag  (_div_io_resp_bits_tag)
  );
  assign io_imem_req_valid = take_pc_mem_wb;	// Rocket.scala:161:35
  assign io_imem_req_bits_pc = _T_4437;	// Rocket.scala:540:8
  assign io_imem_req_bits_speculative = ~_T_4175;	// Rocket.scala:401:34, :420:38
  assign io_imem_btb_update_valid = mem_reg_replay & mem_reg_btb_hit | mem_reg_valid & ~_T_4175 & (_T_4045 | mem_ctrl_jalr |
                mem_ctrl_jal | ~mem_cfi) & mem_misprediction;	// Rocket.scala:116:21, :133:36, :135:36, :138:36, :340:25, :344:26, :347:50, :401:34, :420:38, :549:{47,67,100,120,123}
  assign io_imem_btb_update_bits_prediction_valid = mem_reg_btb_hit;	// Rocket.scala:135:36
  assign io_imem_btb_update_bits_prediction_bits_taken = mem_reg_btb_resp_taken;	// Rocket.scala:136:36
  assign io_imem_btb_update_bits_prediction_bits_mask = mem_reg_btb_resp_mask;	// Rocket.scala:136:36
  assign io_imem_btb_update_bits_prediction_bits_bridx = mem_reg_btb_resp_bridx;	// Rocket.scala:136:36
  assign io_imem_btb_update_bits_prediction_bits_target = mem_reg_btb_resp_target;	// Rocket.scala:136:36
  assign io_imem_btb_update_bits_prediction_bits_entry = mem_reg_btb_resp_entry;	// Rocket.scala:136:36
  assign io_imem_btb_update_bits_prediction_bits_bht_history = mem_reg_btb_resp_bht_history;	// Rocket.scala:136:36
  assign io_imem_btb_update_bits_prediction_bits_bht_value = mem_reg_btb_resp_bht_value;	// Rocket.scala:136:36
  assign io_imem_btb_update_bits_pc = ~_T_4478;	// Rocket.scala:555:{33,66}
  assign io_imem_btb_update_bits_target = _T_4437[38:0];	// Rocket.scala:540:8, :553:34
  assign io_imem_btb_update_bits_taken = 1'h0;	// Rocket.scala:597:32
  assign io_imem_btb_update_bits_isValid = ~mem_reg_replay & mem_cfi;	// Rocket.scala:138:36, :347:50, :550:{38,54}
  assign io_imem_btb_update_bits_isJump = _T_4464;	// Rocket.scala:551:50
  assign io_imem_btb_update_bits_isReturn = _T_4470;	// Rocket.scala:552:53
  assign io_imem_btb_update_bits_br_pc = _GEN_17;	// Rocket.scala:554:69
  assign io_imem_bht_update_valid = mem_reg_valid & ~_T_4175 & mem_ctrl_branch;	// Rocket.scala:116:21, :133:36, :401:34, :420:38, :559:60
  assign io_imem_bht_update_bits_prediction_valid = mem_reg_btb_hit;	// Rocket.scala:135:36
  assign io_imem_bht_update_bits_prediction_bits_taken = mem_reg_btb_resp_taken;	// Rocket.scala:136:36
  assign io_imem_bht_update_bits_prediction_bits_mask = mem_reg_btb_resp_mask;	// Rocket.scala:136:36
  assign io_imem_bht_update_bits_prediction_bits_bridx = mem_reg_btb_resp_bridx;	// Rocket.scala:136:36
  assign io_imem_bht_update_bits_prediction_bits_target = mem_reg_btb_resp_target;	// Rocket.scala:136:36
  assign io_imem_bht_update_bits_prediction_bits_entry = mem_reg_btb_resp_entry;	// Rocket.scala:136:36
  assign io_imem_bht_update_bits_prediction_bits_bht_history = mem_reg_btb_resp_bht_history;	// Rocket.scala:136:36
  assign io_imem_bht_update_bits_prediction_bits_bht_value = mem_reg_btb_resp_bht_value;	// Rocket.scala:136:36
  assign io_imem_bht_update_bits_pc = ~_T_4478;	// Rocket.scala:555:{33,66}
  assign io_imem_bht_update_bits_taken = mem_reg_wdata[0];	// Rocket.scala:146:26, :338:35
  assign io_imem_bht_update_bits_mispredict = mem_misprediction;	// Rocket.scala:344:26
  assign io_imem_ras_update_valid = mem_reg_valid & ~_T_4175;	// Rocket.scala:133:36, :401:34, :420:38, :565:45
  assign io_imem_ras_update_bits_isCall = _T_4464 & mem_reg_inst[7];	// Rocket.scala:145:25, :551:50, :567:{68,80}
  assign io_imem_ras_update_bits_isReturn = _T_4470;	// Rocket.scala:552:53
  assign io_imem_ras_update_bits_returnAddr = _T_4041 ? _T_4000[38:0] : mem_reg_wdata[38:0];	// Rocket.scala:146:26, :219:13, :339:41, :346:{26,41}
  assign io_imem_ras_update_bits_prediction_valid = mem_reg_btb_hit;	// Rocket.scala:135:36
  assign io_imem_ras_update_bits_prediction_bits_taken = mem_reg_btb_resp_taken;	// Rocket.scala:136:36
  assign io_imem_ras_update_bits_prediction_bits_mask = mem_reg_btb_resp_mask;	// Rocket.scala:136:36
  assign io_imem_ras_update_bits_prediction_bits_bridx = mem_reg_btb_resp_bridx;	// Rocket.scala:136:36
  assign io_imem_ras_update_bits_prediction_bits_target = mem_reg_btb_resp_target;	// Rocket.scala:136:36
  assign io_imem_ras_update_bits_prediction_bits_entry = mem_reg_btb_resp_entry;	// Rocket.scala:136:36
  assign io_imem_ras_update_bits_prediction_bits_bht_history = mem_reg_btb_resp_bht_history;	// Rocket.scala:136:36
  assign io_imem_ras_update_bits_prediction_bits_bht_value = mem_reg_btb_resp_bht_value;	// Rocket.scala:136:36
  assign io_imem_flush_icache = wb_reg_valid & wb_ctrl_fence_i & ~io_dmem_s2_nack;	// Rocket.scala:117:20, :150:35, :544:{59,62}
  assign io_imem_flush_tlb = _csr_io_fatc;	// Rocket.scala:187:19
  assign io_dmem_req_valid = _T_4493;	// Rocket.scala:581:41
  assign io_dmem_req_bits_addr = {ex_rs_0[63:38] == 26'h0 | ex_rs_0[63:38] == 26'h1 ? (|(_alu_io_adder_out[39:38])) :
                (&(ex_rs_0[63:38])) | ex_rs_0[63:38] == 26'h3FFFFFE ? (&(_alu_io_adder_out[39:38])) :
                _alu_io_adder_out[38], _alu_io_adder_out[38:0]};	// Cat.scala:30:58, Rocket.scala:251:14, :261:19, :653:16, :654:15, :656:{10,13,25,30,45}, :657:{10,20,33,45,61,76}, :658:16
  assign io_dmem_req_bits_tag = {1'h0, ex_reg_inst[11:7], ex_ctrl_fp};	// Rocket.scala:115:20, :130:24, :235:29, :584:25, :597:32
  assign io_dmem_req_bits_cmd = ex_ctrl_mem_cmd;	// Rocket.scala:115:20
  assign io_dmem_req_bits_typ = ex_ctrl_mem_type;	// Rocket.scala:115:20
  assign io_dmem_req_bits_phys = 1'h0;	// Rocket.scala:597:32
  assign io_dmem_req_bits_data = 64'h0;	// Rocket.scala:157:23
  assign io_dmem_s1_kill = _T_4520;	// Rocket.scala:591:35
  assign io_dmem_s1_data = mem_ctrl_fp ? io_fpu_store_data : mem_reg_rs2;	// Rocket.scala:116:21, :147:24, :590:25
  assign io_dmem_invalidate_lr = wb_reg_xcpt;	// Rocket.scala:151:35
  assign io_ptw_ptbr_asid = 16'h0;	// Rocket.scala:187:19
  assign io_ptw_invalidate = _csr_io_fatc;	// Rocket.scala:187:19
  assign io_ptw_status_debug = _csr_io_status_debug;	// Rocket.scala:187:19
  assign io_ptw_status_isa = _csr_io_status_isa;	// Rocket.scala:187:19
  assign io_ptw_status_prv = _csr_io_status_prv;	// Rocket.scala:187:19
  assign io_ptw_status_sd = _csr_io_status_sd;	// Rocket.scala:187:19
  assign io_ptw_status_zero2 = 27'h0;	// Rocket.scala:215:19
  assign io_ptw_status_sxl = 2'h2;	// Rocket.scala:215:19
  assign io_ptw_status_uxl = 2'h2;	// Rocket.scala:215:19
  assign io_ptw_status_sd_rv32 = 1'h0;	// Rocket.scala:597:32
  assign io_ptw_status_zero1 = 8'h0;	// Rocket.scala:215:19
  assign io_ptw_status_tsr = _csr_io_status_tsr;	// Rocket.scala:187:19
  assign io_ptw_status_tw = _csr_io_status_tw;	// Rocket.scala:187:19
  assign io_ptw_status_tvm = _csr_io_status_tvm;	// Rocket.scala:187:19
  assign io_ptw_status_mxr = _csr_io_status_mxr;	// Rocket.scala:187:19
  assign io_ptw_status_pum = _csr_io_status_pum;	// Rocket.scala:187:19
  assign io_ptw_status_mprv = _csr_io_status_mprv;	// Rocket.scala:187:19
  assign io_ptw_status_xs = 2'h0;	// Rocket.scala:215:19
  assign io_ptw_status_fs = _csr_io_status_fs;	// Rocket.scala:187:19
  assign io_ptw_status_mpp = _csr_io_status_mpp;	// Rocket.scala:187:19
  assign io_ptw_status_hpp = 2'h0;	// Rocket.scala:215:19
  assign io_ptw_status_spp = _csr_io_status_spp;	// Rocket.scala:187:19
  assign io_ptw_status_mpie = _csr_io_status_mpie;	// Rocket.scala:187:19
  assign io_ptw_status_hpie = 1'h0;	// Rocket.scala:597:32
  assign io_ptw_status_spie = _csr_io_status_spie;	// Rocket.scala:187:19
  assign io_ptw_status_upie = 1'h0;	// Rocket.scala:597:32
  assign io_ptw_status_mie = _csr_io_status_mie;	// Rocket.scala:187:19
  assign io_ptw_status_hie = 1'h0;	// Rocket.scala:597:32
  assign io_ptw_status_sie = _csr_io_status_sie;	// Rocket.scala:187:19
  assign io_ptw_status_uie = 1'h0;	// Rocket.scala:597:32
  assign io_fpu_inst = _ibuf_io_inst_0_bits_inst_bits;	// Rocket.scala:165:20
  assign io_fpu_fromint_data = ex_rs_0;	// Rocket.scala:251:14
  assign io_fpu_dmem_resp_val = dmem_resp_valid & io_dmem_resp_bits_tag[0];	// Rocket.scala:423:45, :426:44, :576:43
  assign io_fpu_dmem_resp_type = io_dmem_resp_bits_typ;
  assign io_fpu_dmem_resp_tag = io_dmem_resp_bits_tag[5:1];	// Rocket.scala:425:46
  assign io_fpu_dmem_resp_data = io_dmem_resp_bits_data_word_bypass;
  assign io_fpu_valid = ~_T_4429 & _T_2814;	// Decode.scala:14:30, Rocket.scala:185:34, :535:104, :571:31
  assign io_fpu_killx = ctrl_killx;	// Rocket.scala:329:48
  assign io_fpu_killm = killm_common;	// Rocket.scala:395:68
  assign io_rocc_cmd_valid = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_cmd_bits_inst_funct = wb_reg_inst[31:25];	// Rocket.scala:155:24, :599:58
  assign io_rocc_cmd_bits_inst_rs2 = wb_reg_inst[24:20];	// Rocket.scala:155:24, :599:58
  assign io_rocc_cmd_bits_inst_rs1 = wb_reg_inst[19:15];	// Rocket.scala:155:24, :599:58
  assign io_rocc_cmd_bits_inst_xd = wb_reg_inst[14];	// Rocket.scala:155:24, :599:58
  assign io_rocc_cmd_bits_inst_xs1 = wb_reg_inst[13];	// Rocket.scala:155:24, :599:58
  assign io_rocc_cmd_bits_inst_xs2 = wb_reg_inst[12];	// Rocket.scala:155:24, :599:58
  assign io_rocc_cmd_bits_inst_rd = wb_reg_inst[11:7];	// Rocket.scala:155:24, :599:58
  assign io_rocc_cmd_bits_inst_opcode = wb_reg_inst[6:0];	// Rocket.scala:155:24, :599:58
  assign io_rocc_cmd_bits_rs1 = wb_reg_wdata;	// Rocket.scala:156:25
  assign io_rocc_cmd_bits_rs2 = 64'h0;	// Rocket.scala:157:23
  assign io_rocc_cmd_bits_status_debug = _csr_io_status_debug;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_isa = _csr_io_status_isa;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_prv = _csr_io_status_prv;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_sd = _csr_io_status_sd;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_zero2 = 27'h0;	// Rocket.scala:215:19
  assign io_rocc_cmd_bits_status_sxl = 2'h2;	// Rocket.scala:215:19
  assign io_rocc_cmd_bits_status_uxl = 2'h2;	// Rocket.scala:215:19
  assign io_rocc_cmd_bits_status_sd_rv32 = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_cmd_bits_status_zero1 = 8'h0;	// Rocket.scala:215:19
  assign io_rocc_cmd_bits_status_tsr = _csr_io_status_tsr;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_tw = _csr_io_status_tw;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_tvm = _csr_io_status_tvm;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_mxr = _csr_io_status_mxr;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_pum = _csr_io_status_pum;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_mprv = _csr_io_status_mprv;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_xs = 2'h0;	// Rocket.scala:215:19
  assign io_rocc_cmd_bits_status_fs = _csr_io_status_fs;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_mpp = _csr_io_status_mpp;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_hpp = 2'h0;	// Rocket.scala:215:19
  assign io_rocc_cmd_bits_status_spp = _csr_io_status_spp;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_mpie = _csr_io_status_mpie;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_hpie = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_cmd_bits_status_spie = _csr_io_status_spie;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_upie = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_cmd_bits_status_mie = _csr_io_status_mie;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_hie = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_cmd_bits_status_sie = _csr_io_status_sie;	// Rocket.scala:187:19
  assign io_rocc_cmd_bits_status_uie = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_resp_ready = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_req_ready = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_s2_nack = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_acquire = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_release = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_resp_valid = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_resp_bits_addr = 40'h0;	// Rocket.scala:215:19
  assign io_rocc_mem_resp_bits_tag = 7'h0;
  assign io_rocc_mem_resp_bits_cmd = 5'h0;
  assign io_rocc_mem_resp_bits_typ = 3'h0;
  assign io_rocc_mem_resp_bits_data = 64'h0;	// Rocket.scala:157:23
  assign io_rocc_mem_resp_bits_replay = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_resp_bits_has_data = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_resp_bits_data_word_bypass = 64'h0;	// Rocket.scala:157:23
  assign io_rocc_mem_resp_bits_store_data = 64'h0;	// Rocket.scala:157:23
  assign io_rocc_mem_replay_next = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_xcpt_ma_ld = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_xcpt_ma_st = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_xcpt_pf_ld = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_xcpt_pf_st = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_mem_ordered = 1'h0;	// Rocket.scala:597:32
  assign io_rocc_exception = 1'h0;	// Rocket.scala:597:32
endmodule

module IBuf(
  input         clock,
                reset,
                io_imem_valid,
                io_imem_bits_btb_valid,
                io_imem_bits_btb_bits_taken,
  input  [1:0]  io_imem_bits_btb_bits_mask,
  input         io_imem_bits_btb_bits_bridx,
  input  [38:0] io_imem_bits_btb_bits_target,
  input  [5:0]  io_imem_bits_btb_bits_entry,
  input  [6:0]  io_imem_bits_btb_bits_bht_history,
  input  [1:0]  io_imem_bits_btb_bits_bht_value,
  input  [39:0] io_imem_bits_pc,
  input  [31:0] io_imem_bits_data,
  input         io_imem_bits_xcpt_if,
                io_imem_bits_replay,
                io_kill,
                io_inst_0_ready,
  output        io_imem_ready,
  output [39:0] io_pc,
  output        io_btb_resp_taken,
  output [1:0]  io_btb_resp_mask,
  output        io_btb_resp_bridx,
  output [38:0] io_btb_resp_target,
  output [5:0]  io_btb_resp_entry,
  output [6:0]  io_btb_resp_bht_history,
  output [1:0]  io_btb_resp_bht_value,
  output        io_inst_0_valid,
                io_inst_0_bits_pf0,
                io_inst_0_bits_pf1,
                io_inst_0_bits_replay,
                io_inst_0_bits_btb_hit,
                io_inst_0_bits_rvc,
  output [31:0] io_inst_0_bits_inst_bits,
  output [4:0]  io_inst_0_bits_inst_rd,
                io_inst_0_bits_inst_rs1,
                io_inst_0_bits_inst_rs2,
                io_inst_0_bits_inst_rs3,
  output [31:0] io_inst_0_bits_raw);

  wire [1:0]   _GEN;	// IBuf.scala:107:{32,41}
  wire         _RVCExpander_io_rvc;	// IBuf.scala:93:21
  reg          nBufValid;	// IBuf.scala:35:47
  reg  [39:0]  buf_pc;	// IBuf.scala:36:16
  reg  [31:0]  buf_data;	// IBuf.scala:36:16
  reg          buf_xcpt_if;	// IBuf.scala:36:16
  reg          buf_replay;	// IBuf.scala:36:16
  reg          ibufBTBHit;	// IBuf.scala:37:23
  reg          ibufBTBResp_taken;	// IBuf.scala:38:24
  reg  [1:0]   ibufBTBResp_mask;	// IBuf.scala:38:24
  reg          ibufBTBResp_bridx;	// IBuf.scala:38:24
  reg  [38:0]  ibufBTBResp_target;	// IBuf.scala:38:24
  reg  [5:0]   ibufBTBResp_entry;	// IBuf.scala:38:24
  reg  [6:0]   ibufBTBResp_bht_history;	// IBuf.scala:38:24
  reg  [1:0]   ibufBTBResp_bht_value;	// IBuf.scala:38:24
  wire [1:0]   _GEN_0 = {1'h0, io_imem_bits_btb_bits_bridx};	// IBuf.scala:35:47, :43:100
  wire [1:0]   _GEN_1 = {1'h0, io_imem_bits_pc[1]};	// IBuf.scala:35:47, :43:124, Package.scala:44:13
  wire [1:0]   nIC = (io_imem_bits_btb_valid & io_imem_bits_btb_bits_taken ? _GEN_0 + 2'h1 : 2'h2) - _GEN_1;	// IBuf.scala:43:{16,40,100,124}, :99:81
  wire [1:0]   _GEN_2 = {1'h0, nBufValid};	// IBuf.scala:35:47, :44:25
  wire [1:0]   nICReady = _GEN - _GEN_2;	// IBuf.scala:44:25, :107:{32,41}
  wire         _T_402 = _GEN >= _GEN_2;	// IBuf.scala:44:25, :46:27, :107:{32,41}
  wire [1:0]   _T_392 = nIC - nICReady;	// IBuf.scala:43:124, :44:25, :46:72
  wire [190:0] _T_447 = {63'h0, {2{{2{io_imem_bits_data[31:16]}}}}, io_imem_bits_data,
                {2{io_imem_bits_data[15:0]}}} << {185'h0, _GEN_2 - 2'h2 - _GEN_1, 4'h0};	// Cat.scala:30:58, IBuf.scala:43:124, :44:25, :73:{32,44}, :74:87, :85:25, :126:58, :127:10
  wire [62:0]  _T_451 = 63'hFFFFFFFF << {58'h0, nBufValid, 4'h0};	// IBuf.scala:35:47, :76:51, :85:25, :134:10
  wire [31:0]  inst = _T_447[95:64] & _T_451[31:0] | buf_data & ~(_T_451[31:0]);	// IBuf.scala:36:16, :76:{51,92}, :77:{21,30,41,43}, :127:10, Package.scala:44:13
  wire [3:0]   _T_456 = 4'h1 << (io_imem_valid ? nIC : 2'h0) + _GEN_2;	// IBuf.scala:43:124, :44:25, :45:{19,49}, OneHot.scala:47:11
  wire [1:0]   valid = _T_456[1:0] - 2'h1;	// IBuf.scala:79:33, OneHot.scala:47:11
  wire [1:0]   bufMask = (2'h1 << _GEN_2) - 2'h1;	// IBuf.scala:44:25, :80:37, :99:81, OneHot.scala:47:11
  wire [1:0]   xcpt_if = valid & ((buf_xcpt_if ? bufMask : 2'h0) | (io_imem_bits_xcpt_if ? ~bufMask : 2'h0));	// IBuf.scala:36:16, :79:33, :80:37, :81:{23,29,61,66,89}
  wire [1:0]   ic_replay = valid & ((buf_replay ? bufMask : 2'h0) | (io_imem_bits_replay ? ~bufMask : 2'h0));	// IBuf.scala:36:16, :79:33, :80:37, :81:89, :82:{25,31,62,67}
  wire [3:0]   _T_493 = 4'h1 << _GEN_0 + _GEN_2 - _GEN_1;	// IBuf.scala:43:{100,124}, :44:25, :85:{87,100}, OneHot.scala:47:11
  wire [1:0]   _T_498 = (ibufBTBHit ? 2'h1 << ibufBTBResp_bridx : 2'h0) & bufMask;	// IBuf.scala:37:23, :38:24, :80:37, :83:27, :86:35, :99:81, OneHot.scala:47:11
  wire [1:0]   _GEN_3 = _T_498 | (io_imem_bits_btb_valid ? _T_493[1:0] : 2'h0) & ~bufMask;	// IBuf.scala:80:37, :81:89, :85:25, :86:{35,45,60}, OneHot.scala:47:11
  wire         _T_527 = ic_replay[0] | ~_RVCExpander_io_rvc & (_GEN_3[0] | ic_replay[1]);	// IBuf.scala:82:25, :86:45, :93:21, :99:{29,33,37,49,63,67,79}
  wire         _T_543 = valid[0] & (_RVCExpander_io_rvc | valid[1] | xcpt_if[1] | _T_527);	// IBuf.scala:79:33, :81:23, :93:21, :99:33, :100:{32,36,59,75,81}
  assign _GEN = io_inst_0_ready & _T_543 ? (_RVCExpander_io_rvc ? 2'h1 : 2'h2) : 2'h0;	// Decoupled.scala:30:37, IBuf.scala:43:16, :93:21, :99:81, :100:36, :107:{32,41,47}
  always @(posedge clock) begin
    automatic logic _T_411;	// IBuf.scala:56:66
    _T_411 = io_imem_valid & _T_402 & nICReady < nIC & ~(_T_392[1]);	// IBuf.scala:43:124, :44:25, :46:{27,65,72}, :56:{60,66,71}
    if (reset)
      nBufValid <= 1'h0;	// IBuf.scala:35:47
    else
      nBufValid <= ~io_kill & (_T_411 ? _T_392[0] : ~_T_402 & nBufValid - _GEN[0]);	// IBuf.scala:35:47, :46:{27,72}, :49:{15,21,62}, :56:{66,90}, :58:17, :68:20, :69:17, :107:{32,41}
    if (_T_411) begin	// IBuf.scala:56:66
      automatic logic [63:0] _T_421 = {{2{io_imem_bits_data[31:16]}}, io_imem_bits_data} >> {58'h0, _GEN_1 + nICReady, 4'h0};	// Cat.scala:30:58, IBuf.scala:43:124, :44:25, :57:30, :85:25, :133:58, :134:10
      buf_pc <= io_imem_bits_pc & 40'hFFFFFFFFFC | io_imem_bits_pc + {37'h0, nICReady, 1'h0} & 40'h3;	// IBuf.scala:35:47, :36:16, :44:25, :61:{33,35,47,66,107}
      buf_data <= {16'h0, _T_421[15:0]};	// IBuf.scala:36:16, :60:{16,59}, :134:10
      buf_xcpt_if <= io_imem_bits_xcpt_if;	// IBuf.scala:36:16
      buf_replay <= io_imem_bits_replay;	// IBuf.scala:36:16
      ibufBTBHit <= io_imem_bits_btb_valid;	// IBuf.scala:37:23
    end
    if (_T_411 & io_imem_bits_btb_valid) begin	// IBuf.scala:38:24, :56:{66,90}, :63:37
      ibufBTBResp_taken <= io_imem_bits_btb_bits_taken;	// IBuf.scala:38:24
      ibufBTBResp_mask <= io_imem_bits_btb_bits_mask;	// IBuf.scala:38:24
      ibufBTBResp_bridx <= io_imem_bits_btb_bits_bridx + nICReady[0];	// IBuf.scala:38:24, :44:25, :46:72, :65:58
      ibufBTBResp_target <= io_imem_bits_btb_bits_target;	// IBuf.scala:38:24
      ibufBTBResp_entry <= io_imem_bits_btb_bits_entry;	// IBuf.scala:38:24
      ibufBTBResp_bht_history <= io_imem_bits_btb_bits_bht_history;	// IBuf.scala:38:24
      ibufBTBResp_bht_value <= io_imem_bits_btb_bits_bht_value;	// IBuf.scala:38:24
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// IBuf.scala:84:9
      automatic logic _T_485 = ~io_imem_bits_btb_valid | io_imem_bits_btb_bits_bridx >= io_imem_bits_pc[1] | reset;	// IBuf.scala:84:{9,10,65}, Package.scala:44:13
      if ((`PRINTF_COND_) & ~_T_485)	// IBuf.scala:84:9
        $fwrite(32'h80000002, "Assertion failed\n    at IBuf.scala:84 assert(!io.imem.bits.btb.valid || io.imem.bits.btb.bits.bridx >= pcWordBits)\n");	// IBuf.scala:84:9
      if ((`STOP_COND_) & ~_T_485)	// IBuf.scala:84:9
        $fatal;	// IBuf.scala:84:9
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        nBufValid = _RANDOM_0[0];	// IBuf.scala:35:47
        buf_pc = {_RANDOM_1[31:28], _RANDOM_2, _RANDOM_3[3:0]};	// IBuf.scala:36:16
        buf_data = {_RANDOM_3[31:4], _RANDOM_4[3:0]};	// IBuf.scala:36:16
        buf_xcpt_if = _RANDOM_4[6];	// IBuf.scala:36:16
        buf_replay = _RANDOM_4[7];	// IBuf.scala:36:16
        ibufBTBHit = _RANDOM_4[8];	// IBuf.scala:36:16, :37:23
        ibufBTBResp_taken = _RANDOM_4[9];	// IBuf.scala:36:16, :38:24
        ibufBTBResp_mask = _RANDOM_4[11:10];	// IBuf.scala:36:16, :38:24
        ibufBTBResp_bridx = _RANDOM_4[12];	// IBuf.scala:36:16, :38:24
        ibufBTBResp_target = {_RANDOM_4[31:13], _RANDOM_5[19:0]};	// IBuf.scala:36:16, :38:24
        ibufBTBResp_entry = _RANDOM_5[25:20];	// IBuf.scala:38:24
        ibufBTBResp_bht_history = {_RANDOM_5[31:26], _RANDOM_6[0]};	// IBuf.scala:38:24
        ibufBTBResp_bht_value = _RANDOM_6[2:1];	// IBuf.scala:38:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  RVCExpander RVCExpander (	// IBuf.scala:93:21
    .io_in       (inst),	// IBuf.scala:77:30
    .io_out_bits (io_inst_0_bits_inst_bits),
    .io_out_rd   (io_inst_0_bits_inst_rd),
    .io_out_rs1  (io_inst_0_bits_inst_rs1),
    .io_out_rs2  (io_inst_0_bits_inst_rs2),
    .io_out_rs3  (io_inst_0_bits_inst_rs3),
    .io_rvc      (_RVCExpander_io_rvc)
  );
  assign io_imem_ready = _T_402 & (nICReady >= nIC | ~(_T_392[1]));	// IBuf.scala:43:124, :44:25, :46:{27,40,53,60,65,72}
  assign io_pc = nBufValid ? buf_pc : io_imem_bits_pc;	// IBuf.scala:35:47, :36:16, :89:15
  assign io_btb_resp_taken = (|_T_498) ? ibufBTBResp_taken : io_imem_bits_btb_bits_taken;	// IBuf.scala:38:24, :86:35, :88:{21,49}
  assign io_btb_resp_mask = (|_T_498) ? ibufBTBResp_mask : io_imem_bits_btb_bits_mask;	// IBuf.scala:38:24, :86:35, :88:{21,49}
  assign io_btb_resp_bridx = (|_T_498) ? ibufBTBResp_bridx : io_imem_bits_btb_bits_bridx;	// IBuf.scala:38:24, :86:35, :88:{21,49}
  assign io_btb_resp_target = (|_T_498) ? ibufBTBResp_target : io_imem_bits_btb_bits_target;	// IBuf.scala:38:24, :86:35, :88:{21,49}
  assign io_btb_resp_entry = (|_T_498) ? ibufBTBResp_entry : io_imem_bits_btb_bits_entry;	// IBuf.scala:38:24, :86:35, :88:{21,49}
  assign io_btb_resp_bht_history = (|_T_498) ? ibufBTBResp_bht_history : io_imem_bits_btb_bits_bht_history;	// IBuf.scala:38:24, :86:35, :88:{21,49}
  assign io_btb_resp_bht_value = (|_T_498) ? ibufBTBResp_bht_value : io_imem_bits_btb_bits_bht_value;	// IBuf.scala:38:24, :86:35, :88:{21,49}
  assign io_inst_0_valid = _T_543;	// IBuf.scala:100:36
  assign io_inst_0_bits_pf0 = xcpt_if[0];	// IBuf.scala:81:23, :101:37
  assign io_inst_0_bits_pf1 = ~_RVCExpander_io_rvc & xcpt_if[1];	// IBuf.scala:81:23, :93:21, :99:37, :100:75, :102:42
  assign io_inst_0_bits_replay = _T_527;	// IBuf.scala:99:33
  assign io_inst_0_bits_btb_hit = _GEN_3[0] | ~_RVCExpander_io_rvc & _GEN_3[1];	// IBuf.scala:86:45, :93:21, :99:37, :104:{44,48,64,77}
  assign io_inst_0_bits_rvc = _RVCExpander_io_rvc;	// IBuf.scala:93:21
  assign io_inst_0_bits_raw = inst;	// IBuf.scala:77:30
endmodule

module CSRFile(
  input         clock,
                reset,
                io_interrupts_debug,
                io_interrupts_mtip,
                io_interrupts_msip,
                io_interrupts_meip,
                io_interrupts_seip,
  input  [63:0] io_hartid,
  input  [11:0] io_rw_addr,
  input  [2:0]  io_rw_cmd,
  input  [63:0] io_rw_wdata,
  input  [11:0] io_decode_csr,
  input         io_exception,
                io_retire,
  input  [63:0] io_cause,
  input  [39:0] io_pc,
                io_badaddr,
  input         io_fcsr_flags_valid,
  input  [4:0]  io_fcsr_flags_bits,
  input         io_rocc_interrupt,
  output [63:0] io_rw_rdata,
  output        io_decode_fp_illegal,
                io_decode_read_illegal,
                io_decode_write_illegal,
                io_decode_write_flush,
                io_decode_system_illegal,
                io_csr_stall,
                io_eret,
                io_singleStep,
                io_status_debug,
  output [31:0] io_status_isa,
  output [1:0]  io_status_prv,
  output        io_status_sd,
                io_status_tsr,
                io_status_tw,
                io_status_tvm,
                io_status_mxr,
                io_status_pum,
                io_status_mprv,
  output [1:0]  io_status_fs,
                io_status_mpp,
  output        io_status_spp,
                io_status_mpie,
                io_status_spie,
                io_status_mie,
                io_status_sie,
  output [3:0]  io_ptbr_mode,
  output [43:0] io_ptbr_ppn,
  output [39:0] io_evec,
  output        io_fatc,
  output [63:0] io_time,
  output [2:0]  io_fcsr_rm,
  output        io_interrupt,
  output [63:0] io_interrupt_cause,
  output        io_bp_0_control_action,
  output [1:0]  io_bp_0_control_tmatch,
  output        io_bp_0_control_m,
                io_bp_0_control_s,
                io_bp_0_control_u,
                io_bp_0_control_x,
                io_bp_0_control_w,
                io_bp_0_control_r,
  output [38:0] io_bp_0_address);

  wire        _T_2334;	// CSR.scala:451:34
  reg  [1:0]  reg_mstatus_prv;	// CSR.scala:197:24
  reg         reg_mstatus_tsr;	// CSR.scala:197:24
  reg         reg_mstatus_tw;	// CSR.scala:197:24
  reg         reg_mstatus_tvm;	// CSR.scala:197:24
  reg         reg_mstatus_mxr;	// CSR.scala:197:24
  reg         reg_mstatus_pum;	// CSR.scala:197:24
  reg         reg_mstatus_mprv;	// CSR.scala:197:24
  reg  [1:0]  reg_mstatus_fs;	// CSR.scala:197:24
  reg  [1:0]  reg_mstatus_mpp;	// CSR.scala:197:24
  reg         reg_mstatus_spp;	// CSR.scala:197:24
  reg         reg_mstatus_mpie;	// CSR.scala:197:24
  reg         reg_mstatus_spie;	// CSR.scala:197:24
  reg         reg_mstatus_mie;	// CSR.scala:197:24
  reg         reg_mstatus_sie;	// CSR.scala:197:24
  reg         reg_dcsr_ebreakm;	// CSR.scala:205:21
  reg         reg_dcsr_ebreaks;	// CSR.scala:205:21
  reg         reg_dcsr_ebreaku;	// CSR.scala:205:21
  reg  [2:0]  reg_dcsr_cause;	// CSR.scala:205:21
  reg         reg_dcsr_debugint;	// CSR.scala:205:21
  reg         reg_dcsr_halt;	// CSR.scala:205:21
  reg         reg_dcsr_step;	// CSR.scala:205:21
  reg  [1:0]  reg_dcsr_prv;	// CSR.scala:205:21
  reg         reg_debug;	// CSR.scala:232:22
  wire [2:0]  effective_prv = {reg_debug, reg_mstatus_prv};	// CSR.scala:197:24, :232:22, Cat.scala:30:58
  reg  [39:0] reg_dpc;	// CSR.scala:234:20
  reg  [63:0] reg_dscratch;	// CSR.scala:235:25
  reg         reg_singleStepped;	// CSR.scala:236:30
  reg         reg_bp_0_control_dmode;	// CSR.scala:239:19
  reg         reg_bp_0_control_action;	// CSR.scala:239:19
  reg  [1:0]  reg_bp_0_control_tmatch;	// CSR.scala:239:19
  reg         reg_bp_0_control_m;	// CSR.scala:239:19
  reg         reg_bp_0_control_s;	// CSR.scala:239:19
  reg         reg_bp_0_control_u;	// CSR.scala:239:19
  reg         reg_bp_0_control_x;	// CSR.scala:239:19
  reg         reg_bp_0_control_w;	// CSR.scala:239:19
  reg         reg_bp_0_control_r;	// CSR.scala:239:19
  reg  [38:0] reg_bp_0_address;	// CSR.scala:239:19
  reg  [63:0] reg_mie;	// CSR.scala:241:20
  reg  [63:0] reg_mideleg;	// CSR.scala:242:24
  reg  [63:0] reg_medeleg;	// CSR.scala:243:24
  reg         reg_mip_meip;	// CSR.scala:244:20
  reg         reg_mip_seip;	// CSR.scala:244:20
  reg         reg_mip_mtip;	// CSR.scala:244:20
  reg         reg_mip_stip;	// CSR.scala:244:20
  reg         reg_mip_msip;	// CSR.scala:244:20
  reg         reg_mip_ssip;	// CSR.scala:244:20
  reg  [39:0] reg_mepc;	// CSR.scala:245:21
  reg  [63:0] reg_mcause;	// CSR.scala:246:23
  reg  [39:0] reg_mbadaddr;	// CSR.scala:247:25
  reg  [63:0] reg_mscratch;	// CSR.scala:248:25
  reg  [31:0] reg_mtvec;	// CSR.scala:251:27
  reg  [31:0] reg_mcounteren;	// CSR.scala:254:27
  reg  [31:0] reg_scounteren;	// CSR.scala:255:27
  reg  [39:0] reg_sepc;	// CSR.scala:258:21
  reg  [63:0] reg_scause;	// CSR.scala:259:23
  reg  [39:0] reg_sbadaddr;	// CSR.scala:260:25
  reg  [63:0] reg_sscratch;	// CSR.scala:261:25
  reg  [38:0] reg_stvec;	// CSR.scala:262:22
  reg  [3:0]  reg_sptbr_mode;	// CSR.scala:263:22
  reg  [43:0] reg_sptbr_ppn;	// CSR.scala:263:22
  reg         reg_wfi;	// CSR.scala:264:20
  reg  [4:0]  reg_fflags;	// CSR.scala:266:23
  reg  [2:0]  reg_frm;	// CSR.scala:267:20
  reg  [5:0]  _T_931;	// Counters.scala:47:37
  reg  [57:0] _T_934;	// Counters.scala:52:27
  wire [63:0] _T_939 = {_T_934, _T_931};	// Cat.scala:30:58, Counters.scala:47:37, :52:27
  reg  [5:0]  _T_942;	// Counters.scala:47:37
  reg  [57:0] _T_945;	// Counters.scala:52:27
  wire [63:0] _T_950 = {_T_945, _T_942};	// Cat.scala:30:58, Counters.scala:47:37, :52:27
  wire        _T_996 = reg_mstatus_prv == 2'h1;	// CSR.scala:197:24, :203:24, :274:71
  wire [63:0] _GEN = {52'h0, reg_mip_meip, 1'h0, reg_mip_seip, 1'h0, reg_mip_mtip, 1'h0, reg_mip_stip, 1'h0,
                reg_mip_msip, 1'h0, reg_mip_ssip, 1'h0};	// CSR.scala:244:20, :280:37
  wire [63:0] pending_interrupts = _GEN & reg_mie;	// CSR.scala:241:20, :280:37
  wire [63:0] m_interrupts = ~(reg_mstatus_prv[1]) | (&reg_mstatus_prv) & reg_mstatus_mie ? pending_interrupts &
                ~reg_mideleg : 64'h0;	// CSR.scala:197:24, :242:24, :280:37, :281:{25,42,51,71,81,121,123}
  wire [63:0] all_interrupts = m_interrupts | ({m_interrupts[11], m_interrupts[9], m_interrupts[7], m_interrupts[5],
                m_interrupts[3], m_interrupts[1]} == 6'h0 & (reg_mstatus_prv == 2'h0 | _T_996 &
                reg_mstatus_sie) ? pending_interrupts & reg_mideleg : 64'h0);	// CSR.scala:197:24, :242:24, :274:71, :280:37, :281:25, :282:{25,39,45,65,73,103,144}, :283:37, Counters.scala:47:37
  wire        _T_1208 = reg_dcsr_debugint & ~reg_debug;	// CSR.scala:205:21, :232:22, :286:41, :291:47
  reg  [63:0] reg_misa;	// CSR.scala:307:21
  wire [63:0] read_mstatus = {&reg_mstatus_fs, 40'h1400, reg_mstatus_tsr, reg_mstatus_tw, reg_mstatus_tvm,
                reg_mstatus_mxr, reg_mstatus_pum, reg_mstatus_mprv, 2'h0, reg_mstatus_fs, reg_mstatus_mpp,
                2'h0, reg_mstatus_spp, reg_mstatus_mpie, 1'h0, reg_mstatus_spie, 1'h0, reg_mstatus_mie,
                1'h0, reg_mstatus_sie, 1'h0};	// CSR.scala:197:24, :308:{38,40}, :453:32
  wire        _T_1469 = io_rw_addr == 12'h7A1;	// CSR.scala:405:73
  wire        _T_1471 = io_rw_addr == 12'h7A2;	// CSR.scala:405:73
  wire        _T_1479 = io_rw_addr == 12'hB00;	// CSR.scala:405:73
  wire        _T_1481 = io_rw_addr == 12'hB02;	// CSR.scala:405:73
  wire        _T_1483 = io_rw_addr == 12'h301;	// CSR.scala:405:73
  wire        _T_1485 = io_rw_addr == 12'h300;	// CSR.scala:405:73
  wire        _T_1487 = io_rw_addr == 12'h305;	// CSR.scala:405:73
  wire        _T_1489 = io_rw_addr == 12'h344;	// CSR.scala:405:73
  wire        _T_1491 = io_rw_addr == 12'h304;	// CSR.scala:405:73
  wire        _T_1493 = io_rw_addr == 12'h303;	// CSR.scala:405:73
  wire        _T_1495 = io_rw_addr == 12'h302;	// CSR.scala:405:73
  wire        _T_1497 = io_rw_addr == 12'h340;	// CSR.scala:405:73
  wire        _T_1499 = io_rw_addr == 12'h341;	// CSR.scala:405:73
  wire        _T_1501 = io_rw_addr == 12'h343;	// CSR.scala:405:73
  wire        _T_1503 = io_rw_addr == 12'h342;	// CSR.scala:405:73
  wire        _T_1507 = io_rw_addr == 12'h7B0;	// CSR.scala:405:73
  wire        _T_1509 = io_rw_addr == 12'h7B1;	// CSR.scala:405:73
  wire        _T_1511 = io_rw_addr == 12'h7B2;	// CSR.scala:405:73
  wire        _T_1513 = io_rw_addr == 12'h1;	// CSR.scala:405:73
  wire        _T_1515 = io_rw_addr == 12'h2;	// CSR.scala:405:73
  wire        _T_1517 = io_rw_addr == 12'h3;	// CSR.scala:405:73
  wire        _T_1693 = io_rw_addr == 12'h100;	// CSR.scala:405:73
  wire        _T_1695 = io_rw_addr == 12'h144;	// CSR.scala:405:73
  wire        _T_1697 = io_rw_addr == 12'h104;	// CSR.scala:405:73
  wire        _T_1699 = io_rw_addr == 12'h140;	// CSR.scala:405:73
  wire        _T_1701 = io_rw_addr == 12'h142;	// CSR.scala:405:73
  wire        _T_1703 = io_rw_addr == 12'h143;	// CSR.scala:405:73
  wire        _T_1705 = io_rw_addr == 12'h180;	// CSR.scala:405:73
  wire        _T_1707 = io_rw_addr == 12'h141;	// CSR.scala:405:73
  wire        _T_1709 = io_rw_addr == 12'h105;	// CSR.scala:405:73
  wire        _T_1711 = io_rw_addr == 12'h106;	// CSR.scala:405:73
  wire        _T_1713 = io_rw_addr == 12'h306;	// CSR.scala:405:73
  wire        system_insn = io_rw_cmd == 3'h4;	// CSR.scala:409:31, Mux.scala:31:69
  wire        insn_call = system_insn & ~(io_rw_addr[5]) & io_rw_addr[2:0] == 3'h0;	// CSR.scala:371:57, :409:31, :410:37, :411:28, :412:{34,44,53}
  wire        insn_break = system_insn & io_rw_addr[2:0] == 3'h1;	// CSR.scala:409:31, :410:37, :413:{32,41}, Package.scala:7:47
  wire        insn_ret = system_insn & io_rw_addr[2:0] == 3'h2;	// CSR.scala:409:31, :410:37, :414:{30,39}, Package.scala:7:47
  wire [1:0]  _GEN_0 = {reg_debug, reg_mstatus_prv[1]};	// CSR.scala:197:24, :232:22, :281:42, :418:51
  wire        allow_sfence_vma = (|_GEN_0) | ~reg_mstatus_tvm;	// CSR.scala:197:24, :418:51, :419:{66,69}
  wire        _T_1764 = reg_mstatus_fs == 2'h0 | ~(reg_misa[5]);	// CSR.scala:197:24, :307:21, :421:{40,46,49,58}
  wire [2:0]  _GEN_1 = {1'h0, io_decode_csr[9:8]};	// CSR.scala:423:{43,58}
  wire        _T_2183 = io_decode_csr == 12'h7B0;	// CSR.scala:405:73, :424:42
  wire        _T_2185 = io_decode_csr == 12'h7B1;	// CSR.scala:405:73, :424:42
  wire        _T_2187 = io_decode_csr == 12'h7B2;	// CSR.scala:405:73, :424:42
  wire        _T_2194 = io_decode_csr == 12'h1;	// CSR.scala:405:73, :424:42
  wire        _T_2196 = io_decode_csr == 12'h2;	// CSR.scala:405:73, :424:42
  wire        _T_2198 = io_decode_csr == 12'h3;	// CSR.scala:405:73, :424:42
  wire        _T_2154 = io_decode_csr == 12'h180;	// CSR.scala:405:73, :424:42
  wire [31:0] _T_2174 = (reg_mcounteren & (_T_996 ? 32'h7 : reg_scounteren)) >> io_decode_csr;	// CSR.scala:254:27, :255:27, :274:{33,38,71}, :426:171
  wire [3:0]  _GEN_2 = {2'h0, reg_mstatus_prv};	// CSR.scala:197:24, :437:36
  wire [63:0] _GEN_3 = {60'h0, _GEN_2 - 4'h8};	// CSR.scala:437:{8,36}
  wire [63:0] cause = insn_call ? _GEN_3 : insn_break ? 64'h3 : io_cause;	// CSR.scala:412:44, :413:32, :437:8, :438:14
  wire        _T_2300 = cause[5:0] == 6'hD;	// CSR.scala:437:8, :439:25, :440:53, Mux.scala:31:69
  wire        causeIsDebugInt = cause[63] & _T_2300;	// CSR.scala:437:8, :440:{30,39,53}
  wire        causeIsDebugTrigger = ~(cause[63]) & _T_2300;	// CSR.scala:437:8, :440:{30,53}, :441:{29,44}
  wire [3:0]  _T_2308 = {reg_dcsr_ebreakm, 1'h0, reg_dcsr_ebreaks, reg_dcsr_ebreaku} >> _GEN_2;	// CSR.scala:205:21, :437:36, :442:134, Cat.scala:30:58
  wire        trapToDebug = reg_singleStepped | causeIsDebugInt | causeIsDebugTrigger | ~(cause[63]) & insn_break &
                _T_2308[0] | reg_debug;	// CSR.scala:232:22, :236:30, :413:32, :437:8, :440:{30,39}, :441:44, :442:{27,56,134}, :443:123
  wire [63:0] _GEN_4 = {58'h0, cause[5:0]};	// CSR.scala:437:8, :439:25, :444:93, Counters.scala:52:27
  wire [63:0] _T_2320 = reg_mideleg >> _GEN_4;	// CSR.scala:242:24, :444:93
  wire [63:0] _T_2322 = reg_medeleg >> _GEN_4;	// CSR.scala:243:24, :444:{93,118}
  wire        delegate = ~(reg_mstatus_prv[1]) & (cause[63] ? _T_2320[0] : _T_2322[0]);	// CSR.scala:197:24, :281:42, :437:8, :440:30, :444:{60,66,93,118}
  wire [39:0] tvec = trapToDebug ? {36'h80, reg_debug, 3'h0} : delegate ? {reg_stvec[38], reg_stvec} : {8'h0,
                reg_mtvec};	// CSR.scala:232:22, :251:27, :262:22, :371:57, :443:123, :444:60, :446:{17,45}, Cat.scala:30:58, Package.scala:40:38
  wire        _T_2344 = insn_call | insn_break;	// CSR.scala:412:44, :413:32, :450:24
  assign _T_2334 = reg_dcsr_step & ~reg_debug;	// CSR.scala:205:21, :232:22, :286:41, :451:34
  wire        exception = _T_2344 | io_exception;	// CSR.scala:450:24, :461:43
  wire        _T_2423 = ~trapToDebug & delegate;	// CSR.scala:443:123, :444:60, :481:24, :486:27
  wire        _T_2438 = ~trapToDebug & ~delegate;	// CSR.scala:443:123, :444:60, :481:24, :486:27
  wire [1:0]  _GEN_5 = exception ? (_T_2438 ? 2'h3 : _T_2423 ? 2'h1 : reg_mstatus_prv) : reg_mstatus_prv;	// CSR.scala:195:21, :197:24, :203:24, :461:43, :473:20, :486:27, :493:15, :494:17, :501:15
  wire [1:0]  _GEN_6 = {1'h0, reg_mstatus_spp};	// CSR.scala:197:24, :473:20, :506:44, :510:15
  wire        _T_2462 = io_rw_addr[9] & io_rw_addr[10];	// CSR.scala:506:39, :512:{47,53}
  wire        _T_2468 = io_rw_addr[9] & ~(io_rw_addr[10]);	// CSR.scala:506:39, :512:{47,53}
  wire [31:0] _T_2503 = _T_1487 ? reg_mtvec : 32'h0;	// CSR.scala:251:27, :405:73, Mux.scala:19:72
  wire [31:0] _T_2523 = _T_1507 ? {16'h4000, reg_dcsr_ebreakm, 1'h0, reg_dcsr_ebreaks, reg_dcsr_ebreaku, 3'h0,
                reg_dcsr_cause, reg_dcsr_debugint, 1'h0, reg_dcsr_halt, reg_dcsr_step, reg_dcsr_prv} :
                32'h0;	// CSR.scala:205:21, :251:27, :333:27, :371:57, :405:73, Mux.scala:19:72
  wire [39:0] _T_2525 = _T_1509 ? reg_dpc : 40'h0;	// CSR.scala:234:20, :405:73, Mux.scala:19:72
  wire [7:0]  _T_2533 = _T_1517 ? {reg_frm, reg_fflags} : 8'h0;	// CSR.scala:266:23, :267:20, :405:73, Cat.scala:30:58, Mux.scala:19:72
  wire [31:0] _T_2727 = _T_1711 ? reg_scounteren : 32'h0;	// CSR.scala:251:27, :255:27, :405:73, Mux.scala:19:72
  wire [31:0] _T_2729 = _T_1713 ? reg_mcounteren : 32'h0;	// CSR.scala:251:27, :254:27, :405:73, Mux.scala:19:72
  wire [12:0] _GEN_7 = _T_2503[12:0] | (_T_1489 ? {1'h0, reg_mip_meip, 1'h0, reg_mip_seip, 1'h0, reg_mip_mtip,
                1'h0, reg_mip_stip, 1'h0, reg_mip_msip, 1'h0, reg_mip_ssip, 1'h0} : 13'h0) | _T_2523[12:0]
                | _T_2525[12:0];	// CSR.scala:244:20, :278:22, :405:73, Mux.scala:19:72
  wire [4:0]  _GEN_8 = _GEN_7[4:0] | (_T_1513 ? reg_fflags : 5'h0);	// CSR.scala:266:23, :405:73, Mux.scala:19:72
  wire [63:0] _T_2859 = (_T_1469 ? {4'h2, reg_bp_0_control_dmode, 46'h40000000000, reg_bp_0_control_action, 3'h0,
                reg_bp_0_control_tmatch, reg_bp_0_control_m, 1'h0, reg_bp_0_control_s, reg_bp_0_control_u,
                reg_bp_0_control_x, reg_bp_0_control_w, reg_bp_0_control_r} : 64'h0) | (_T_1471 ?
                {{25{reg_bp_0_address[38]}}, reg_bp_0_address} : 64'h0) | (_T_1479 ? _T_950 : 64'h0) |
                (_T_1481 ? _T_939 : 64'h0) | (_T_1483 ? reg_misa : 64'h0) | (_T_1485 ? read_mstatus :
                64'h0) | (_T_1491 ? reg_mie : 64'h0) | (_T_1493 ? reg_mideleg : 64'h0) | (_T_1495 ?
                reg_medeleg : 64'h0) | (_T_1497 ? reg_mscratch : 64'h0) | (_T_1499 ? {{24{reg_mepc[39]}},
                reg_mepc} : 64'h0) | (_T_1501 ? {{24{reg_mbadaddr[39]}}, reg_mbadaddr} : 64'h0) | (_T_1503
                ? reg_mcause : 64'h0) | (io_rw_addr == 12'hF14 ? io_hartid : 64'h0) | (_T_1511 ?
                reg_dscratch : 64'h0) | (_T_1693 ? {&reg_mstatus_fs, 40'h1400, reg_mstatus_tsr,
                reg_mstatus_tw, reg_mstatus_tvm, reg_mstatus_mxr, reg_mstatus_pum, 3'h0, reg_mstatus_fs,
                4'h0, reg_mstatus_spp, 2'h0, reg_mstatus_spie, 3'h0, reg_mstatus_sie, 1'h0} : 64'h0) |
                (_T_1695 ? _GEN & reg_mideleg : 64'h0) | (_T_1697 ? reg_mie & reg_mideleg : 64'h0) |
                (_T_1699 ? reg_sscratch : 64'h0) | (_T_1701 ? reg_scause : 64'h0) | (_T_1703 ?
                {{24{reg_sbadaddr[39]}}, reg_sbadaddr} : 64'h0) | (_T_1705 ? {reg_sptbr_mode, 16'h0,
                reg_sptbr_ppn} : 64'h0) | (_T_1707 ? {{24{reg_sepc[39]}}, reg_sepc} : 64'h0) | (_T_1709 ?
                {{25{reg_stvec[38]}}, reg_stvec} : 64'h0) | {24'h0, _T_2525[39:32], _T_2503[31:13] |
                _T_2523[31:13] | _T_2525[31:13] | _T_2727[31:13] | _T_2729[31:13], _GEN_7[12:8] |
                _T_2727[12:8] | _T_2729[12:8], _GEN_7[7:5] | _T_2533[7:5] | _T_2727[7:5] | _T_2729[7:5],
                _GEN_8[4:3] | _T_2533[4:3] | _T_2727[4:3] | _T_2729[4:3], _GEN_8[2:0] | (_T_1515 ? reg_frm
                : 3'h0) | _T_2533[2:0] | _T_2727[2:0] | _T_2729[2:0]} | (io_rw_addr == 12'hC00 ? _T_950 :
                64'h0) | (io_rw_addr == 12'hC02 ? _T_939 : 64'h0);	// Bitwise.scala:71:12, CSR.scala:197:24, :235:25, :239:19, :241:20, :242:24, :243:24, :245:21, :246:23, :247:25, :248:25, :258:21, :259:23, :260:25, :261:25, :262:22, :263:22, :267:20, :280:37, :281:25, :307:21, :308:{38,40}, :312:48, :360:28, :361:29, :371:{57,60}, :377:45, :405:73, :453:32, :622:54, :672:18, :677:15, Cat.scala:30:58, Mux.scala:19:72, Package.scala:40:38
  always @(posedge clock) begin
    automatic logic        _T_2866 = io_rw_cmd == 3'h2;	// Package.scala:7:47
    automatic logic        _T_2867 = io_rw_cmd == 3'h3;	// Package.scala:7:47
    automatic logic [63:0] wdata;	// CSR.scala:406:90
    automatic logic [39:0] _T_2389;	// CSR.scala:474:24
    automatic logic        _T_2412;	// Package.scala:7:62
    automatic logic        _GEN_9;	// CSR.scala:232:22, :473:20, :481:24
    automatic logic        _GEN_10;	// CSR.scala:258:21, :473:20, :486:27
    automatic logic        _GEN_11;	// CSR.scala:245:21, :473:20, :494:17
    automatic logic        _T_2870;	// Package.scala:7:62
    automatic logic        _T_3363;	// CSR.scala:622:30
    automatic logic        _T_3365;	// CSR.scala:623:30
    automatic logic [31:0] _GEN_12;	// CSR.scala:637:61
    automatic logic        _T_3428;	// CSR.scala:646:31
    automatic logic        _GEN_13;	// CSR.scala:239:19, :536:49, :646:45
    wdata = ((_T_2866 | _T_2867 ? _T_2859 : 64'h0) | io_rw_wdata) & ~(_T_2867 ? io_rw_wdata : 64'h0);	// CSR.scala:281:25, :406:{19,75,90}, :407:{15,19}, Mux.scala:19:72, Package.scala:7:{47,62}
    _T_2389 = ~io_pc | 40'h1;	// CSR.scala:474:{17,24}
    _T_2412 = cause == 64'h3 | cause == 64'h4 | cause == 64'h6 | cause == 64'h0 | cause == 64'h5 | cause
                                == 64'h7 | cause == 64'h1;	// CSR.scala:281:25, :437:8, :438:14, Package.scala:7:{47,62}
    _GEN_9 = exception & trapToDebug;	// CSR.scala:232:22, :443:123, :461:43, :473:20, :481:24
    _GEN_10 = exception & _T_2423;	// CSR.scala:258:21, :461:43, :473:20, :486:27
    _GEN_11 = exception & _T_2438;	// CSR.scala:245:21, :461:43, :473:20, :486:27, :494:17
    _T_2870 = _T_2866 | _T_2867 | io_rw_cmd == 3'h1;	// Package.scala:7:{47,62}
    _T_3363 = wdata[63:60] == 4'h0;	// CSR.scala:406:90, :620:44, :622:{30,54}
    _T_3365 = wdata[63:60] == 4'h8;	// CSR.scala:406:90, :620:44, :623:30, Mux.scala:31:69
    _GEN_12 = {29'h0, wdata[2:0]};	// CSR.scala:406:90, :589:50, :637:61
    _T_3428 = ~reg_bp_0_control_dmode | reg_debug;	// CSR.scala:232:22, :239:19, :646:{13,31}
    _GEN_13 = _T_2870 & _T_3428 & _T_1469;	// CSR.scala:239:19, :405:73, :536:49, :646:{31,45}, Package.scala:7:62
    if (reset) begin
      reg_mstatus_prv <= 2'h3;	// CSR.scala:195:21, :197:24
      reg_mstatus_tsr <= 1'h0;	// CSR.scala:197:24
      reg_mstatus_tw <= 1'h0;	// CSR.scala:197:24
      reg_mstatus_tvm <= 1'h0;	// CSR.scala:197:24
      reg_mstatus_mxr <= 1'h0;	// CSR.scala:197:24
      reg_mstatus_pum <= 1'h0;	// CSR.scala:197:24
      reg_mstatus_mprv <= 1'h0;	// CSR.scala:197:24
      reg_mstatus_fs <= 2'h0;	// CSR.scala:197:24
      reg_mstatus_mpp <= 2'h3;	// CSR.scala:195:21, :197:24
      reg_mstatus_spp <= 1'h0;	// CSR.scala:197:24
      reg_mstatus_mpie <= 1'h0;	// CSR.scala:197:24
      reg_mstatus_spie <= 1'h0;	// CSR.scala:197:24
      reg_mstatus_mie <= 1'h0;	// CSR.scala:197:24
      reg_mstatus_sie <= 1'h0;	// CSR.scala:197:24
      reg_dcsr_ebreakm <= 1'h0;	// CSR.scala:205:21
      reg_dcsr_ebreaks <= 1'h0;	// CSR.scala:205:21
      reg_dcsr_ebreaku <= 1'h0;	// CSR.scala:205:21
      reg_dcsr_cause <= 3'h0;	// CSR.scala:205:21, :371:57
      reg_dcsr_debugint <= 1'h0;	// CSR.scala:205:21
      reg_dcsr_halt <= 1'h0;	// CSR.scala:205:21
      reg_dcsr_step <= 1'h0;	// CSR.scala:205:21
      reg_dcsr_prv <= 2'h3;	// CSR.scala:195:21, :205:21
      reg_debug <= 1'h0;	// CSR.scala:232:22
      reg_bp_0_control_dmode <= 1'h0;	// CSR.scala:239:19
      reg_bp_0_control_action <= 1'h0;	// CSR.scala:239:19
      reg_bp_0_control_x <= 1'h0;	// CSR.scala:239:19
      reg_bp_0_control_w <= 1'h0;	// CSR.scala:239:19
      reg_bp_0_control_r <= 1'h0;	// CSR.scala:239:19
      reg_mtvec <= 32'h0;	// CSR.scala:251:27
      reg_wfi <= 1'h0;	// CSR.scala:264:20
      _T_931 <= 6'h0;	// Counters.scala:47:37
      _T_934 <= 58'h0;	// Counters.scala:52:27
      _T_942 <= 6'h0;	// Counters.scala:47:37
      _T_945 <= 58'h0;	// Counters.scala:52:27
      reg_misa <= 64'h800000000014112D;	// CSR.scala:307:21
    end
    else begin
      automatic logic [63:0] _T_2391;	// CSR.scala:475:27
      automatic logic        _GEN_14;	// CSR.scala:197:24, :473:20, :486:27
      automatic logic        _GEN_15;	// CSR.scala:473:20, :506:44, :507:37
      automatic logic        _GEN_16;	// CSR.scala:473:20, :505:19, :506:44
      automatic logic        _GEN_17;	// CSR.scala:473:20, :505:19, :506:44
      automatic logic        _GEN_18;	// CSR.scala:506:44, :516:17, :518:55
      _T_2391 = read_mstatus >> reg_mstatus_prv;	// CSR.scala:197:24, :308:40, :475:27
      _GEN_14 = (~exception | ~_T_2423) & reg_mstatus_sie;	// CSR.scala:197:24, :461:43, :473:20, :486:27, :492:23
      _GEN_15 = io_rw_addr[9] | ~reg_mstatus_spp;	// CSR.scala:197:24, :473:20, :506:{39,44}, :507:37
      _GEN_16 = insn_ret & ~(io_rw_addr[9]) | (_GEN_10 ? _T_2391[0] : reg_mstatus_spie);	// CSR.scala:197:24, :258:21, :414:30, :473:20, :475:27, :486:27, :505:19, :506:{28,39,44}
      _GEN_17 = (~insn_ret | io_rw_addr[9]) & (_GEN_10 ? reg_mstatus_prv[0] : reg_mstatus_spp);	// CSR.scala:197:24, :258:21, :414:30, :473:20, :486:27, :491:23, :505:19, :506:{39,44}
      _GEN_18 = _T_2468 & ~(reg_mstatus_mpp[1]) & reg_mstatus_mpp[0];	// CSR.scala:197:24, :506:44, :512:53, :516:17, :517:{28,33}, :518:{50,55}
      if ((insn_ret ? (_T_2468 ? reg_mstatus_mpp : _T_2462 ? reg_dcsr_prv : io_rw_addr[9] ? _GEN_5 :
                                                _GEN_6) : _GEN_5) == 2'h2)	// CSR.scala:197:24, :205:21, :414:30, :473:20, :494:17, :505:19, :506:{39,44}, :510:15, :512:53, :513:15, :516:17, :521:15, :697:27
        reg_mstatus_prv <= 2'h0;	// CSR.scala:197:24
      else if (insn_ret) begin	// CSR.scala:414:30
        if (_T_2468)	// CSR.scala:512:53
          reg_mstatus_prv <= reg_mstatus_mpp;	// CSR.scala:197:24
        else if (_T_2462)	// CSR.scala:512:53
          reg_mstatus_prv <= reg_dcsr_prv;	// CSR.scala:197:24, :205:21
        else if (io_rw_addr[9]) begin	// CSR.scala:506:39
          if (exception) begin	// CSR.scala:461:43
            if (_T_2438)	// CSR.scala:486:27
              reg_mstatus_prv <= 2'h3;	// CSR.scala:195:21, :197:24
            else if (_T_2423)	// CSR.scala:486:27
              reg_mstatus_prv <= 2'h1;	// CSR.scala:197:24, :203:24
          end
        end
        else	// CSR.scala:506:39
          reg_mstatus_prv <= _GEN_6;	// CSR.scala:197:24, :473:20, :506:44, :510:15
      end
      else if (exception) begin	// CSR.scala:461:43
        if (_T_2438)	// CSR.scala:486:27
          reg_mstatus_prv <= 2'h3;	// CSR.scala:195:21, :197:24
        else if (_T_2423)	// CSR.scala:486:27
          reg_mstatus_prv <= 2'h1;	// CSR.scala:197:24, :203:24
      end
      if (_T_2870 & _T_1485) begin	// CSR.scala:405:73, :505:19, :536:49, :537:39, Package.scala:7:62
        reg_mstatus_tsr <= wdata[22];	// CSR.scala:197:24, :406:90, :538:47
        reg_mstatus_tw <= wdata[21];	// CSR.scala:197:24, :406:90, :538:47
        reg_mstatus_tvm <= wdata[20];	// CSR.scala:197:24, :406:90, :538:47
        reg_mstatus_mxr <= wdata[19];	// CSR.scala:197:24, :406:90, :538:47
        reg_mstatus_mprv <= wdata[17];	// CSR.scala:197:24, :406:90, :538:47
        reg_mstatus_mpp <= wdata[12:11];	// CSR.scala:197:24, :406:90, :538:47
        reg_mstatus_mpie <= wdata[7];	// CSR.scala:197:24, :406:90, :538:47
        reg_mstatus_mie <= wdata[3];	// CSR.scala:197:24, :406:90, :538:47
      end
      else begin	// CSR.scala:505:19, :536:49, :537:39
        automatic logic _GEN_19 = insn_ret & _T_2468;	// CSR.scala:414:30, :473:20, :505:19, :512:53, :516:17
        if (_GEN_19)	// CSR.scala:473:20, :505:19, :516:17
          reg_mstatus_mpp <= 2'h0;	// CSR.scala:197:24
        else if (_GEN_11)	// CSR.scala:245:21, :473:20, :494:17
          reg_mstatus_mpp <= reg_mstatus_prv;	// CSR.scala:197:24
        reg_mstatus_mpie <= _GEN_19 | (_GEN_11 ? _T_2391[0] : reg_mstatus_mpie);	// CSR.scala:197:24, :245:21, :473:20, :475:27, :494:17, :505:19, :516:17
        if (insn_ret & _T_2468 & reg_mstatus_mpp[1])	// CSR.scala:197:24, :414:30, :473:20, :505:19, :512:53, :516:17, :517:28
          reg_mstatus_mie <= reg_mstatus_mpie;	// CSR.scala:197:24
        else	// CSR.scala:473:20, :505:19, :516:17
          reg_mstatus_mie <= (~exception | ~_T_2438) & reg_mstatus_mie;	// CSR.scala:197:24, :461:43, :473:20, :486:27, :494:17, :500:23
      end
      if (_T_2870) begin	// Package.scala:7:62
        if (_T_1693) begin	// CSR.scala:405:73
          reg_mstatus_pum <= wdata[18];	// CSR.scala:197:24, :406:90, :607:49
          reg_mstatus_fs <= {2{|(wdata[14:13])}};	// Bitwise.scala:71:12, CSR.scala:197:24, :406:90, :607:49, :612:50
          reg_mstatus_spp <= wdata[8];	// CSR.scala:197:24, :406:90, :607:49
          reg_mstatus_spie <= wdata[5];	// CSR.scala:197:24, :406:90, :607:49
          reg_mstatus_sie <= wdata[1];	// CSR.scala:197:24, :406:90, :607:49
        end
        else if (_T_1485) begin	// CSR.scala:405:73
          reg_mstatus_pum <= wdata[18];	// CSR.scala:197:24, :406:90, :538:47
          reg_mstatus_fs <= {2{|(wdata[14:13])}};	// Bitwise.scala:71:12, CSR.scala:197:24, :406:90, :538:47, :557:73
          reg_mstatus_spp <= wdata[8];	// CSR.scala:197:24, :406:90, :538:47
          reg_mstatus_spie <= wdata[5];	// CSR.scala:197:24, :406:90, :538:47
          reg_mstatus_sie <= wdata[1];	// CSR.scala:197:24, :406:90, :538:47
        end
        else begin	// CSR.scala:405:73
          reg_mstatus_spp <= _GEN_17;	// CSR.scala:197:24, :473:20, :505:19, :506:44
          reg_mstatus_spie <= _GEN_16;	// CSR.scala:197:24, :473:20, :505:19, :506:44
          if (insn_ret) begin	// CSR.scala:414:30
            if (_GEN_18)	// CSR.scala:506:44, :516:17, :518:55
              reg_mstatus_sie <= reg_mstatus_mpie;	// CSR.scala:197:24
            else if (_GEN_15)	// CSR.scala:473:20, :506:44, :507:37
              reg_mstatus_sie <= _GEN_14;	// CSR.scala:197:24, :473:20, :486:27
            else	// CSR.scala:473:20, :506:44, :507:37
              reg_mstatus_sie <= reg_mstatus_spie;	// CSR.scala:197:24
          end
          else	// CSR.scala:414:30
            reg_mstatus_sie <= _GEN_14;	// CSR.scala:197:24, :473:20, :486:27
        end
      end
      else begin	// Package.scala:7:62
        reg_mstatus_spp <= _GEN_17;	// CSR.scala:197:24, :473:20, :505:19, :506:44
        reg_mstatus_spie <= _GEN_16;	// CSR.scala:197:24, :473:20, :505:19, :506:44
        if (insn_ret) begin	// CSR.scala:414:30
          if (_GEN_18)	// CSR.scala:506:44, :516:17, :518:55
            reg_mstatus_sie <= reg_mstatus_mpie;	// CSR.scala:197:24
          else if (_GEN_15)	// CSR.scala:473:20, :506:44, :507:37
            reg_mstatus_sie <= _GEN_14;	// CSR.scala:197:24, :473:20, :486:27
          else	// CSR.scala:473:20, :506:44, :507:37
            reg_mstatus_sie <= reg_mstatus_spie;	// CSR.scala:197:24
        end
        else	// CSR.scala:414:30
          reg_mstatus_sie <= _GEN_14;	// CSR.scala:197:24, :473:20, :486:27
      end
      if (_T_2870 & _T_1507) begin	// CSR.scala:205:21, :405:73, :536:49, :593:38, Package.scala:7:62
        reg_dcsr_ebreakm <= wdata[15];	// CSR.scala:205:21, :406:90, :594:43
        reg_dcsr_ebreaks <= wdata[13];	// CSR.scala:205:21, :406:90, :594:43
        reg_dcsr_ebreaku <= wdata[12];	// CSR.scala:205:21, :406:90, :594:43
        reg_dcsr_halt <= wdata[3];	// CSR.scala:205:21, :406:90, :594:43
        reg_dcsr_step <= wdata[2];	// CSR.scala:205:21, :406:90, :594:43
        reg_dcsr_prv <= wdata[1:0];	// CSR.scala:205:21, :406:90, :594:43
      end
      else if (_GEN_9)	// CSR.scala:232:22, :473:20, :481:24
        reg_dcsr_prv <= reg_mstatus_prv;	// CSR.scala:197:24, :205:21
      if (_GEN_9) begin	// CSR.scala:232:22, :473:20, :481:24
        if (reg_singleStepped)	// CSR.scala:236:30
          reg_dcsr_cause <= 3'h4;	// CSR.scala:205:21, Mux.scala:31:69
        else	// CSR.scala:236:30
          reg_dcsr_cause <= {1'h0, causeIsDebugInt ? 2'h3 : causeIsDebugTrigger ? 2'h2 : 2'h1};	// CSR.scala:195:21, :203:24, :205:21, :440:39, :441:44, :484:{28,54,84}, :697:27
      end
      reg_dcsr_debugint <= io_interrupts_debug;	// CSR.scala:205:21
      reg_debug <= (~insn_ret | ~_T_2462) & (_GEN_9 | reg_debug);	// CSR.scala:232:22, :414:30, :473:20, :481:24, :505:19, :506:44, :512:53, :514:17
      if (_GEN_13) begin	// CSR.scala:239:19, :536:49, :646:45
        automatic logic _T_3494;	// CSR.scala:649:36
        _T_3494 = wdata[59] & reg_debug;	// CSR.scala:232:22, :406:90, :648:48, :649:36
        reg_bp_0_control_dmode <= _T_3494;	// CSR.scala:239:19, :649:36
        reg_bp_0_control_action <= _T_3494 & wdata[12];	// CSR.scala:239:19, :406:90, :648:48, :649:36, :652:38
        reg_bp_0_control_x <= wdata[2];	// CSR.scala:239:19, :406:90, :648:48
        reg_bp_0_control_w <= wdata[1];	// CSR.scala:239:19, :406:90, :648:48
        reg_bp_0_control_r <= wdata[0];	// CSR.scala:239:19, :406:90, :648:48
      end
      if (_T_2870 & _T_1487)	// CSR.scala:251:27, :405:73, :536:49, :576:40, Package.scala:7:62
        reg_mtvec <= {wdata[31:2], 2'h0};	// CSR.scala:251:27, :406:90, :576:52
      reg_wfi <= ~((|{pending_interrupts[11], pending_interrupts[9], pending_interrupts[7],
                                                pending_interrupts[5], pending_interrupts[3], pending_interrupts[1]}) | exception) &
                                                (system_insn & io_rw_addr[2:0] == 3'h5 | reg_wfi);	// CSR.scala:264:20, :280:37, :409:31, :410:{24,37}, :415:{30,39}, :461:43, :464:{19,29}, :465:{28,32,46,56}
      if (_T_2870 & _T_1481) begin	// CSR.scala:405:73, :536:49, :711:31, Counters.scala:49:9, Package.scala:7:62
        _T_931 <= wdata[5:0];	// CSR.scala:406:90, Counters.scala:47:37, :67:11
        _T_934 <= wdata[63:6];	// CSR.scala:406:90, Counters.scala:52:27, :68:28
      end
      else begin	// CSR.scala:536:49, :711:31, Counters.scala:49:9
        automatic logic [6:0] _T_932;	// Counters.scala:48:33
        _T_932 = {1'h0, _T_931} + {6'h0, io_retire};	// Counters.scala:47:37, :48:33
        _T_931 <= _T_932[5:0];	// Counters.scala:47:37, :48:33, :49:9
        if (_T_932[6])	// Counters.scala:48:33, :53:20
          _T_934 <= _T_934 + 58'h1;	// Counters.scala:52:27, :53:43
      end
      if (_T_2870 & _T_1479) begin	// CSR.scala:405:73, :536:49, :711:31, Counters.scala:49:9, Package.scala:7:62
        _T_942 <= wdata[5:0];	// CSR.scala:406:90, Counters.scala:47:37, :67:11
        _T_945 <= wdata[63:6];	// CSR.scala:406:90, Counters.scala:52:27, :68:28
      end
      else begin	// CSR.scala:536:49, :711:31, Counters.scala:49:9
        automatic logic [6:0] _T_943;	// Counters.scala:48:33
        _T_943 = {1'h0, _T_942} + 7'h1;	// Counters.scala:47:37, :48:33
        _T_942 <= _T_943[5:0];	// Counters.scala:47:37, :48:33, :49:9
        if (_T_943[6])	// Counters.scala:48:33, :53:20
          _T_945 <= _T_945 + 58'h1;	// Counters.scala:52:27, :53:43
      end
      if (_T_2870 & _T_1483)	// CSR.scala:307:21, :405:73, :536:49, :560:36, Package.scala:7:62
        reg_misa <= ~(~wdata | {60'h0, ~(wdata[5]), 3'h0}) & 64'h102D | reg_misa & 64'hFD2;	// CSR.scala:307:21, :371:57, :406:90, :437:8, :562:20, :563:{19,21,28,31,51,58,69}
    end
    if (_T_2870 & _T_1509)	// CSR.scala:405:73, :473:20, :536:49, :602:42, Package.scala:7:62
      reg_dpc <= ~(~(wdata[39:0]) | 40'h1);	// CSR.scala:234:20, :406:90, :474:24, :602:{55,64}, :714:28
    else if (_GEN_9)	// CSR.scala:232:22, :473:20, :481:24
      reg_dpc <= ~_T_2389;	// CSR.scala:234:20, :474:{15,24}
    if (_T_2870 & _T_1511)	// CSR.scala:235:25, :405:73, :536:49, :603:42, Package.scala:7:62
      reg_dscratch <= wdata;	// CSR.scala:235:25, :406:90
    reg_singleStepped <= _T_2334 & (io_retire | reg_singleStepped);	// CSR.scala:236:30, :451:34, :468:{23,43}, :469:{25,45}
    if (_GEN_13) begin	// CSR.scala:239:19, :536:49, :646:45
      reg_bp_0_control_tmatch <= wdata[8:7];	// CSR.scala:239:19, :406:90, :648:48
      reg_bp_0_control_m <= wdata[6];	// CSR.scala:239:19, :406:90, :648:48
      reg_bp_0_control_s <= wdata[4];	// CSR.scala:239:19, :406:90, :648:48
      reg_bp_0_control_u <= wdata[3];	// CSR.scala:239:19, :406:90, :648:48
    end
    if (_T_2870 & _T_3428 & _T_1471)	// CSR.scala:239:19, :405:73, :536:49, :646:{31,45}, Package.scala:7:62
      reg_bp_0_address <= wdata[38:0];	// CSR.scala:239:19, :406:90, :654:55
    if (_T_2870) begin	// Package.scala:7:62
      if (_T_1697)	// CSR.scala:405:73
        reg_mie <= reg_mie & ~reg_mideleg | wdata & reg_mideleg;	// CSR.scala:241:20, :242:24, :281:123, :406:90, :629:{64,80,89}
      else if (_T_1491)	// CSR.scala:405:73
        reg_mie <= wdata & 64'hAAA;	// CSR.scala:241:20, :406:90, :572:59
      if (_T_1695)	// CSR.scala:405:73
        reg_mip_ssip <= wdata[1];	// CSR.scala:244:20, :406:90, :616:41
      else if (_T_1489)	// CSR.scala:405:73
        reg_mip_ssip <= wdata[1];	// CSR.scala:244:20, :406:90, :566:39
      if (_T_1517)	// CSR.scala:405:73
        reg_frm <= wdata[7:5];	// CSR.scala:267:20, :406:90, :590:71
      else if (_T_1515)	// CSR.scala:405:73
        reg_frm <= wdata[2:0];	// CSR.scala:267:20, :406:90, :589:50
    end
    if (_T_2870 & _T_1493)	// CSR.scala:242:24, :405:73, :536:49, :635:42, Package.scala:7:62
      reg_mideleg <= wdata & 64'h222;	// CSR.scala:242:24, :406:90, :635:65
    if (_T_2870 & _T_1495)	// CSR.scala:243:24, :405:73, :536:49, :636:42, Package.scala:7:62
      reg_medeleg <= wdata & 64'h1AB;	// CSR.scala:243:24, :406:90, :636:65
    reg_mip_meip <= io_interrupts_meip;	// CSR.scala:244:20
    reg_mip_seip <= io_interrupts_seip;	// CSR.scala:244:20
    reg_mip_mtip <= io_interrupts_mtip;	// CSR.scala:244:20
    if (_T_2870 & _T_1489)	// CSR.scala:244:20, :405:73, :536:49, :565:35, Package.scala:7:62
      reg_mip_stip <= wdata[5];	// CSR.scala:244:20, :406:90, :566:39
    reg_mip_msip <= io_interrupts_msip;	// CSR.scala:244:20
    if (_T_2870 & _T_1499)	// CSR.scala:405:73, :473:20, :536:49, :573:40, Package.scala:7:62
      reg_mepc <= ~(~(wdata[39:0]) | {38'h0, ~(reg_misa[2]), 1'h1});	// CSR.scala:245:21, :307:21, :406:90, :714:{26,28,31,37,46}
    else if (_GEN_11)	// CSR.scala:245:21, :473:20, :494:17
      reg_mepc <= ~(_T_2389 | {38'h0, ~(reg_misa[2]), 1'h1});	// CSR.scala:245:21, :307:21, :474:24, :714:{26,31,37,46}
    if (_T_2870 & _T_1503)	// CSR.scala:405:73, :473:20, :536:49, :577:40, Package.scala:7:62
      reg_mcause <= wdata & 64'h800000000000001F;	// CSR.scala:246:23, :406:90, :577:62
    else if (_GEN_11) begin	// CSR.scala:245:21, :473:20, :494:17
      if (insn_call)	// CSR.scala:412:44
        reg_mcause <= _GEN_3;	// CSR.scala:246:23, :437:8
      else if (insn_break)	// CSR.scala:413:32
        reg_mcause <= 64'h3;	// CSR.scala:246:23, :438:14
      else	// CSR.scala:413:32
        reg_mcause <= io_cause;	// CSR.scala:246:23
    end
    if (_T_2870 & _T_1501)	// CSR.scala:405:73, :473:20, :536:49, :578:40, Package.scala:7:62
      reg_mbadaddr <= wdata[39:0];	// CSR.scala:247:25, :406:90, :578:63
    else if (exception & _T_2438 & _T_2412)	// CSR.scala:247:25, :461:43, :473:20, :486:27, :494:17, Package.scala:7:62
      reg_mbadaddr <= io_badaddr;	// CSR.scala:247:25
    if (_T_2870 & _T_1497)	// CSR.scala:248:25, :405:73, :536:49, :574:40, Package.scala:7:62
      reg_mscratch <= wdata;	// CSR.scala:248:25, :406:90
    if (_T_2870 & _T_1713)	// CSR.scala:254:27, :405:73, :536:49, :640:44, Package.scala:7:62
      reg_mcounteren <= _GEN_12;	// CSR.scala:254:27, :637:61
    if (_T_2870 & _T_1711)	// CSR.scala:255:27, :405:73, :536:49, :637:44, Package.scala:7:62
      reg_scounteren <= _GEN_12;	// CSR.scala:255:27, :637:61
    if (_T_2870 & _T_1707)	// CSR.scala:405:73, :473:20, :536:49, :631:42, Package.scala:7:62
      reg_sepc <= ~(~(wdata[39:0]) | {38'h0, ~(reg_misa[2]), 1'h1});	// CSR.scala:258:21, :307:21, :406:90, :714:{26,28,31,37,46}
    else if (_GEN_10)	// CSR.scala:258:21, :473:20, :486:27
      reg_sepc <= ~(_T_2389 | {38'h0, ~(reg_misa[2]), 1'h1});	// CSR.scala:258:21, :307:21, :474:24, :714:{26,31,37,46}
    if (_T_2870 & _T_1701)	// CSR.scala:405:73, :473:20, :536:49, :633:42, Package.scala:7:62
      reg_scause <= wdata & 64'h800000000000001F;	// CSR.scala:259:23, :406:90, :577:62, :633:64
    else if (_GEN_10) begin	// CSR.scala:258:21, :473:20, :486:27
      if (insn_call)	// CSR.scala:412:44
        reg_scause <= _GEN_3;	// CSR.scala:259:23, :437:8
      else if (insn_break)	// CSR.scala:413:32
        reg_scause <= 64'h3;	// CSR.scala:259:23, :438:14
      else	// CSR.scala:413:32
        reg_scause <= io_cause;	// CSR.scala:259:23
    end
    if (_T_2870 & _T_1703)	// CSR.scala:405:73, :473:20, :536:49, :634:42, Package.scala:7:62
      reg_sbadaddr <= wdata[39:0];	// CSR.scala:260:25, :406:90, :634:65
    else if (exception & _T_2423 & _T_2412)	// CSR.scala:260:25, :461:43, :473:20, :486:27, Package.scala:7:62
      reg_sbadaddr <= io_badaddr;	// CSR.scala:260:25
    if (_T_2870 & _T_1699)	// CSR.scala:261:25, :405:73, :536:49, :630:42, Package.scala:7:62
      reg_sscratch <= wdata;	// CSR.scala:261:25, :406:90
    if (_T_2870 & _T_1709)	// CSR.scala:262:22, :405:73, :536:49, :632:42, Package.scala:7:62
      reg_stvec <= {wdata[38:2], 2'h0};	// CSR.scala:262:22, :406:90, :632:54
    if (_T_2870 & _T_1705) begin	// CSR.scala:263:22, :405:73, :536:49, :619:39, Package.scala:7:62
      if (_T_3365)	// CSR.scala:623:30
        reg_sptbr_mode <= 4'h8;	// CSR.scala:263:22, Mux.scala:31:69
      else if (_T_3363)	// CSR.scala:622:30
        reg_sptbr_mode <= 4'h0;	// CSR.scala:263:22, :622:54
    end
    if (_T_2870 & _T_1705 & (_T_3363 | _T_3365))	// CSR.scala:263:22, :405:73, :536:49, :619:39, :622:30, :623:30, :624:36, Package.scala:7:62
      reg_sptbr_ppn <= {24'h0, wdata[19:0]};	// Bitwise.scala:71:12, CSR.scala:263:22, :406:90, :625:{25,41}
    if (_T_2870 & (_T_1517 | _T_1513))	// CSR.scala:405:73, :532:30, :536:49, :588:40, :590:{40,53}, Package.scala:7:62
      reg_fflags <= wdata[4:0];	// CSR.scala:266:23, :406:90, :588:53
    else	// CSR.scala:532:30, :536:49, :590:40
      reg_fflags <= {5{io_fcsr_flags_valid}} & io_fcsr_flags_bits | reg_fflags;	// CSR.scala:266:23, :532:30, :533:16
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// CSR.scala:462:9
      automatic logic _T_2350 = {1'h0, {1'h0, insn_ret} + {1'h0, insn_call}} + {1'h0, {1'h0, insn_break} + {1'h0,
                                                io_exception}} < 3'h2 | reset;	// Bitwise.scala:48:55, CSR.scala:412:44, :413:32, :414:30, :462:{9,79}, Package.scala:7:47
      automatic logic _T_2363;	// CSR.scala:466:9
      automatic logic _T_2384;	// CSR.scala:471:9
      _T_2363 = ~reg_wfi | ~io_retire | reset;	// CSR.scala:264:20, :466:{9,10,32}
      _T_2384 = ~reg_singleStepped | ~io_retire | reset;	// CSR.scala:236:30, :466:32, :471:{9,10}
      if ((`PRINTF_COND_) & ~_T_2350)	// CSR.scala:462:9
        $fwrite(32'h80000002, "Assertion failed: these conditions must be mutually exclusive\n    at CSR.scala:462 assert(PopCount(insn_ret :: insn_call :: insn_break :: io.exception :: Nil) <= 1, \"these conditions must be mutually exclusive\")\n");	// CSR.scala:462:9
      if ((`STOP_COND_) & ~_T_2350)	// CSR.scala:462:9
        $fatal;	// CSR.scala:462:9
      if ((`PRINTF_COND_) & ~_T_2363)	// CSR.scala:462:9, :466:9
        $fwrite(32'h80000002, "Assertion failed\n    at CSR.scala:466 assert(!reg_wfi || io.retire === UInt(0))\n");	// CSR.scala:462:9, :466:9
      if ((`STOP_COND_) & ~_T_2363)	// CSR.scala:462:9, :466:9
        $fatal;	// CSR.scala:466:9
      if ((`PRINTF_COND_) & ~_T_2384)	// CSR.scala:462:9, :471:9
        $fwrite(32'h80000002, "Assertion failed\n    at CSR.scala:471 assert(!reg_singleStepped || io.retire === UInt(0))\n");	// CSR.scala:462:9, :471:9
      if ((`STOP_COND_) & ~_T_2384)	// CSR.scala:462:9, :471:9
        $fatal;	// CSR.scala:471:9
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      automatic logic [31:0] _RANDOM_11;
      automatic logic [31:0] _RANDOM_12;
      automatic logic [31:0] _RANDOM_13;
      automatic logic [31:0] _RANDOM_14;
      automatic logic [31:0] _RANDOM_15;
      automatic logic [31:0] _RANDOM_16;
      automatic logic [31:0] _RANDOM_17;
      automatic logic [31:0] _RANDOM_18;
      automatic logic [31:0] _RANDOM_19;
      automatic logic [31:0] _RANDOM_20;
      automatic logic [31:0] _RANDOM_21;
      automatic logic [31:0] _RANDOM_22;
      automatic logic [31:0] _RANDOM_23;
      automatic logic [31:0] _RANDOM_24;
      automatic logic [31:0] _RANDOM_25;
      automatic logic [31:0] _RANDOM_26;
      automatic logic [31:0] _RANDOM_27;
      automatic logic [31:0] _RANDOM_28;
      automatic logic [31:0] _RANDOM_29;
      automatic logic [31:0] _RANDOM_30;
      automatic logic [31:0] _RANDOM_31;
      automatic logic [31:0] _RANDOM_32;
      automatic logic [31:0] _RANDOM_33;
      automatic logic [31:0] _RANDOM_34;
      automatic logic [31:0] _RANDOM_35;
      automatic logic [31:0] _RANDOM_36;
      automatic logic [31:0] _RANDOM_37;
      automatic logic [31:0] _RANDOM_38;
      automatic logic [31:0] _RANDOM_39;
      automatic logic [31:0] _RANDOM_40;
      automatic logic [31:0] _RANDOM_41;
      automatic logic [31:0] _RANDOM_42;
      automatic logic [31:0] _RANDOM_43;
      automatic logic [31:0] _RANDOM_44;
      automatic logic [31:0] _RANDOM_45;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        _RANDOM_35 = `RANDOM;
        _RANDOM_36 = `RANDOM;
        _RANDOM_37 = `RANDOM;
        _RANDOM_38 = `RANDOM;
        _RANDOM_39 = `RANDOM;
        _RANDOM_40 = `RANDOM;
        _RANDOM_41 = `RANDOM;
        _RANDOM_42 = `RANDOM;
        _RANDOM_43 = `RANDOM;
        _RANDOM_44 = `RANDOM;
        _RANDOM_45 = `RANDOM;
        reg_mstatus_prv = _RANDOM_1[2:1];	// CSR.scala:197:24
        reg_mstatus_tsr = _RANDOM_2[12];	// CSR.scala:197:24
        reg_mstatus_tw = _RANDOM_2[13];	// CSR.scala:197:24
        reg_mstatus_tvm = _RANDOM_2[14];	// CSR.scala:197:24
        reg_mstatus_mxr = _RANDOM_2[15];	// CSR.scala:197:24
        reg_mstatus_pum = _RANDOM_2[16];	// CSR.scala:197:24
        reg_mstatus_mprv = _RANDOM_2[17];	// CSR.scala:197:24
        reg_mstatus_fs = _RANDOM_2[21:20];	// CSR.scala:197:24
        reg_mstatus_mpp = _RANDOM_2[23:22];	// CSR.scala:197:24
        reg_mstatus_spp = _RANDOM_2[26];	// CSR.scala:197:24
        reg_mstatus_mpie = _RANDOM_2[27];	// CSR.scala:197:24
        reg_mstatus_spie = _RANDOM_2[29];	// CSR.scala:197:24
        reg_mstatus_mie = _RANDOM_2[31];	// CSR.scala:197:24
        reg_mstatus_sie = _RANDOM_3[1];	// CSR.scala:197:24
        reg_dcsr_ebreakm = _RANDOM_3[19];	// CSR.scala:197:24, :205:21
        reg_dcsr_ebreaks = _RANDOM_3[21];	// CSR.scala:197:24, :205:21
        reg_dcsr_ebreaku = _RANDOM_3[22];	// CSR.scala:197:24, :205:21
        reg_dcsr_cause = _RANDOM_3[28:26];	// CSR.scala:197:24, :205:21
        reg_dcsr_debugint = _RANDOM_3[29];	// CSR.scala:197:24, :205:21
        reg_dcsr_halt = _RANDOM_3[31];	// CSR.scala:197:24, :205:21
        reg_dcsr_step = _RANDOM_4[0];	// CSR.scala:205:21
        reg_dcsr_prv = _RANDOM_4[2:1];	// CSR.scala:205:21
        reg_debug = _RANDOM_4[3];	// CSR.scala:205:21, :232:22
        reg_dpc = {_RANDOM_4[31:4], _RANDOM_5[11:0]};	// CSR.scala:205:21, :234:20
        reg_dscratch = {_RANDOM_5[31:12], _RANDOM_6, _RANDOM_7[11:0]};	// CSR.scala:234:20, :235:25
        reg_singleStepped = _RANDOM_7[12];	// CSR.scala:235:25, :236:30
        reg_bp_0_control_dmode = _RANDOM_7[18];	// CSR.scala:235:25, :239:19
        reg_bp_0_control_action = _RANDOM_9[1];	// CSR.scala:239:19
        reg_bp_0_control_tmatch = _RANDOM_9[6:5];	// CSR.scala:239:19
        reg_bp_0_control_m = _RANDOM_9[7];	// CSR.scala:239:19
        reg_bp_0_control_s = _RANDOM_9[9];	// CSR.scala:239:19
        reg_bp_0_control_u = _RANDOM_9[10];	// CSR.scala:239:19
        reg_bp_0_control_x = _RANDOM_9[11];	// CSR.scala:239:19
        reg_bp_0_control_w = _RANDOM_9[12];	// CSR.scala:239:19
        reg_bp_0_control_r = _RANDOM_9[13];	// CSR.scala:239:19
        reg_bp_0_address = {_RANDOM_9[31:14], _RANDOM_10[20:0]};	// CSR.scala:239:19
        reg_mie = {_RANDOM_13[31:28], _RANDOM_14, _RANDOM_15[27:0]};	// CSR.scala:241:20
        reg_mideleg = {_RANDOM_15[31:28], _RANDOM_16, _RANDOM_17[27:0]};	// CSR.scala:241:20, :242:24
        reg_medeleg = {_RANDOM_17[31:28], _RANDOM_18, _RANDOM_19[27:0]};	// CSR.scala:242:24, :243:24
        reg_mip_meip = _RANDOM_19[29];	// CSR.scala:243:24, :244:20
        reg_mip_seip = _RANDOM_19[31];	// CSR.scala:243:24, :244:20
        reg_mip_mtip = _RANDOM_20[1];	// CSR.scala:244:20
        reg_mip_stip = _RANDOM_20[3];	// CSR.scala:244:20
        reg_mip_msip = _RANDOM_20[5];	// CSR.scala:244:20
        reg_mip_ssip = _RANDOM_20[7];	// CSR.scala:244:20
        reg_mepc = {_RANDOM_20[31:9], _RANDOM_21[16:0]};	// CSR.scala:244:20, :245:21
        reg_mcause = {_RANDOM_21[31:17], _RANDOM_22, _RANDOM_23[16:0]};	// CSR.scala:245:21, :246:23
        reg_mbadaddr = {_RANDOM_23[31:17], _RANDOM_24[24:0]};	// CSR.scala:246:23, :247:25
        reg_mscratch = {_RANDOM_24[31:25], _RANDOM_25, _RANDOM_26[24:0]};	// CSR.scala:247:25, :248:25
        reg_mtvec = {_RANDOM_26[31:25], _RANDOM_27[24:0]};	// CSR.scala:248:25, :251:27
        reg_mcounteren = {_RANDOM_27[31:25], _RANDOM_28[24:0]};	// CSR.scala:251:27, :254:27
        reg_scounteren = {_RANDOM_28[31:25], _RANDOM_29[24:0]};	// CSR.scala:254:27, :255:27
        reg_sepc = {_RANDOM_29[31:25], _RANDOM_30, _RANDOM_31[0]};	// CSR.scala:255:27, :258:21
        reg_scause = {_RANDOM_31[31:1], _RANDOM_32, _RANDOM_33[0]};	// CSR.scala:258:21, :259:23
        reg_sbadaddr = {_RANDOM_33[31:1], _RANDOM_34[8:0]};	// CSR.scala:259:23, :260:25
        reg_sscratch = {_RANDOM_34[31:9], _RANDOM_35, _RANDOM_36[8:0]};	// CSR.scala:260:25, :261:25
        reg_stvec = {_RANDOM_36[31:9], _RANDOM_37[15:0]};	// CSR.scala:261:25, :262:22
        reg_sptbr_mode = _RANDOM_37[19:16];	// CSR.scala:262:22, :263:22
        reg_sptbr_ppn = {_RANDOM_38[31:4], _RANDOM_39[15:0]};	// CSR.scala:263:22
        reg_wfi = _RANDOM_39[16];	// CSR.scala:263:22, :264:20
        reg_fflags = _RANDOM_39[21:17];	// CSR.scala:263:22, :266:23
        reg_frm = _RANDOM_39[24:22];	// CSR.scala:263:22, :267:20
        _T_931 = _RANDOM_39[30:25];	// CSR.scala:263:22, Counters.scala:47:37
        _T_934 = {_RANDOM_39[31], _RANDOM_40, _RANDOM_41[24:0]};	// CSR.scala:263:22, Counters.scala:52:27
        _T_942 = _RANDOM_41[30:25];	// Counters.scala:47:37, :52:27
        _T_945 = {_RANDOM_41[31], _RANDOM_42, _RANDOM_43[24:0]};	// Counters.scala:52:27
        reg_misa = {_RANDOM_43[31:25], _RANDOM_44, _RANDOM_45[24:0]};	// CSR.scala:307:21, Counters.scala:52:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_rw_rdata = _T_2859;	// Mux.scala:19:72
  assign io_decode_fp_illegal = _T_1764;	// CSR.scala:421:46
  assign io_decode_read_illegal = effective_prv < _GEN_1 | ~(io_decode_csr == 12'h338 | _T_2194 | io_decode_csr == 12'hB09 |
                io_decode_csr == 12'h140 | io_decode_csr == 12'hB1C | io_decode_csr == 12'h337 |
                io_decode_csr == 12'h324 | io_decode_csr == 12'h303 | io_decode_csr == 12'h306 |
                io_decode_csr == 12'hC11 | io_decode_csr == 12'hB0B | io_decode_csr == 12'hC12 |
                io_decode_csr == 12'hB02 | io_decode_csr == 12'h326 | io_decode_csr == 12'hB0D |
                io_decode_csr == 12'hC0A | io_decode_csr == 12'h33E | io_decode_csr == 12'h331 |
                io_decode_csr == 12'hB13 | io_decode_csr == 12'h7A1 | io_decode_csr == 12'h343 |
                io_decode_csr == 12'h32E | io_decode_csr == 12'hB05 | io_decode_csr == 12'hC18 |
                io_decode_csr == 12'h143 | io_decode_csr == 12'h32A | io_decode_csr == 12'h100 |
                io_decode_csr == 12'hC0B | io_decode_csr == 12'hB16 | io_decode_csr == 12'hF14 |
                io_decode_csr == 12'hC1B | io_decode_csr == 12'hC1A | io_decode_csr == 12'hF13 |
                io_decode_csr == 12'hC04 | io_decode_csr == 12'hB1F | _T_2183 | io_decode_csr == 12'hB0F |
                io_decode_csr == 12'hB06 | io_decode_csr == 12'hC14 | io_decode_csr == 12'h33A |
                io_decode_csr == 12'hF12 | io_decode_csr == 12'h330 | io_decode_csr == 12'hC1E |
                io_decode_csr == 12'hC08 | io_decode_csr == 12'h340 | io_decode_csr == 12'hB15 |
                io_decode_csr == 12'hB19 | io_decode_csr == 12'hB03 | io_decode_csr == 12'hC10 |
                io_decode_csr == 12'hC02 | io_decode_csr == 12'h104 | io_decode_csr == 12'h328 |
                io_decode_csr == 12'h336 | io_decode_csr == 12'h300 | io_decode_csr == 12'hB1B | _T_2198 |
                io_decode_csr == 12'hC0E | io_decode_csr == 12'h334 | io_decode_csr == 12'h344 |
                io_decode_csr == 12'hB12 | io_decode_csr == 12'hB00 | io_decode_csr == 12'hC1C |
                io_decode_csr == 12'h7A0 | io_decode_csr == 12'hC03 | io_decode_csr == 12'hC0D |
                io_decode_csr == 12'h106 | io_decode_csr == 12'h332 | io_decode_csr == 12'hC0C |
                io_decode_csr == 12'h329 | io_decode_csr == 12'hB17 | io_decode_csr == 12'h304 |
                io_decode_csr == 12'h33C | io_decode_csr == 12'h32D | io_decode_csr == 12'hC17 | _T_2187 |
                io_decode_csr == 12'h33D | io_decode_csr == 12'h327 | io_decode_csr == 12'h342 |
                io_decode_csr == 12'hC16 | io_decode_csr == 12'h141 | io_decode_csr == 12'h325 |
                io_decode_csr == 12'hB18 | io_decode_csr == 12'hB0A | io_decode_csr == 12'hC1D |
                io_decode_csr == 12'h142 | io_decode_csr == 12'h333 | io_decode_csr == 12'h7A2 |
                io_decode_csr == 12'h341 | io_decode_csr == 12'hC05 | io_decode_csr == 12'h32B |
                io_decode_csr == 12'h32C | _T_2154 | io_decode_csr == 12'hB11 | io_decode_csr == 12'h302 |
                io_decode_csr == 12'h335 | io_decode_csr == 12'hC06 | io_decode_csr == 12'hC19 |
                io_decode_csr == 12'hF11 | io_decode_csr == 12'hC0F | io_decode_csr == 12'h33F |
                io_decode_csr == 12'h105 | io_decode_csr == 12'hB14 | _T_2185 | io_decode_csr == 12'hB04 |
                io_decode_csr == 12'hB1A | io_decode_csr == 12'h32F | io_decode_csr == 12'hC09 |
                io_decode_csr == 12'hC1F | io_decode_csr == 12'hC13 | io_decode_csr == 12'h305 |
                io_decode_csr == 12'hB0C | io_decode_csr == 12'h33B | _T_2196 | io_decode_csr == 12'hB0E |
                io_decode_csr == 12'h144 | io_decode_csr == 12'hC07 | io_decode_csr == 12'hC15 |
                io_decode_csr == 12'hB1D | io_decode_csr == 12'h301 | io_decode_csr == 12'hB07 |
                io_decode_csr == 12'h339 | io_decode_csr == 12'h323 | io_decode_csr == 12'hC00 |
                io_decode_csr == 12'hB10 | io_decode_csr == 12'hB1E | io_decode_csr == 12'hB08) | _T_2154 &
                ~allow_sfence_vma | (io_decode_csr > 12'hBFF & io_decode_csr < 12'hC20 | io_decode_csr >
                12'hC7F & io_decode_csr < 12'hCA0) & effective_prv < 3'h2 & _T_2174[0] | ~reg_debug &
                (_T_2183 | _T_2185 | _T_2187) | (_T_2194 | _T_2196 | _T_2198) & _T_1764;	// CSR.scala:232:22, :286:41, :405:73, :419:66, :421:46, :423:43, :424:{5,42,57}, :425:{34,37}, :426:{67,151,160,171}, :427:{36,88,93}, :428:{69,74}, Cat.scala:30:58, Package.scala:7:47, :47:{47,55,60}
  assign io_decode_write_illegal = &(io_decode_csr[11:10]);	// CSR.scala:429:{43,51}
  assign io_decode_write_flush = ~(io_decode_csr > 12'h33F & io_decode_csr < 12'h344 | io_decode_csr > 12'h13F &
                io_decode_csr < 12'h144);	// CSR.scala:405:73, :424:42, :430:{28,44,61,78,95,112,129,146}
  assign io_decode_system_illegal = effective_prv < _GEN_1 | ~(io_decode_csr[5]) & io_decode_csr[2] & ~((|_GEN_0) |
                ~reg_mstatus_tw) | ~(io_decode_csr[5]) & io_decode_csr[1] & ~((|_GEN_0) | ~reg_mstatus_tsr)
                | io_decode_csr[5] & ~allow_sfence_vma;	// CSR.scala:197:24, :418:{51,59,62}, :419:66, :420:{60,63}, :423:43, :425:37, :431:45, :432:{5,19,39,43,46}, :433:{5,39,43,46,58}, :434:22, Cat.scala:30:58
  assign io_csr_stall = reg_wfi;	// CSR.scala:264:20
  assign io_eret = _T_2344 | insn_ret;	// CSR.scala:414:30, :450:{24,38}
  assign io_singleStep = _T_2334;	// CSR.scala:451:34
  assign io_status_debug = reg_debug;	// CSR.scala:232:22
  assign io_status_isa = reg_misa[31:0];	// CSR.scala:307:21, :455:17
  assign io_status_prv = reg_mstatus_prv;	// CSR.scala:197:24
  assign io_status_sd = &reg_mstatus_fs;	// CSR.scala:197:24, :453:32
  assign io_status_tsr = reg_mstatus_tsr;	// CSR.scala:197:24
  assign io_status_tw = reg_mstatus_tw;	// CSR.scala:197:24
  assign io_status_tvm = reg_mstatus_tvm;	// CSR.scala:197:24
  assign io_status_mxr = reg_mstatus_mxr;	// CSR.scala:197:24
  assign io_status_pum = reg_mstatus_pum;	// CSR.scala:197:24
  assign io_status_mprv = reg_mstatus_mprv;	// CSR.scala:197:24
  assign io_status_fs = reg_mstatus_fs;	// CSR.scala:197:24
  assign io_status_mpp = reg_mstatus_mpp;	// CSR.scala:197:24
  assign io_status_spp = reg_mstatus_spp;	// CSR.scala:197:24
  assign io_status_mpie = reg_mstatus_mpie;	// CSR.scala:197:24
  assign io_status_spie = reg_mstatus_spie;	// CSR.scala:197:24
  assign io_status_mie = reg_mstatus_mie;	// CSR.scala:197:24
  assign io_status_sie = reg_mstatus_sie;	// CSR.scala:197:24
  assign io_ptbr_mode = reg_sptbr_mode;	// CSR.scala:263:22
  assign io_ptbr_ppn = reg_sptbr_ppn;	// CSR.scala:263:22
  assign io_evec = insn_ret ? (_T_2468 ? reg_mepc : _T_2462 ? reg_dpc : io_rw_addr[9] ? tvec : reg_sepc) :
                tvec;	// CSR.scala:234:20, :245:21, :258:21, :414:30, :446:17, :448:11, :505:19, :506:{39,44}, :511:15, :512:53, :515:15, :516:17, :522:15
  assign io_fatc = system_insn & io_rw_addr[5];	// CSR.scala:409:31, :411:28, :416:37
  assign io_time = _T_950;	// Cat.scala:30:58
  assign io_fcsr_rm = reg_frm;	// CSR.scala:267:20
  assign io_interrupt = _T_1208 | (|all_interrupts) & ~reg_debug & ~_T_2334 | reg_singleStepped;	// CSR.scala:232:22, :236:30, :283:37, :286:{16,34,41,52,55}, :291:{47,62}, :292:18, :451:34
  assign io_interrupt_cause = _T_1208 ? 64'h800000000000000D : {58'h0, all_interrupts[0] ? 6'h0 : all_interrupts[1] ?
                6'h1 : all_interrupts[2] ? 6'h2 : all_interrupts[3] ? 6'h3 : all_interrupts[4] ? 6'h4 :
                all_interrupts[5] ? 6'h5 : all_interrupts[6] ? 6'h6 : all_interrupts[7] ? 6'h7 :
                all_interrupts[8] ? 6'h8 : all_interrupts[9] ? 6'h9 : all_interrupts[10] ? 6'hA :
                all_interrupts[11] ? 6'hB : all_interrupts[12] ? 6'hC : all_interrupts[13] ? 6'hD :
                all_interrupts[14] ? 6'hE : all_interrupts[15] ? 6'hF : all_interrupts[16] ? 6'h10 :
                all_interrupts[17] ? 6'h11 : all_interrupts[18] ? 6'h12 : all_interrupts[19] ? 6'h13 :
                all_interrupts[20] ? 6'h14 : all_interrupts[21] ? 6'h15 : all_interrupts[22] ? 6'h16 :
                all_interrupts[23] ? 6'h17 : all_interrupts[24] ? 6'h18 : all_interrupts[25] ? 6'h19 :
                all_interrupts[26] ? 6'h1A : all_interrupts[27] ? 6'h1B : all_interrupts[28] ? 6'h1C :
                all_interrupts[29] ? 6'h1D : all_interrupts[30] ? 6'h1E : all_interrupts[31] ? 6'h1F :
                all_interrupts[32] ? 6'h20 : all_interrupts[33] ? 6'h21 : all_interrupts[34] ? 6'h22 :
                all_interrupts[35] ? 6'h23 : all_interrupts[36] ? 6'h24 : all_interrupts[37] ? 6'h25 :
                all_interrupts[38] ? 6'h26 : all_interrupts[39] ? 6'h27 : all_interrupts[40] ? 6'h28 :
                all_interrupts[41] ? 6'h29 : all_interrupts[42] ? 6'h2A : all_interrupts[43] ? 6'h2B :
                all_interrupts[44] ? 6'h2C : all_interrupts[45] ? 6'h2D : all_interrupts[46] ? 6'h2E :
                all_interrupts[47] ? 6'h2F : all_interrupts[48] ? 6'h30 : all_interrupts[49] ? 6'h31 :
                all_interrupts[50] ? 6'h32 : all_interrupts[51] ? 6'h33 : all_interrupts[52] ? 6'h34 :
                all_interrupts[53] ? 6'h35 : all_interrupts[54] ? 6'h36 : all_interrupts[55] ? 6'h37 :
                all_interrupts[56] ? 6'h38 : all_interrupts[57] ? 6'h39 : all_interrupts[58] ? 6'h3A :
                all_interrupts[59] ? 6'h3B : all_interrupts[60] ? 6'h3C : all_interrupts[61] ? 6'h3D :
                {5'h1F, ~(all_interrupts[62])}} - 64'h8000000000000000;	// CSR.scala:283:37, :285:43, :287:22, :291:{47,62}, :293:{24,46}, Counters.scala:47:37, :52:27, Mux.scala:31:69, OneHot.scala:39:40
  assign io_bp_0_control_action = reg_bp_0_control_action;	// CSR.scala:239:19
  assign io_bp_0_control_tmatch = reg_bp_0_control_tmatch;	// CSR.scala:239:19
  assign io_bp_0_control_m = reg_bp_0_control_m;	// CSR.scala:239:19
  assign io_bp_0_control_s = reg_bp_0_control_s;	// CSR.scala:239:19
  assign io_bp_0_control_u = reg_bp_0_control_u;	// CSR.scala:239:19
  assign io_bp_0_control_x = reg_bp_0_control_x;	// CSR.scala:239:19
  assign io_bp_0_control_w = reg_bp_0_control_w;	// CSR.scala:239:19
  assign io_bp_0_control_r = reg_bp_0_control_r;	// CSR.scala:239:19
  assign io_bp_0_address = reg_bp_0_address;	// CSR.scala:239:19
endmodule

module BreakpointUnit(
  input         io_status_debug,
  input  [1:0]  io_status_prv,
  input         io_bp_0_control_action,
  input  [1:0]  io_bp_0_control_tmatch,
  input         io_bp_0_control_m,
                io_bp_0_control_s,
                io_bp_0_control_u,
                io_bp_0_control_x,
                io_bp_0_control_w,
                io_bp_0_control_r,
  input  [38:0] io_bp_0_address,
                io_pc,
                io_ea,
  output        io_xcpt_if,
                io_xcpt_ld,
                io_xcpt_st,
                io_debug_if,
                io_debug_ld,
                io_debug_st);

  wire [3:0] _T_216 = {io_bp_0_control_m, 1'h0, io_bp_0_control_s, io_bp_0_control_u} >> io_status_prv;	// Breakpoint.scala:30:68, Cat.scala:30:58
  wire       _T_285 = ~io_status_debug & _T_216[0];	// Breakpoint.scala:30:{35,50,68}
  wire       _T_255 = io_ea >= io_bp_0_address;	// Breakpoint.scala:44:8
  wire       _T_228 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];	// Breakpoint.scala:38:{73,83}, :44:36
  wire       _T_230 = _T_228 & io_bp_0_address[1];	// Breakpoint.scala:38:{73,83}
  wire       _T_240 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];	// Breakpoint.scala:38:{73,83}, :44:36
  wire       _T_242 = _T_240 & io_bp_0_address[1];	// Breakpoint.scala:38:{73,83}
  wire       _T_251 = _T_285 & io_bp_0_control_r & (io_bp_0_control_tmatch[1] ? _T_255 ^
                io_bp_0_control_tmatch[0] : (~io_ea | {35'h0, _T_230 & io_bp_0_address[2], _T_230, _T_228,
                io_bp_0_control_tmatch[0]}) == (~io_bp_0_address | {35'h0, _T_242 & io_bp_0_address[2],
                _T_242, _T_240, io_bp_0_control_tmatch[0]}));	// Breakpoint.scala:30:50, :38:{73,83}, :41:{6,9,19,24,33}, :44:{8,20,36}, :47:{8,23}, :73:38
  wire       _T_261 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];	// Breakpoint.scala:38:{73,83}, :44:36
  wire       _T_263 = _T_261 & io_bp_0_address[1];	// Breakpoint.scala:38:{73,83}
  wire       _T_273 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];	// Breakpoint.scala:38:{73,83}, :44:36
  wire       _T_275 = _T_273 & io_bp_0_address[1];	// Breakpoint.scala:38:{73,83}
  wire       _T_284 = _T_285 & io_bp_0_control_w & (io_bp_0_control_tmatch[1] ? _T_255 ^
                io_bp_0_control_tmatch[0] : (~io_ea | {35'h0, _T_263 & io_bp_0_address[2], _T_263, _T_261,
                io_bp_0_control_tmatch[0]}) == (~io_bp_0_address | {35'h0, _T_275 & io_bp_0_address[2],
                _T_275, _T_273, io_bp_0_control_tmatch[0]}));	// Breakpoint.scala:30:50, :38:{73,83}, :41:{6,9,19,24,33}, :44:{8,20,36}, :47:{8,23}, :74:38
  wire       _T_294 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];	// Breakpoint.scala:38:{73,83}, :44:36
  wire       _T_296 = _T_294 & io_bp_0_address[1];	// Breakpoint.scala:38:{73,83}
  wire       _T_306 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];	// Breakpoint.scala:38:{73,83}, :44:36
  wire       _T_308 = _T_306 & io_bp_0_address[1];	// Breakpoint.scala:38:{73,83}
  wire       _T_317 = _T_285 & io_bp_0_control_x & (io_bp_0_control_tmatch[1] ? io_pc >= io_bp_0_address ^
                io_bp_0_control_tmatch[0] : (~io_pc | {35'h0, _T_296 & io_bp_0_address[2], _T_296, _T_294,
                io_bp_0_control_tmatch[0]}) == (~io_bp_0_address | {35'h0, _T_308 & io_bp_0_address[2],
                _T_308, _T_306, io_bp_0_control_tmatch[0]}));	// Breakpoint.scala:30:50, :38:{73,83}, :41:{6,9,19,24,33}, :44:{8,20,36}, :47:{8,23}, :75:38
  assign io_xcpt_if = _T_317 & ~io_bp_0_control_action;	// Breakpoint.scala:64:14, :75:38, :80:{21,34,37}
  assign io_xcpt_ld = _T_251 & ~io_bp_0_control_action;	// Breakpoint.scala:65:14, :73:38, :78:{21,34,37}
  assign io_xcpt_st = _T_284 & ~io_bp_0_control_action;	// Breakpoint.scala:66:14, :74:38, :79:{21,34,37}
  assign io_debug_if = _T_317 & io_bp_0_control_action;	// Breakpoint.scala:67:15, :75:38, :80:{21,69}
  assign io_debug_ld = _T_251 & io_bp_0_control_action;	// Breakpoint.scala:68:15, :73:38, :78:{21,69}
  assign io_debug_st = _T_284 & io_bp_0_control_action;	// Breakpoint.scala:69:15, :74:38, :79:{21,69}
endmodule

module ALU(
  input         io_dw,
  input  [3:0]  io_fn,
  input  [63:0] io_in2,
                io_in1,
  output [63:0] io_out,
                io_adder_out);

  wire [63:0] in2_inv = {64{io_fn[3]}} ^ io_in2;	// ALU.scala:41:29, :61:20
  wire [63:0] in1_xor_in2 = io_in1 ^ in2_inv;	// ALU.scala:61:20, :62:28
  wire [63:0] _T_22 = io_in1 + in2_inv + {63'h0, io_fn[3]};	// ALU.scala:41:29, :61:20, :63:36, :90:50
  wire [31:0] _T_50 = io_dw ? io_in1[63:32] : {32{io_fn[3] & io_in1[31]}};	// ALU.scala:41:29, :76:{46,55}, :77:{24,48}, Bitwise.scala:71:12
  wire        _T_190 = io_fn == 4'h5;	// ALU.scala:81:24
  wire        _T_192 = io_fn == 4'hB;	// ALU.scala:81:44
  wire [63:0] shin = _T_190 | _T_192 ? {_T_50, io_in1[31:0]} : {io_in1[0], io_in1[1], io_in1[2], io_in1[3],
                io_in1[4], io_in1[5], io_in1[6], io_in1[7], io_in1[8], io_in1[9], io_in1[10], io_in1[11],
                io_in1[12], io_in1[13], io_in1[14], io_in1[15], io_in1[16], io_in1[17], io_in1[18],
                io_in1[19], io_in1[20], io_in1[21], io_in1[22], io_in1[23], io_in1[24], io_in1[25],
                io_in1[26], io_in1[27], io_in1[28], io_in1[29], io_in1[30], io_in1[31], _T_50[0], _T_50[1],
                _T_50[2], _T_50[3], _T_50[4], _T_50[5], _T_50[6], _T_50[7], _T_50[8], _T_50[9], _T_50[10],
                _T_50[11], _T_50[12], _T_50[13], _T_50[14], _T_50[15], _T_50[16], _T_50[17], _T_50[18],
                _T_50[19], _T_50[20], _T_50[21], _T_50[22], _T_50[23], _T_50[24], _T_50[25], _T_50[26],
                _T_50[27], _T_50[28], _T_50[29], _T_50[30], _T_50[31]};	// ALU.scala:77:24, :79:34, :81:{17,24,35,44}, Bitwise.scala:102:{21,39,46}, Cat.scala:30:58
  wire [64:0] _T_128 = $signed($signed({io_fn[3] & shin[63], shin}) >>> {59'h0, io_in2[5] & io_dw, io_in2[4:0]});	// ALU.scala:41:29, :78:{29,33,60}, :81:17, :82:{35,41,64}, Cat.scala:30:58
  wire        _T_208 = io_fn == 4'h6;	// ALU.scala:88:45
  wire [63:0] out = io_fn == 4'h0 | io_fn == 4'hA ? _T_22 : {63'h0, (io_fn == 4'h2 | io_fn == 4'h3 | io_fn >
                4'hB) & (io_fn[0] ^ (io_fn[3] ? (io_in1[63] == io_in2[63] ? _T_22[63] : io_fn[1] ?
                io_in2[63] : io_in1[63]) : in1_xor_in2 == 64'h0))} | (io_fn == 4'h4 | _T_208 ? in1_xor_in2
                : 64'h0) | (_T_208 | io_fn == 4'h7 ? io_in1 & io_in2 : 64'h0) | (_T_190 | _T_192 ?
                _T_128[63:0] : 64'h0) | (io_fn == 4'h1 ? {_T_128[0], _T_128[1], _T_128[2], _T_128[3],
                _T_128[4], _T_128[5], _T_128[6], _T_128[7], _T_128[8], _T_128[9], _T_128[10], _T_128[11],
                _T_128[12], _T_128[13], _T_128[14], _T_128[15], _T_128[16], _T_128[17], _T_128[18],
                _T_128[19], _T_128[20], _T_128[21], _T_128[22], _T_128[23], _T_128[24], _T_128[25],
                _T_128[26], _T_128[27], _T_128[28], _T_128[29], _T_128[30], _T_128[31], _T_128[32],
                _T_128[33], _T_128[34], _T_128[35], _T_128[36], _T_128[37], _T_128[38], _T_128[39],
                _T_128[40], _T_128[41], _T_128[42], _T_128[43], _T_128[44], _T_128[45], _T_128[46],
                _T_128[47], _T_128[48], _T_128[49], _T_128[50], _T_128[51], _T_128[52], _T_128[53],
                _T_128[54], _T_128[55], _T_128[56], _T_128[57], _T_128[58], _T_128[59], _T_128[60],
                _T_128[61], _T_128[62], _T_128[63]} : 64'h0);	// ALU.scala:41:29, :42:{30,48,59,66}, :43:35, :44:35, :62:28, :63:36, :66:36, :67:{8,35}, :68:{8,15,24,34,56}, :69:8, :81:{24,44}, :82:{64,73}, :84:{18,35}, :85:{18,25}, :88:{18,25,36,45}, :89:{18,35,44,63}, :90:{35,50,58}, :91:{16,23,34,43}, Bitwise.scala:102:{21,31,39,46}
  assign io_out = io_dw ? out : {{32{out[31]}}, out[31:0]};	// ALU.scala:91:16, :93:10, :96:{28,37,56,66}, Bitwise.scala:71:12, Cat.scala:30:58
  assign io_adder_out = _T_22;	// ALU.scala:63:36
endmodule

module MulDiv(
  input         clock,
                reset,
                io_req_valid,
  input  [3:0]  io_req_bits_fn,
  input         io_req_bits_dw,
  input  [63:0] io_req_bits_in1,
                io_req_bits_in2,
  input  [4:0]  io_req_bits_tag,
  input         io_kill,
                io_resp_ready,
  output        io_req_ready,
                io_resp_valid,
  output [63:0] io_resp_bits_data,
  output [4:0]  io_resp_bits_tag);

  reg  [2:0]   state;	// Multiplier.scala:45:18
  reg          req_dw;	// Multiplier.scala:47:16
  reg  [4:0]   req_tag;	// Multiplier.scala:47:16
  reg  [6:0]   count;	// Multiplier.scala:48:18
  reg          neg_out;	// Multiplier.scala:49:20
  reg          isMul;	// Multiplier.scala:50:18
  reg          isHi;	// Multiplier.scala:51:17
  reg  [64:0]  divisor;	// Multiplier.scala:52:20
  reg  [129:0] remainder;	// Multiplier.scala:53:22
  wire         _T_708 = state == 3'h5;	// Multiplier.scala:45:18, :92:11, :166:26
  wire         _T_709 = state == 3'h0;	// Multiplier.scala:45:18, :167:25
  always @(posedge clock) begin
    automatic logic        cmdMul;	// Decode.scala:14:30
    automatic logic        _T_114 = {io_req_bits_fn[3], io_req_bits_fn[0]} == 2'h0;	// Decode.scala:13:{65,121}
    automatic logic        lhs_sign;	// Multiplier.scala:70:23
    automatic logic        rhs_sign;	// Multiplier.scala:70:23
    automatic logic        _T_151;	// Multiplier.scala:80:15
    automatic logic        _T_156;	// Multiplier.scala:90:15
    automatic logic        _T_157;	// Multiplier.scala:94:15
    automatic logic        _T_222;	// Multiplier.scala:98:15
    automatic logic        _T_161;	// Multiplier.scala:98:26
    automatic logic [64:0] _T_181;	// Multiplier.scala:106:46
    automatic logic        _T_197;	// Multiplier.scala:108:13
    automatic logic        _T_225;	// Multiplier.scala:118:26
    automatic logic        _T_682;	// Decoupled.scala:30:37
    cmdMul = ~(io_req_bits_fn[2]) | io_req_bits_fn[3];	// Decode.scala:13:{65,121}, :14:30
    lhs_sign = (_T_114 | ~(io_req_bits_fn[2]) | io_req_bits_fn[1:0] == 2'h0) & (io_req_bits_dw ?
                                io_req_bits_in1[63] : io_req_bits_in1[31]);	// Decode.scala:13:{65,121}, :14:30, Multiplier.scala:70:{23,29,38,48}
    rhs_sign = (_T_114 | ~(io_req_bits_fn[2])) & (io_req_bits_dw ? io_req_bits_in2[63] :
                                io_req_bits_in2[31]);	// Decode.scala:13:{65,121}, :14:30, Multiplier.scala:70:{23,29,38,48}
    _T_151 = state == 3'h1;	// Multiplier.scala:45:18, :80:15
    _T_156 = state == 3'h4;	// Multiplier.scala:45:18, :90:15
    _T_157 = state == 3'h3;	// Multiplier.scala:45:18, :94:15
    _T_222 = state == 3'h2;	// Multiplier.scala:45:18, :87:11, :98:15
    _T_161 = _T_222 & isMul;	// Multiplier.scala:50:18, :98:{15,26}
    _T_181 = $signed(65'sh10000000000000000 >>> {59'h0, count[2:0], 3'h0});	// Multiplier.scala:45:18, :48:18, :106:{46,72}
    _T_197 = count != 7'h7 & (|count) & ~isHi & (remainder[63:0] & ~(_T_181[63:0])) == 64'h0;	// Multiplier.scala:48:18, :51:17, :53:22, :78:37, :106:{46,91}, :107:{47,81}, :108:{7,13,24,26,37}
    _T_225 = _T_222 & ~isMul;	// Multiplier.scala:50:18, :98:15, :118:{26,29}
    _T_682 = _T_709 & io_req_valid;	// Decoupled.scala:30:37, Multiplier.scala:167:25
    if (reset)
      state <= 3'h0;	// Multiplier.scala:45:18
    else if (_T_682) begin	// Decoupled.scala:30:37
      if (lhs_sign | rhs_sign & ~cmdMul)	// Decode.scala:14:30, Multiplier.scala:70:23, :154:{27,39,42}
        state <= 3'h1;	// Multiplier.scala:45:18, :80:15
      else	// Multiplier.scala:154:27
        state <= 3'h2;	// Multiplier.scala:45:18, :87:11
    end
    else if (io_resp_ready & _T_708 | io_kill)	// Decoupled.scala:30:37, Multiplier.scala:150:24, :166:26
      state <= 3'h0;	// Multiplier.scala:45:18
    else if (_T_225 & count == 7'h40) begin	// Multiplier.scala:48:18, :98:36, :109:36, :118:{26,37}, :127:{17,38}
      if (isHi)	// Multiplier.scala:51:17
        state <= 3'h3;	// Multiplier.scala:45:18, :94:15
      else	// Multiplier.scala:51:17
        state <= {2'h2, ~neg_out};	// CircuitMath.scala:32:10, Multiplier.scala:45:18, :49:20, :96:17, :128:41
    end
    else if (_T_161 & (_T_197 | count == 7'h7)) begin	// Multiplier.scala:48:18, :94:31, :98:{26,36}, :107:47, :108:13, :114:{16,25,51}
      if (isHi)	// Multiplier.scala:51:17
        state <= 3'h3;	// Multiplier.scala:45:18, :94:15
      else	// Multiplier.scala:51:17
        state <= 3'h5;	// Multiplier.scala:45:18, :92:11
    end
    else if (_T_157)	// Multiplier.scala:94:15
      state <= {2'h2, ~neg_out};	// CircuitMath.scala:32:10, Multiplier.scala:45:18, :49:20, :96:17
    else if (_T_156)	// Multiplier.scala:90:15
      state <= 3'h5;	// Multiplier.scala:45:18, :92:11
    else if (_T_151)	// Multiplier.scala:80:15
      state <= 3'h2;	// Multiplier.scala:45:18, :87:11
    if (_T_682) begin	// Decoupled.scala:30:37
      automatic logic cmdHi = {io_req_bits_fn[2], io_req_bits_fn[0]} == 2'h1 | io_req_bits_fn[1] | io_req_bits_fn[3];	// Decode.scala:13:{65,121}, :14:30
      req_dw <= io_req_bits_dw;	// Multiplier.scala:47:16
      req_tag <= io_req_bits_tag;	// Multiplier.scala:47:16
      count <= 7'h0;	// Multiplier.scala:48:18, :157:11
      neg_out <= ~cmdMul & (cmdHi ? lhs_sign : lhs_sign != rhs_sign);	// Decode.scala:14:30, Multiplier.scala:49:20, :70:23, :154:42, :158:{24,30,57}
      isMul <= cmdMul;	// Decode.scala:14:30, Multiplier.scala:50:18
      isHi <= cmdHi;	// Decode.scala:14:30, Multiplier.scala:51:17
      divisor <= {rhs_sign, io_req_bits_dw ? io_req_bits_in2[63:32] : {32{rhs_sign}}, io_req_bits_in2[31:0]};	// Bitwise.scala:71:12, Cat.scala:30:58, Multiplier.scala:52:20, :70:23, :71:{17,43}, :72:15
      remainder <= {66'h0, io_req_bits_dw ? io_req_bits_in1[63:32] : {32{lhs_sign}}, io_req_bits_in1[31:0]};	// Bitwise.scala:71:12, Multiplier.scala:53:22, :70:23, :71:{17,43}, :72:15, :82:17, :160:15
    end
    else begin	// Decoupled.scala:30:37
      automatic logic [64:0] subtractor;	// Multiplier.scala:77:37
      automatic logic        _T_662;	// Multiplier.scala:134:24
      automatic logic        _T_247;	// Multiplier.scala:134:30
      subtractor = remainder[128:64] - divisor;	// Multiplier.scala:52:20, :53:22, :77:{29,37}
      _T_662 = count == 7'h0;	// Multiplier.scala:48:18, :134:24, :157:11
      _T_247 = _T_662 & ~(subtractor[64]);	// Multiplier.scala:77:37, :122:28, :134:{24,30,33}
      if (_T_225) begin	// Multiplier.scala:118:26
        automatic logic [4:0] _T_449;	// CircuitMath.scala:38:21
        automatic logic [4:0] _T_652;	// CircuitMath.scala:38:21
        automatic logic [5:0] _T_659;	// Multiplier.scala:138:44
        automatic logic       _T_660;	// Multiplier.scala:139:33
        _T_449 = (|(divisor[63:32])) ? {|(divisor[63:48]), (|(divisor[63:48])) ? {|(divisor[63:56]),
                                                                (|(divisor[63:56])) ? {|(divisor[63:60]), (|(divisor[63:60])) ? (divisor[63] ? 2'h3 :
                                                                divisor[62] ? 2'h2 : {1'h0, divisor[61]}) : divisor[59] ? 2'h3 : divisor[58] ? 2'h2 :
                                                                {1'h0, divisor[57]}} : {|(divisor[55:52]), (|(divisor[55:52])) ? (divisor[55] ? 2'h3 :
                                                                divisor[54] ? 2'h2 : {1'h0, divisor[53]}) : divisor[51] ? 2'h3 : divisor[50] ? 2'h2 :
                                                                {1'h0, divisor[49]}}} : {|(divisor[47:40]), (|(divisor[47:40])) ? {|(divisor[47:44]),
                                                                (|(divisor[47:44])) ? (divisor[47] ? 2'h3 : divisor[46] ? 2'h2 : {1'h0, divisor[45]}) :
                                                                divisor[43] ? 2'h3 : divisor[42] ? 2'h2 : {1'h0, divisor[41]}} : {|(divisor[39:36]),
                                                                (|(divisor[39:36])) ? (divisor[39] ? 2'h3 : divisor[38] ? 2'h2 : {1'h0, divisor[37]}) :
                                                                divisor[35] ? 2'h3 : divisor[34] ? 2'h2 : {1'h0, divisor[33]}}}} : {|(divisor[31:16]),
                                                                (|(divisor[31:16])) ? {|(divisor[31:24]), (|(divisor[31:24])) ? {|(divisor[31:28]),
                                                                (|(divisor[31:28])) ? (divisor[31] ? 2'h3 : divisor[30] ? 2'h2 : {1'h0, divisor[29]}) :
                                                                divisor[27] ? 2'h3 : divisor[26] ? 2'h2 : {1'h0, divisor[25]}} : {|(divisor[23:20]),
                                                                (|(divisor[23:20])) ? (divisor[23] ? 2'h3 : divisor[22] ? 2'h2 : {1'h0, divisor[21]}) :
                                                                divisor[19] ? 2'h3 : divisor[18] ? 2'h2 : {1'h0, divisor[17]}}} : {|(divisor[15:8]),
                                                                (|(divisor[15:8])) ? {|(divisor[15:12]), (|(divisor[15:12])) ? (divisor[15] ? 2'h3 :
                                                                divisor[14] ? 2'h2 : {1'h0, divisor[13]}) : divisor[11] ? 2'h3 : divisor[10] ? 2'h2 :
                                                                {1'h0, divisor[9]}} : {|(divisor[7:4]), (|(divisor[7:4])) ? (divisor[7] ? 2'h3 : divisor[6]
                                                                ? 2'h2 : {1'h0, divisor[5]}) : divisor[3] ? 2'h3 : divisor[2] ? 2'h2 : {1'h0,
                                                                divisor[1]}}}};	// Cat.scala:30:58, CircuitMath.scala:30:8, :32:{10,12}, :35:17, :37:22, :38:21, Decode.scala:14:30, Multiplier.scala:52:20
        _T_652 = (|(remainder[63:32])) ? {|(remainder[63:48]), (|(remainder[63:48])) ? {|(remainder[63:56]),
                                                                (|(remainder[63:56])) ? {|(remainder[63:60]), (|(remainder[63:60])) ? (remainder[63] ? 2'h3
                                                                : remainder[62] ? 2'h2 : {1'h0, remainder[61]}) : remainder[59] ? 2'h3 : remainder[58] ?
                                                                2'h2 : {1'h0, remainder[57]}} : {|(remainder[55:52]), (|(remainder[55:52])) ?
                                                                (remainder[55] ? 2'h3 : remainder[54] ? 2'h2 : {1'h0, remainder[53]}) : remainder[51] ?
                                                                2'h3 : remainder[50] ? 2'h2 : {1'h0, remainder[49]}}} : {|(remainder[47:40]),
                                                                (|(remainder[47:40])) ? {|(remainder[47:44]), (|(remainder[47:44])) ? (remainder[47] ? 2'h3
                                                                : remainder[46] ? 2'h2 : {1'h0, remainder[45]}) : remainder[43] ? 2'h3 : remainder[42] ?
                                                                2'h2 : {1'h0, remainder[41]}} : {|(remainder[39:36]), (|(remainder[39:36])) ?
                                                                (remainder[39] ? 2'h3 : remainder[38] ? 2'h2 : {1'h0, remainder[37]}) : remainder[35] ?
                                                                2'h3 : remainder[34] ? 2'h2 : {1'h0, remainder[33]}}}} : {|(remainder[31:16]),
                                                                (|(remainder[31:16])) ? {|(remainder[31:24]), (|(remainder[31:24])) ? {|(remainder[31:28]),
                                                                (|(remainder[31:28])) ? (remainder[31] ? 2'h3 : remainder[30] ? 2'h2 : {1'h0,
                                                                remainder[29]}) : remainder[27] ? 2'h3 : remainder[26] ? 2'h2 : {1'h0, remainder[25]}} :
                                                                {|(remainder[23:20]), (|(remainder[23:20])) ? (remainder[23] ? 2'h3 : remainder[22] ? 2'h2
                                                                : {1'h0, remainder[21]}) : remainder[19] ? 2'h3 : remainder[18] ? 2'h2 : {1'h0,
                                                                remainder[17]}}} : {|(remainder[15:8]), (|(remainder[15:8])) ? {|(remainder[15:12]),
                                                                (|(remainder[15:12])) ? (remainder[15] ? 2'h3 : remainder[14] ? 2'h2 : {1'h0,
                                                                remainder[13]}) : remainder[11] ? 2'h3 : remainder[10] ? 2'h2 : {1'h0, remainder[9]}} :
                                                                {|(remainder[7:4]), (|(remainder[7:4])) ? (remainder[7] ? 2'h3 : remainder[6] ? 2'h2 :
                                                                {1'h0, remainder[5]}) : remainder[3] ? 2'h3 : remainder[2] ? 2'h2 : {1'h0, remainder[1]}}}};	// Cat.scala:30:58, CircuitMath.scala:30:8, :32:{10,12}, :35:17, :37:22, :38:21, Decode.scala:14:30, Multiplier.scala:53:22
        _T_659 = {|(divisor[63:32]), _T_449} - 6'h1 - {|(remainder[63:32]), _T_652};	// CircuitMath.scala:35:17, :37:22, :38:21, Multiplier.scala:52:20, :53:22, :138:{31,44}
        _T_660 = {|(divisor[63:32]), _T_449} > {|(remainder[63:32]), _T_652};	// Cat.scala:30:58, CircuitMath.scala:35:17, :37:22, :38:21, Multiplier.scala:52:20, :53:22, :139:33
        if (_T_662 & ~_T_247 & ((|_T_659) | _T_660)) begin	// Multiplier.scala:134:{24,30}, :138:44, :139:33, :140:{33,41,53,70}
          automatic logic [5:0] _T_673;	// Multiplier.scala:142:22
          _T_673 = _T_660 ? 6'h3F : _T_659;	// Multiplier.scala:138:{31,44}, :139:33, :142:22
          count <= {1'h0, _T_673};	// Decode.scala:14:30, Multiplier.scala:48:18, :142:22, :145:15
          remainder <= {3'h0, {63'h0, remainder[63:0]} << _T_673};	// Multiplier.scala:45:18, :53:22, :78:37, :142:22, :144:{19,39}
        end
        else begin	// Multiplier.scala:140:41
          count <= count + 7'h1;	// Multiplier.scala:48:18, :113:20, :132:20
          remainder <= {1'h0, subtractor[64] ? remainder[127:64] : subtractor[63:0], remainder[63:0],
                                                                                ~(subtractor[64])};	// Decode.scala:14:30, Multiplier.scala:53:22, :77:37, :78:37, :122:28, :123:{14,24,45,67}, :126:15
        end
      end
      else if (_T_161) begin	// Multiplier.scala:98:26
        automatic logic [72:0]  _T_172;	// Multiplier.scala:103:52
        automatic logic [128:0] _T_205;	// Multiplier.scala:109:27
        _T_172 = {{8{divisor[64]}}, divisor} * {{65{remainder[7]}}, remainder[7:0]} + {{8{remainder[129]}},
                                                                remainder[129:65]};	// Multiplier.scala:52:20, :53:22, :99:31, :103:{22,43,52}
        count <= count + 7'h1;	// Multiplier.scala:48:18, :113:20
        _T_205 = {remainder[129:65], remainder[63:0]} >> 6'h0 - {count[2:0], 3'h0};	// Cat.scala:30:58, Multiplier.scala:45:18, :48:18, :53:22, :78:37, :99:31, :106:72, :109:{27,36}
        remainder <= {_T_172[72:8], 1'h0, _T_197 ? _T_205[63:0] : {_T_172[7:0], remainder[63:8]}};	// Cat.scala:30:58, Decode.scala:14:30, Multiplier.scala:53:22, :103:52, :104:38, :108:13, :109:27, :110:{37,55}
      end
      else if (_T_157)	// Multiplier.scala:94:15
        remainder <= {66'h0, remainder[128:65]};	// Multiplier.scala:53:22, :82:17, :95:{15,27}
      else if (_T_156 | _T_151 & (remainder[63] | isMul))	// Multiplier.scala:50:18, :53:22, :80:{15,33}, :81:{20,26,36}, :90:{15,33}, :91:15
        remainder <= {66'h0, 64'h0 - remainder[63:0]};	// Multiplier.scala:53:22, :78:{27,37}, :82:17, :108:37
      neg_out <= (~_T_225 | ~(_T_247 & ~isHi)) & neg_out;	// Multiplier.scala:49:20, :51:17, :118:{26,37}, :134:30, :148:{18,21,28,38}
      if (_T_151 & (divisor[63] | isMul))	// Multiplier.scala:50:18, :52:20, :80:{15,33}, :84:{18,24,34}
        divisor <= subtractor;	// Multiplier.scala:52:20, :77:37
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        state = _RANDOM_0[2:0];	// Multiplier.scala:45:18
        req_dw = _RANDOM_0[7];	// Multiplier.scala:45:18, :47:16
        req_tag = _RANDOM_4[12:8];	// Multiplier.scala:47:16
        count = _RANDOM_4[19:13];	// Multiplier.scala:47:16, :48:18
        neg_out = _RANDOM_4[20];	// Multiplier.scala:47:16, :49:20
        isMul = _RANDOM_4[21];	// Multiplier.scala:47:16, :50:18
        isHi = _RANDOM_4[22];	// Multiplier.scala:47:16, :51:17
        divisor = {_RANDOM_4[31:23], _RANDOM_5, _RANDOM_6[23:0]};	// Multiplier.scala:47:16, :52:20
        remainder = {_RANDOM_6[31:24], _RANDOM_7, _RANDOM_8, _RANDOM_9, _RANDOM_10[25:0]};	// Multiplier.scala:52:20, :53:22
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_req_ready = _T_709;	// Multiplier.scala:167:25
  assign io_resp_valid = _T_708;	// Multiplier.scala:166:26
  assign io_resp_bits_data = req_dw ? remainder[63:0] : {{32{remainder[31]}}, remainder[31:0]};	// Bitwise.scala:71:12, Cat.scala:30:58, Multiplier.scala:47:16, :53:22, :78:37, :165:{27,67,86}
  assign io_resp_bits_tag = req_tag;	// Multiplier.scala:47:16
endmodule

module RVCExpander(
  input  [31:0] io_in,
  output [31:0] io_out_bits,
  output [4:0]  io_out_rd,
                io_out_rs1,
                io_out_rs2,
                io_out_rs3,
  output        io_rvc);

  wire       _GEN = io_in[14] | io_in[13];	// Package.scala:18:26, :19:{12,17}
  wire [3:0] _GEN_0 = {4{io_in[12]}};	// Package.scala:19:12, RVC.scala:43:30
  assign io_out_bits = io_in[1] ? (io_in[0] ? io_in : io_in[15] ? (io_in[14] ? (io_in[13] ? {3'h0, io_in[9:7],
                io_in[12], io_in[6:2], 8'h13, io_in[11:10], 10'h23} : {4'h0, io_in[8:7], io_in[12],
                io_in[6:2], 8'h12, io_in[11:9], 9'h23}) : io_in[13] ? {3'h0, io_in[9:7], io_in[12],
                io_in[6:2], 8'h13, io_in[11:10], 10'h27} : {7'h0, io_in[12] ? ((|(io_in[6:2])) ?
                {io_in[6:2], io_in[11:7], 3'h0, io_in[11:7], 7'h33} : (|(io_in[11:7])) ? {io_in[6:2],
                io_in[11:7], 15'hE7} : {io_in[6:2] | 5'h1, io_in[11:7], 15'h73}) : {io_in[6:2],
                (|(io_in[6:2])) ? {8'h0, io_in[11:7], 7'h33} : {io_in[11:7], (|(io_in[11:7])) ? 15'h67 :
                15'h1F}}}) : io_in[14] ? {io_in[13] ? {3'h0, io_in[4:2], io_in[12], io_in[6:5], 11'h13} :
                {4'h0, io_in[3:2], io_in[12], io_in[6:4], 10'h12}, io_in[11:7], 7'h3} : io_in[13] ? {3'h0,
                io_in[4:2], io_in[12], io_in[6:5], 11'h13, io_in[11:7], 7'h7} : {6'h0, io_in[12],
                io_in[6:2], io_in[11:7], 3'h1, io_in[11:7], 7'h13}) : io_in[0] ? (io_in[15] ? (io_in[14] ?
                {_GEN_0, io_in[6:5], io_in[2], 7'h1, io_in[9:7], 2'h0, io_in[13], io_in[11:10], io_in[4:3],
                io_in[12], 7'h63} : io_in[13] ? {io_in[12], io_in[8], io_in[10:9], io_in[6], io_in[7],
                io_in[2], io_in[11], io_in[5:3], {9{io_in[12]}}, 12'h6F} : io_in[11] ? (io_in[10] ? {1'h0,
                io_in[6:5] == 2'h0, 7'h1, io_in[4:2], 2'h1, io_in[9:7], io_in[12] ? {1'h0, io_in[6] ?
                {1'h1, io_in[5]} : 2'h0} : io_in[6] ? {2'h3, io_in[5]} : {io_in[5], 2'h0}, 2'h1,
                io_in[9:7], 3'h3, io_in[12], 3'h3} : {{7{io_in[12]}}, io_in[6:2], 2'h1, io_in[9:7], 5'h1D,
                io_in[9:7], 7'h13}) : {1'h0, io_in[10], 4'h0, io_in[12], io_in[6:2], 2'h1, io_in[9:7],
                5'h15, io_in[9:7], 7'h13}) : {{3{io_in[12]}}, io_in[14] ? (io_in[13] ? (io_in[11:7] == 5'h0
                | io_in[11:7] == 5'h2 ? {io_in[4:3], io_in[5], io_in[2], io_in[6], 4'h0, io_in[11:7], 3'h0,
                io_in[11:7], (|{{7{io_in[12]}}, io_in[6:2]}) ? 7'h13 : 7'h1F} : {{12{io_in[12]}},
                io_in[6:2], io_in[11:7], 3'h3, {{7{io_in[12]}}, io_in[6:2]} == 12'h0, 3'h7}) : {_GEN_0,
                io_in[6:2], 8'h0, io_in[11:7], 7'h13}) : {_GEN_0, io_in[6:2], io_in[11:7], 3'h0,
                io_in[11:7], io_in[13] ? {4'h3, io_in[11:7] == 5'h0, 2'h3} : 7'h13}}) : io_in[15] ?
                (io_in[14] ? (io_in[13] ? {4'h0, io_in[6:5], io_in[12], 2'h1, io_in[4:2], 2'h1, io_in[9:7],
                3'h3, io_in[11:10], 10'h23} : {5'h0, io_in[5], io_in[12], 2'h1, io_in[4:2], 2'h1,
                io_in[9:7], 3'h2, io_in[11:10], io_in[6], 9'h23}) : io_in[13] ? {4'h0, io_in[6:5],
                io_in[12], 2'h1, io_in[4:2], 2'h1, io_in[9:7], 3'h3, io_in[11:10], 10'h27} : {5'h0,
                io_in[5], io_in[12], 2'h1, io_in[4:2], 2'h1, io_in[9:7], 3'h2, io_in[11:10], io_in[6],
                9'h2F}) : io_in[14] ? {io_in[13] ? {4'h0, io_in[6:5], io_in[12:10], 5'h1, io_in[9:7], 5'hD}
                : {5'h0, io_in[5], io_in[12:10], io_in[6], 4'h1, io_in[9:7], 5'h9}, io_in[4:2], 7'h3} :
                io_in[13] ? {4'h0, io_in[6:5], io_in[12:10], 5'h1, io_in[9:7], 5'hD, io_in[4:2], 7'h7} :
                {2'h0, io_in[10:7], io_in[12:11], io_in[5], io_in[6], 12'h41, io_in[4:2], (|(io_in[12:5]))
                ? 7'h13 : 7'h1F};	// Bitwise.scala:71:12, Cat.scala:30:58, Package.scala:18:26, :19:{12,17}, RVC.scala:22:14, :30:30, :31:30, :33:13, :34:{26,35,45,51}, :36:{20,28}, :37:{22,37}, :39:22, :42:{42,56}, :43:{30,38}, :44:{36,42,57,69,76}, :53:{20,22,29}, :63:{32,66}, :77:{20,24}, :86:{20,29}, :90:29, :92:{10,14,21,27}, :103:30, :104:22, :105:43, :107:42, :122:66, :133:{33,37}, :134:{22,27}, :136:47, :137:{33,37}, :138:{25,30}, :139:10, :162:26
  assign io_out_rd = io_in[1] ? (io_in[0] | ~(io_in[15]) | io_in[14] | io_in[13] ? io_in[11:7] : io_in[12] ?
                ((|(io_in[6:2])) ? io_in[11:7] : 5'h1) : (|(io_in[6:2])) ? io_in[11:7] : 5'h0) : io_in[0] ?
                (io_in[15] ? (io_in[14] ? (io_in[13] ? 5'h0 : {2'h1, io_in[9:7]}) : io_in[13] ? 5'h0 :
                {2'h1, io_in[9:7]}) : io_in[11:7]) : {2'h1, io_in[4:2]};	// Cat.scala:30:58, Package.scala:18:26, :19:{12,17}, RVC.scala:30:30, :31:30, :33:13, :43:{30,38}, :134:{22,27}, :138:{25,30}, :139:10
  assign io_out_rs1 = io_in[1] ? (io_in[0] ? io_in[19:15] : io_in[15] ? (_GEN ? 5'h2 : io_in[12] |
                ~(|(io_in[6:2])) ? io_in[11:7] : 5'h0) : _GEN ? 5'h2 : io_in[11:7]) : io_in[0] ? (io_in[15]
                ? {2'h1, io_in[9:7]} : ~(io_in[14]) | io_in[13] ? io_in[11:7] : 5'h0) : io_in[15] ? {2'h1,
                io_in[9:7]} : io_in[14] ? {2'h1, io_in[9:7]} : io_in[13] ? {2'h1, io_in[9:7]} : 5'h2;	// Cat.scala:30:58, Package.scala:18:26, :19:{12,17}, RVC.scala:20:57, :30:30, :33:13, :43:{30,38}, :134:27, :139:10
  assign io_out_rs2 = io_in[1] ? (io_in[0] ? io_in[24:20] : io_in[6:2]) : io_in[0] ? (io_in[15] ? (io_in[14] ?
                5'h0 : {2'h1, io_in[4:2]}) : {2'h1, io_in[4:2]}) : {2'h1, io_in[4:2]};	// Cat.scala:30:58, Package.scala:19:{12,17}, RVC.scala:20:79, :31:30, :43:38
  assign io_out_rs3 = io_in[31:27];	// RVC.scala:20:101
  assign io_rvc = io_in[1:0] != 2'h3;	// RVC.scala:162:{20,26}
endmodule

